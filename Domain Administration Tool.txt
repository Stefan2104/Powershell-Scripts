#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 0f81d222-13bc-463c-9dde-e2018c9c77f5
# Source File: ITSD Active Directory Tool.psproj
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.167
     Generated on:       17/10/2019 11:29
     Generated by:       Stefan Larsen 
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}



#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formArlaAdministrationTo = New-Object 'System.Windows.Forms.Form'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$groupboxExchangeAdmin = New-Object 'System.Windows.Forms.GroupBox'
	$buttonConnectToExchange = New-Object 'System.Windows.Forms.Button'
	$buttonMassCreateContacts = New-Object 'System.Windows.Forms.Button'
	$labelMassAdministration = New-Object 'System.Windows.Forms.Label'
	$buttonOwnersForDistributio = New-Object 'System.Windows.Forms.Button'
	$buttonAddGroupautomapping = New-Object 'System.Windows.Forms.Button'
	$buttonCreateMailforwarding = New-Object 'System.Windows.Forms.Button'
	$buttonCreateContacts = New-Object 'System.Windows.Forms.Button'
	$buttonCreateDistributionli = New-Object 'System.Windows.Forms.Button'
	$buttonCreateSharedMailbox = New-Object 'System.Windows.Forms.Button'
	$buttonCreateRoomResource = New-Object 'System.Windows.Forms.Button'
	$buttonUnlock = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonCreateSMSPasscodeAnd = New-Object 'System.Windows.Forms.Button'
	$buttonSAPEmptyConnectionLi = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$textboxAccountDisabled = New-Object 'System.Windows.Forms.TextBox'
	$textboxAccountLocked = New-Object 'System.Windows.Forms.TextBox'
	$textboxPasswordExpired = New-Object 'System.Windows.Forms.TextBox'
	$labelAccountDisabled = New-Object 'System.Windows.Forms.Label'
	$labelAccountLocked = New-Object 'System.Windows.Forms.Label'
	$labelPassExpirationDate = New-Object 'System.Windows.Forms.Label'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonRemote = New-Object 'System.Windows.Forms.Button'
	$listboxMappedDrives = New-Object 'System.Windows.Forms.ListBox'
	$labelMappedDrives = New-Object 'System.Windows.Forms.Label'
	$textboxPCNumber = New-Object 'System.Windows.Forms.TextBox'
	$textboxZDrive = New-Object 'System.Windows.Forms.TextBox'
	$textboxHDrive = New-Object 'System.Windows.Forms.TextBox'
	$textboxManager = New-Object 'System.Windows.Forms.TextBox'
	$textboxPhone = New-Object 'System.Windows.Forms.TextBox'
	$textboxLocation = New-Object 'System.Windows.Forms.TextBox'
	$textboxEmail = New-Object 'System.Windows.Forms.TextBox'
	$textboxFullName = New-Object 'System.Windows.Forms.TextBox'
	$labelPcNumber = New-Object 'System.Windows.Forms.Label'
	$labelZdrivePath = New-Object 'System.Windows.Forms.Label'
	$labelHDrivePath = New-Object 'System.Windows.Forms.Label'
	$labelManager = New-Object 'System.Windows.Forms.Label'
	$labelPhoneNumber = New-Object 'System.Windows.Forms.Label'
	$labelLocation = New-Object 'System.Windows.Forms.Label'
	$labelEmail = New-Object 'System.Windows.Forms.Label'
	$labelFullName = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonGroupsManagedByUser = New-Object 'System.Windows.Forms.Button'
	$buttonCompareUserGroups = New-Object 'System.Windows.Forms.Button'
	$buttonManageMemberOf = New-Object 'System.Windows.Forms.Button'
	$buttonSearchActiveDirector = New-Object 'System.Windows.Forms.Button'
	$buttonResetSAPPassword = New-Object 'System.Windows.Forms.Button'
	$buttonManageUserAttributes = New-Object 'System.Windows.Forms.Button'
	$buttonResetADPassword = New-Object 'System.Windows.Forms.Button'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formITSDADAdministration_Load = {
		
		# Disable Maximize
		$formArlaAdministrationTo.MaximizeBox = $false
			
		$buttonSearch.Enabled = $false
		# Disable Exchange forms/button
		$buttonAddGroupautomapping.Enabled = $false
		$buttonCreateContacts.Enabled = $false
		$buttonCreateDistributionli.Enabled = $false
		$buttonCreateMailforwarding.Enabled = $false
		$buttonCreateRoomResource.Enabled = $false
		$buttonCreateSharedMailbox.Enabled = $false
		$buttonMassCreateContacts.Enabled = $false
		$buttonOwnersForDistributio.Enabled = $false
		
	}
	
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	#endregion
	
	$buttonManageMemberOf_Click={
		if ((Show-List_Groups_for_User_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonSearchActiveDirector_Click={
		if ((Show-AD_Search_Engine_psf) -eq 'OK')
		{
			
		}
	}
	
	$label5_Click={
	}
	
	$labelPhoneNumber_Click={
	}
	
	$labelZdrivePath_Click={
	}
	
	$statusbar1_PanelClick=[System.Windows.Forms.StatusBarPanelClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
		
		
	}
	
	$labelPhoneNumber_Click={	
	}
	
	$buttonSearch_Click = {
		$textboxUsername.Text = $textboxUsername.Text.Trim()
		Get-ADInfo -userEntry $textboxUsername.Text
		if ($textboxAccountLocked.Text -eq "True")
		{
			$buttonUnlock.Show()
		}
		
	}
	
	$textboxAccountLocked_TextChanged={
	}
	
	$groupbox1_Enter={
	}
	
	$textboxAccountDisabled_TextChanged={
	}
	
	$buttonManageUserAttributes_Click={
		
		if ((Show-List_Properties_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonResetADPassword_Click={
		if ((Show-ResetADPassword_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonResetSAPPassword_Click={
		
		if ((Show-GenerateSAPPassword_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonSAPEmptyConnectionLi_Click={
		If ((Show-SAP_Empty_Connection_List_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonUnlock_Click={
		#TODO: Place custom script here
		$Unlock_Account = Unlock-ADAccount -Server "" -Identity $textboxUsername.Text
		If ($Unlock_Account -eq $null)
		{
			$statusbar1.Text = [System.Windows.MessageBox]::Show("User was successfully unlocked!", "Success!", 'OK', 'Information')
			$textboxAccountLocked.Text = "False"
			$buttonUnlock.Hide()
		}
		else
		{
			$statusbar1.Text = "Could not unlock user!"
		}
		
	}
	
	
	## Exchange Buttons
	
	$buttonCreateRoomResource_Click={
		#TODO: Place custom script here
		if ((Show-CreateRoomResource_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonCreateDistributionli_Click={
		#TODO: Place custom script here
		if ((Show-CreateDistributionList_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonCreateSharedMailbox_Click={
		#TODO: Place custom script here
		if ((Show-CreateSharedMailbox_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonCreateContacts_Click={
		#TODO: Place custom script here
		if ((Show-CreateContact_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonCreateMailforwarding_Click={
		#TODO: Place custom script here
		if ((Show-CreateMailForwarding_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonAddGroupautomapping_Click={
		#TODO: Place custom script here
		if ((Show-AddGroupAutoMapping_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonOwnersForDistributio_Click={
		#TODO: Place custom script here
		if ((Show-AddOwnersDistributionList_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonMassCreateContacts_Click={
		#TODO: Place custom script here
		if ((Show-MassCreateContacts_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonConnectToExchange_Click={
		#TODO: Place custom script here
		try
		{
			Import-Module 'C:\Program Files\Microsoft\Exchange Server\V15\Bin\RemoteExchange.ps1' -ErrorAction Stop
			Connect-ExchangeServer #  -auto
			$buttonAddGroupautomapping.Enabled = $true
			$buttonCreateContacts.Enabled = $true
			$buttonCreateDistributionli.Enabled = $true
			$buttonCreateMailforwarding.Enabled = $true
			$buttonCreateRoomResource.Enabled = $true
			$buttonCreateSharedMailbox.Enabled = $true
			$buttonMassCreateContacts.Enabled = $true
			$buttonOwnersForDistributio.Enabled = $true
			$buttonConnectToExchange.Enabled = $false
		}
		catch
		{
			[void][System.Windows.MessageBox]::Show("Exchange Administration is only available on Jumphost!", "Exchange Server not found", 'OK', 'Hand')
		}	
	}
	
	
	$buttonCompareUserGroups_Click={
		if ((Show-Compare_Users__groups_psf) -eq 'OK')
		{
			
		}
		
	}
	
	
	
	$buttonCreateSMSPasscodeAnd_Click={
		if ((Show-Create_SMS_Passcode_psf) -eq 'OK')
		{
			
		}
		
	}
	
	$buttonGroupsManagedByUser_Click={
		if ((Show-Groups_ManagedBy_user_psf) -eq 'OK')
		{
			
		}
	}
	
	$textboxPCNumber_TextChanged={
		if ($textboxPCNumber.Text.Trim()[2] -eq 'W')
		{
			$buttonRemote.Show()
		}
		
	}
	
	$buttonRemote_Click = {
		if (Test-Connection -BufferSize 32 -ComputerName $textboxPCNumber.Text -Count 1 -Quiet)
		{
			Start-Process "\\dkclu00005\Medie\__ServiceDesk\_REMOTE TOOLS\RemoteControl_1902\CmRcviewer.exe" $textboxPCNumber.Text
		}
		elseif (([System.Windows.MessageBox]::Show("Could not connect with CmRcViewer. User might be on VPN, wanna try different tool?", 'Remote with VPN tool?', 'YesNo', 'Warning')) -eq 'Yes')
		{
			msra.exe /offerra $textboxPCNumber.text
		}	
	}
	
	$comboboxSearch_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	
	$combobox1_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	$textboxUsername_TextChanged={
		$buttonRemote.Hide()
		$buttonSearch.Enabled = $false
		if ($textboxUsername.Text.Trim() -ne '')
		{
			$buttonSearch.Enabled = $true
		}
		$textboxAccountLocked.Text = ""
		$textboxEmail.Text = ""
		$textboxFullName.Text = ""
		$textboxHDrive.Text = ""
		$textboxLocation.Text = ""
		$textboxManager.Text = ""
		$textboxPasswordExpired.Text = ""
		$textboxPhone.Text = ""
		$textboxZDrive.Text = ""
		$textboxAccountDisabled.Text = ""
		$textboxPCNumber.Text = ""
		$listboxMappedDrives.Items.Clear()
		$buttonUnlock.Hide()	
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formArlaAdministrationTo.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxUsername = $textboxUsername.Text
		$script:MainForm_textboxAccountDisabled = $textboxAccountDisabled.Text
		$script:MainForm_textboxAccountLocked = $textboxAccountLocked.Text
		$script:MainForm_textboxPasswordExpired = $textboxPasswordExpired.Text
		$script:MainForm_listboxMappedDrives = $listboxMappedDrives.SelectedItems
		$script:MainForm_textboxPCNumber = $textboxPCNumber.Text
		$script:MainForm_textboxZDrive = $textboxZDrive.Text
		$script:MainForm_textboxHDrive = $textboxHDrive.Text
		$script:MainForm_textboxManager = $textboxManager.Text
		$script:MainForm_textboxPhone = $textboxPhone.Text
		$script:MainForm_textboxLocation = $textboxLocation.Text
		$script:MainForm_textboxEmail = $textboxEmail.Text
		$script:MainForm_textboxFullName = $textboxFullName.Text
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxUsername.remove_TextChanged($textboxUsername_TextChanged)
			$buttonConnectToExchange.remove_Click($buttonConnectToExchange_Click)
			$buttonMassCreateContacts.remove_Click($buttonMassCreateContacts_Click)
			$buttonOwnersForDistributio.remove_Click($buttonOwnersForDistributio_Click)
			$buttonAddGroupautomapping.remove_Click($buttonAddGroupautomapping_Click)
			$buttonCreateMailforwarding.remove_Click($buttonCreateMailforwarding_Click)
			$buttonCreateContacts.remove_Click($buttonCreateContacts_Click)
			$buttonCreateDistributionli.remove_Click($buttonCreateDistributionli_Click)
			$buttonCreateSharedMailbox.remove_Click($buttonCreateSharedMailbox_Click)
			$buttonCreateRoomResource.remove_Click($buttonCreateRoomResource_Click)
			$buttonUnlock.remove_Click($buttonUnlock_Click)
			$buttonCreateSMSPasscodeAnd.remove_Click($buttonCreateSMSPasscodeAnd_Click)
			$buttonSAPEmptyConnectionLi.remove_Click($buttonSAPEmptyConnectionLi_Click)
			$statusbar1.remove_PanelClick($statusbar1_PanelClick)
			$textboxAccountDisabled.remove_TextChanged($textboxAccountDisabled_TextChanged)
			$textboxAccountLocked.remove_TextChanged($textboxAccountLocked_TextChanged)
			$buttonRemote.remove_Click($buttonRemote_Click)
			$textboxPCNumber.remove_TextChanged($textboxPCNumber_TextChanged)
			$labelPcNumber.remove_Click($labelZdrivePath_Click)
			$labelZdrivePath.remove_Click($labelZdrivePath_Click)
			$labelPhoneNumber.remove_Click($labelPhoneNumber_Click)
			$buttonGroupsManagedByUser.remove_Click($buttonGroupsManagedByUser_Click)
			$buttonCompareUserGroups.remove_Click($buttonCompareUserGroups_Click)
			$buttonManageMemberOf.remove_Click($buttonManageMemberOf_Click)
			$buttonSearchActiveDirector.remove_Click($buttonSearchActiveDirector_Click)
			$buttonResetSAPPassword.remove_Click($buttonResetSAPPassword_Click)
			$buttonManageUserAttributes.remove_Click($buttonManageUserAttributes_Click)
			$buttonResetADPassword.remove_Click($buttonResetADPassword_Click)
			$groupbox1.remove_Enter($groupbox1_Enter)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$formArlaAdministrationTo.remove_Load($formITSDADAdministration_Load)
			$formArlaAdministrationTo.remove_Load($Form_StateCorrection_Load)
			$formArlaAdministrationTo.remove_Closing($Form_StoreValues_Closing)
			$formArlaAdministrationTo.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formArlaAdministrationTo.SuspendLayout()
	$groupboxExchangeAdmin.SuspendLayout()
	$groupbox4.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# formArlaAdministrationTo
	#
	$formArlaAdministrationTo.Controls.Add($labelUsername)
	$formArlaAdministrationTo.Controls.Add($textboxUsername)
	$formArlaAdministrationTo.Controls.Add($groupboxExchangeAdmin)
	$formArlaAdministrationTo.Controls.Add($buttonUnlock)
	$formArlaAdministrationTo.Controls.Add($groupbox4)
	$formArlaAdministrationTo.Controls.Add($statusbar1)
	$formArlaAdministrationTo.Controls.Add($groupbox3)
	$formArlaAdministrationTo.Controls.Add($groupbox2)
	$formArlaAdministrationTo.Controls.Add($groupbox1)
	$formArlaAdministrationTo.Controls.Add($buttonSearch)
	$formArlaAdministrationTo.AutoScaleDimensions = '6, 13'
	$formArlaAdministrationTo.AutoScaleMode = 'Font'
	$formArlaAdministrationTo.ClientSize = '820, 530'
	$formArlaAdministrationTo.FormBorderStyle = 'FixedToolWindow'
	$formArlaAdministrationTo.Name = 'formArlaAdministrationTo'
	$formArlaAdministrationTo.StartPosition = 'CenterScreen'
	$formArlaAdministrationTo.Text = 'Arla Administration Tool'
	$formArlaAdministrationTo.add_Load($formITSDADAdministration_Load)
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Font = 'Microsoft Sans Serif, 9.5pt'
	$labelUsername.Location = '12, 17'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '69, 19'
	$labelUsername.TabIndex = 104
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# textboxUsername
	#
	$textboxUsername.Location = '87, 16'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '137, 20'
	$textboxUsername.TabIndex = 103
	$textboxUsername.add_TextChanged($textboxUsername_TextChanged)
	#
	# groupboxExchangeAdmin
	#
	$groupboxExchangeAdmin.Controls.Add($buttonConnectToExchange)
	$groupboxExchangeAdmin.Controls.Add($buttonMassCreateContacts)
	$groupboxExchangeAdmin.Controls.Add($labelMassAdministration)
	$groupboxExchangeAdmin.Controls.Add($buttonOwnersForDistributio)
	$groupboxExchangeAdmin.Controls.Add($buttonAddGroupautomapping)
	$groupboxExchangeAdmin.Controls.Add($buttonCreateMailforwarding)
	$groupboxExchangeAdmin.Controls.Add($buttonCreateContacts)
	$groupboxExchangeAdmin.Controls.Add($buttonCreateDistributionli)
	$groupboxExchangeAdmin.Controls.Add($buttonCreateSharedMailbox)
	$groupboxExchangeAdmin.Controls.Add($buttonCreateRoomResource)
	$groupboxExchangeAdmin.Location = '626, 59'
	$groupboxExchangeAdmin.Name = 'groupboxExchangeAdmin'
	$groupboxExchangeAdmin.Size = '182, 443'
	$groupboxExchangeAdmin.TabIndex = 100
	$groupboxExchangeAdmin.TabStop = $False
	$groupboxExchangeAdmin.Text = 'Exchange Administration'
	$groupboxExchangeAdmin.UseCompatibleTextRendering = $True
	#
	# buttonConnectToExchange
	#
	$buttonConnectToExchange.Location = '18, 18'
	$buttonConnectToExchange.Name = 'buttonConnectToExchange'
	$buttonConnectToExchange.Size = '147, 39'
	$buttonConnectToExchange.TabIndex = 12
	$buttonConnectToExchange.Text = 'Connect to Exchange'
	$buttonConnectToExchange.UseCompatibleTextRendering = $True
	$buttonConnectToExchange.UseVisualStyleBackColor = $True
	$buttonConnectToExchange.add_Click($buttonConnectToExchange_Click)
	#
	# buttonMassCreateContacts
	#
	$buttonMassCreateContacts.Enabled = $False
	$buttonMassCreateContacts.Location = '18, 398'
	$buttonMassCreateContacts.Name = 'buttonMassCreateContacts'
	$buttonMassCreateContacts.Size = '147, 39'
	$buttonMassCreateContacts.TabIndex = 20
	$buttonMassCreateContacts.Text = 'Mass Create Contacts'
	$buttonMassCreateContacts.UseCompatibleTextRendering = $True
	$buttonMassCreateContacts.UseVisualStyleBackColor = $True
	$buttonMassCreateContacts.add_Click($buttonMassCreateContacts_Click)
	#
	# labelMassAdministration
	#
	$labelMassAdministration.Location = '6, 329'
	$labelMassAdministration.Name = 'labelMassAdministration'
	$labelMassAdministration.Size = '138, 14'
	$labelMassAdministration.TabIndex = 25
	$labelMassAdministration.Text = 'Mass administration'
	$labelMassAdministration.UseCompatibleTextRendering = $True
	#
	# buttonOwnersForDistributio
	#
	$buttonOwnersForDistributio.Enabled = $False
	$buttonOwnersForDistributio.Location = '18, 351'
	$buttonOwnersForDistributio.Name = 'buttonOwnersForDistributio'
	$buttonOwnersForDistributio.Size = '147, 39'
	$buttonOwnersForDistributio.TabIndex = 19
	$buttonOwnersForDistributio.Text = 'Owners for Distribution Lists'
	$buttonOwnersForDistributio.UseCompatibleTextRendering = $True
	$buttonOwnersForDistributio.UseVisualStyleBackColor = $True
	$buttonOwnersForDistributio.add_Click($buttonOwnersForDistributio_Click)
	#
	# buttonAddGroupautomapping
	#
	$buttonAddGroupautomapping.Enabled = $False
	$buttonAddGroupautomapping.Location = '18, 275'
	$buttonAddGroupautomapping.Name = 'buttonAddGroupautomapping'
	$buttonAddGroupautomapping.Size = '147, 37'
	$buttonAddGroupautomapping.TabIndex = 18
	$buttonAddGroupautomapping.Text = 'Add group/automapping'
	$buttonAddGroupautomapping.UseCompatibleTextRendering = $True
	$buttonAddGroupautomapping.UseVisualStyleBackColor = $True
	$buttonAddGroupautomapping.add_Click($buttonAddGroupautomapping_Click)
	#
	# buttonCreateMailforwarding
	#
	$buttonCreateMailforwarding.Enabled = $False
	$buttonCreateMailforwarding.Location = '18, 232'
	$buttonCreateMailforwarding.Name = 'buttonCreateMailforwarding'
	$buttonCreateMailforwarding.Size = '147, 37'
	$buttonCreateMailforwarding.TabIndex = 17
	$buttonCreateMailforwarding.Text = 'Create Mail-forwarding'
	$buttonCreateMailforwarding.UseCompatibleTextRendering = $True
	$buttonCreateMailforwarding.UseVisualStyleBackColor = $True
	$buttonCreateMailforwarding.add_Click($buttonCreateMailforwarding_Click)
	#
	# buttonCreateContacts
	#
	$buttonCreateContacts.Enabled = $False
	$buttonCreateContacts.Location = '18, 189'
	$buttonCreateContacts.Name = 'buttonCreateContacts'
	$buttonCreateContacts.Size = '147, 37'
	$buttonCreateContacts.TabIndex = 16
	$buttonCreateContacts.Text = 'Create Contacts'
	$buttonCreateContacts.UseCompatibleTextRendering = $True
	$buttonCreateContacts.UseVisualStyleBackColor = $True
	$buttonCreateContacts.add_Click($buttonCreateContacts_Click)
	#
	# buttonCreateDistributionli
	#
	$buttonCreateDistributionli.Anchor = 'None'
	$buttonCreateDistributionli.Enabled = $False
	$buttonCreateDistributionli.Location = '18, 104'
	$buttonCreateDistributionli.Name = 'buttonCreateDistributionli'
	$buttonCreateDistributionli.Size = '147, 37'
	$buttonCreateDistributionli.TabIndex = 14
	$buttonCreateDistributionli.Text = 'Create Distributionlist'
	$buttonCreateDistributionli.UseCompatibleTextRendering = $True
	$buttonCreateDistributionli.UseVisualStyleBackColor = $True
	$buttonCreateDistributionli.add_Click($buttonCreateDistributionli_Click)
	#
	# buttonCreateSharedMailbox
	#
	$buttonCreateSharedMailbox.Anchor = 'None'
	$buttonCreateSharedMailbox.Enabled = $False
	$buttonCreateSharedMailbox.Location = '18, 147'
	$buttonCreateSharedMailbox.Name = 'buttonCreateSharedMailbox'
	$buttonCreateSharedMailbox.Size = '147, 38'
	$buttonCreateSharedMailbox.TabIndex = 15
	$buttonCreateSharedMailbox.Text = 'Create Shared Mailbox'
	$buttonCreateSharedMailbox.UseCompatibleTextRendering = $True
	$buttonCreateSharedMailbox.UseVisualStyleBackColor = $True
	$buttonCreateSharedMailbox.add_Click($buttonCreateSharedMailbox_Click)
	#
	# buttonCreateRoomResource
	#
	$buttonCreateRoomResource.Anchor = 'None'
	$buttonCreateRoomResource.Enabled = $False
	$buttonCreateRoomResource.Location = '18, 62'
	$buttonCreateRoomResource.Name = 'buttonCreateRoomResource'
	$buttonCreateRoomResource.Size = '147, 37'
	$buttonCreateRoomResource.TabIndex = 13
	$buttonCreateRoomResource.Text = 'Create Room / Resource'
	$buttonCreateRoomResource.UseCompatibleTextRendering = $True
	$buttonCreateRoomResource.UseVisualStyleBackColor = $True
	$buttonCreateRoomResource.add_Click($buttonCreateRoomResource_Click)
	#
	# buttonUnlock
	#
	$buttonUnlock.Location = '286, 444'
	$buttonUnlock.Name = 'buttonUnlock'
	$buttonUnlock.Size = '75, 20'
	$buttonUnlock.TabIndex = 2
	$buttonUnlock.Text = 'Unlock'
	$buttonUnlock.UseCompatibleTextRendering = $True
	$buttonUnlock.UseVisualStyleBackColor = $True
	$buttonUnlock.Visible = $False
	$buttonUnlock.add_Click($buttonUnlock_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($buttonCreateSMSPasscodeAnd)
	$groupbox4.Controls.Add($buttonSAPEmptyConnectionLi)
	$groupbox4.Location = '411, 388'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '200, 114'
	$groupbox4.TabIndex = 12
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'Misc'
	$groupbox4.UseCompatibleTextRendering = $True
	#
	# buttonCreateSMSPasscodeAnd
	#
	$buttonCreateSMSPasscodeAnd.Font = 'Microsoft Sans Serif, 8pt'
	$buttonCreateSMSPasscodeAnd.Location = '21, 69'
	$buttonCreateSMSPasscodeAnd.Name = 'buttonCreateSMSPasscodeAnd'
	$buttonCreateSMSPasscodeAnd.Size = '160, 39'
	$buttonCreateSMSPasscodeAnd.TabIndex = 11
	$buttonCreateSMSPasscodeAnd.Text = 'Create SMS Passcode and VPN'
	$buttonCreateSMSPasscodeAnd.UseCompatibleTextRendering = $True
	$buttonCreateSMSPasscodeAnd.UseVisualStyleBackColor = $True
	$buttonCreateSMSPasscodeAnd.add_Click($buttonCreateSMSPasscodeAnd_Click)
	#
	# buttonSAPEmptyConnectionLi
	#
	$buttonSAPEmptyConnectionLi.Font = 'Microsoft Sans Serif, 8pt'
	$buttonSAPEmptyConnectionLi.Location = '21, 22'
	$buttonSAPEmptyConnectionLi.Name = 'buttonSAPEmptyConnectionLi'
	$buttonSAPEmptyConnectionLi.Size = '160, 39'
	$buttonSAPEmptyConnectionLi.TabIndex = 10
	$buttonSAPEmptyConnectionLi.Text = 'SAP Empty Connection List'
	$buttonSAPEmptyConnectionLi.UseCompatibleTextRendering = $True
	$buttonSAPEmptyConnectionLi.UseVisualStyleBackColor = $True
	$buttonSAPEmptyConnectionLi.add_Click($buttonSAPEmptyConnectionLi_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 508'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '820, 22'
	$statusbar1.TabIndex = 10
	$statusbar1.add_PanelClick($statusbar1_PanelClick)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($textboxAccountDisabled)
	$groupbox3.Controls.Add($textboxAccountLocked)
	$groupbox3.Controls.Add($textboxPasswordExpired)
	$groupbox3.Controls.Add($labelAccountDisabled)
	$groupbox3.Controls.Add($labelAccountLocked)
	$groupbox3.Controls.Add($labelPassExpirationDate)
	$groupbox3.Location = '12, 388'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '268, 114'
	$groupbox3.TabIndex = 9
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Account information'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# textboxAccountDisabled
	#
	$textboxAccountDisabled.Location = '134, 88'
	$textboxAccountDisabled.Name = 'textboxAccountDisabled'
	$textboxAccountDisabled.ReadOnly = $True
	$textboxAccountDisabled.Size = '128, 20'
	$textboxAccountDisabled.TabIndex = 32
	$textboxAccountDisabled.add_TextChanged($textboxAccountDisabled_TextChanged)
	#
	# textboxAccountLocked
	#
	$textboxAccountLocked.Location = '134, 56'
	$textboxAccountLocked.Name = 'textboxAccountLocked'
	$textboxAccountLocked.ReadOnly = $True
	$textboxAccountLocked.Size = '128, 20'
	$textboxAccountLocked.TabIndex = 31
	$textboxAccountLocked.add_TextChanged($textboxAccountLocked_TextChanged)
	#
	# textboxPasswordExpired
	#
	$textboxPasswordExpired.Location = '134, 25'
	$textboxPasswordExpired.Name = 'textboxPasswordExpired'
	$textboxPasswordExpired.ReadOnly = $True
	$textboxPasswordExpired.Size = '128, 20'
	$textboxPasswordExpired.TabIndex = 30
	#
	# labelAccountDisabled
	#
	$labelAccountDisabled.AutoSize = $True
	$labelAccountDisabled.Location = '15, 91'
	$labelAccountDisabled.Name = 'labelAccountDisabled'
	$labelAccountDisabled.Size = '95, 17'
	$labelAccountDisabled.TabIndex = 0
	$labelAccountDisabled.Text = 'Account Disabled:'
	$labelAccountDisabled.UseCompatibleTextRendering = $True
	#
	# labelAccountLocked
	#
	$labelAccountLocked.AutoSize = $True
	$labelAccountLocked.Location = '15, 59'
	$labelAccountLocked.Name = 'labelAccountLocked'
	$labelAccountLocked.Size = '88, 17'
	$labelAccountLocked.TabIndex = 0
	$labelAccountLocked.Text = 'Account Locked:'
	$labelAccountLocked.UseCompatibleTextRendering = $True
	#
	# labelPassExpirationDate
	#
	$labelPassExpirationDate.AutoSize = $True
	$labelPassExpirationDate.Location = '15, 28'
	$labelPassExpirationDate.Name = 'labelPassExpirationDate'
	$labelPassExpirationDate.Size = '113, 17'
	$labelPassExpirationDate.TabIndex = 0
	$labelPassExpirationDate.Text = 'Pass. expiration date:'
	$labelPassExpirationDate.UseCompatibleTextRendering = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonRemote)
	$groupbox2.Controls.Add($listboxMappedDrives)
	$groupbox2.Controls.Add($labelMappedDrives)
	$groupbox2.Controls.Add($textboxPCNumber)
	$groupbox2.Controls.Add($textboxZDrive)
	$groupbox2.Controls.Add($textboxHDrive)
	$groupbox2.Controls.Add($textboxManager)
	$groupbox2.Controls.Add($textboxPhone)
	$groupbox2.Controls.Add($textboxLocation)
	$groupbox2.Controls.Add($textboxEmail)
	$groupbox2.Controls.Add($textboxFullName)
	$groupbox2.Controls.Add($labelPcNumber)
	$groupbox2.Controls.Add($labelZdrivePath)
	$groupbox2.Controls.Add($labelHDrivePath)
	$groupbox2.Controls.Add($labelManager)
	$groupbox2.Controls.Add($labelPhoneNumber)
	$groupbox2.Controls.Add($labelLocation)
	$groupbox2.Controls.Add($labelEmail)
	$groupbox2.Controls.Add($labelFullName)
	$groupbox2.Location = '13, 59'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '381, 323'
	$groupbox2.TabIndex = 100
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'User Information'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# buttonRemote
	#
	$buttonRemote.Location = '304, 201'
	$buttonRemote.Name = 'buttonRemote'
	$buttonRemote.Size = '70, 18'
	$buttonRemote.TabIndex = 100
	$buttonRemote.Text = 'Remote'
	$buttonRemote.UseCompatibleTextRendering = $True
	$buttonRemote.UseVisualStyleBackColor = $True
	$buttonRemote.Visible = $False
	$buttonRemote.add_Click($buttonRemote_Click)
	#
	# listboxMappedDrives
	#
	$listboxMappedDrives.FormattingEnabled = $True
	$listboxMappedDrives.Location = '109, 232'
	$listboxMappedDrives.Name = 'listboxMappedDrives'
	$listboxMappedDrives.Size = '266, 82'
	$listboxMappedDrives.TabIndex = 29
	#
	# labelMappedDrives
	#
	$labelMappedDrives.AutoSize = $True
	$labelMappedDrives.Location = '23, 232'
	$labelMappedDrives.Name = 'labelMappedDrives'
	$labelMappedDrives.Size = '82, 17'
	$labelMappedDrives.TabIndex = 3
	$labelMappedDrives.Text = 'Mapped drives:'
	$labelMappedDrives.UseCompatibleTextRendering = $True
	#
	# textboxPCNumber
	#
	$textboxPCNumber.Location = '109, 200'
	$textboxPCNumber.Name = 'textboxPCNumber'
	$textboxPCNumber.ReadOnly = $True
	$textboxPCNumber.Size = '266, 20'
	$textboxPCNumber.TabIndex = 28
	$textboxPCNumber.add_TextChanged($textboxPCNumber_TextChanged)
	#
	# textboxZDrive
	#
	$textboxZDrive.Location = '109, 173'
	$textboxZDrive.Name = 'textboxZDrive'
	$textboxZDrive.ReadOnly = $True
	$textboxZDrive.Size = '266, 20'
	$textboxZDrive.TabIndex = 27
	#
	# textboxHDrive
	#
	$textboxHDrive.Location = '109, 147'
	$textboxHDrive.Name = 'textboxHDrive'
	$textboxHDrive.ReadOnly = $True
	$textboxHDrive.Size = '266, 20'
	$textboxHDrive.TabIndex = 26
	#
	# textboxManager
	#
	$textboxManager.Location = '109, 121'
	$textboxManager.Name = 'textboxManager'
	$textboxManager.ReadOnly = $True
	$textboxManager.Size = '266, 20'
	$textboxManager.TabIndex = 25
	#
	# textboxPhone
	#
	$textboxPhone.Location = '109, 95'
	$textboxPhone.Name = 'textboxPhone'
	$textboxPhone.ReadOnly = $True
	$textboxPhone.Size = '266, 20'
	$textboxPhone.TabIndex = 24
	#
	# textboxLocation
	#
	$textboxLocation.Location = '109, 69'
	$textboxLocation.Name = 'textboxLocation'
	$textboxLocation.ReadOnly = $True
	$textboxLocation.Size = '266, 20'
	$textboxLocation.TabIndex = 23
	#
	# textboxEmail
	#
	$textboxEmail.Location = '109, 43'
	$textboxEmail.Name = 'textboxEmail'
	$textboxEmail.ReadOnly = $True
	$textboxEmail.Size = '266, 20'
	$textboxEmail.TabIndex = 22
	#
	# textboxFullName
	#
	$textboxFullName.Location = '109, 17'
	$textboxFullName.Name = 'textboxFullName'
	$textboxFullName.ReadOnly = $True
	$textboxFullName.Size = '266, 20'
	$textboxFullName.TabIndex = 21
	#
	# labelPcNumber
	#
	$labelPcNumber.AutoSize = $True
	$labelPcNumber.Location = '23, 203'
	$labelPcNumber.Name = 'labelPcNumber'
	$labelPcNumber.Size = '66, 17'
	$labelPcNumber.TabIndex = 0
	$labelPcNumber.Text = 'PC Number:'
	$labelPcNumber.UseCompatibleTextRendering = $True
	$labelPcNumber.add_Click($labelZdrivePath_Click)
	#
	# labelZdrivePath
	#
	$labelZdrivePath.AutoSize = $True
	$labelZdrivePath.Location = '23, 174'
	$labelZdrivePath.Name = 'labelZdrivePath'
	$labelZdrivePath.Size = '67, 17'
	$labelZdrivePath.TabIndex = 0
	$labelZdrivePath.Text = 'Z: drive path'
	$labelZdrivePath.UseCompatibleTextRendering = $True
	$labelZdrivePath.add_Click($labelZdrivePath_Click)
	#
	# labelHDrivePath
	#
	$labelHDrivePath.AutoSize = $True
	$labelHDrivePath.Location = '23, 148'
	$labelHDrivePath.Name = 'labelHDrivePath'
	$labelHDrivePath.Size = '71, 17'
	$labelHDrivePath.TabIndex = 0
	$labelHDrivePath.Text = 'H. drive path:'
	$labelHDrivePath.UseCompatibleTextRendering = $True
	#
	# labelManager
	#
	$labelManager.AutoSize = $True
	$labelManager.Location = '23, 121'
	$labelManager.Name = 'labelManager'
	$labelManager.Size = '52, 17'
	$labelManager.TabIndex = 0
	$labelManager.Text = 'Manager:'
	$labelManager.UseCompatibleTextRendering = $True
	#
	# labelPhoneNumber
	#
	$labelPhoneNumber.AutoSize = $True
	$labelPhoneNumber.Location = '23, 95'
	$labelPhoneNumber.Name = 'labelPhoneNumber'
	$labelPhoneNumber.Size = '81, 17'
	$labelPhoneNumber.TabIndex = 0
	$labelPhoneNumber.Text = 'Phone number:'
	$labelPhoneNumber.UseCompatibleTextRendering = $True
	$labelPhoneNumber.add_Click($labelPhoneNumber_Click)
	#
	# labelLocation
	#
	$labelLocation.AutoSize = $True
	$labelLocation.Location = '23, 72'
	$labelLocation.Name = 'labelLocation'
	$labelLocation.Size = '50, 17'
	$labelLocation.TabIndex = 0
	$labelLocation.Text = 'Location:'
	$labelLocation.UseCompatibleTextRendering = $True
	#
	# labelEmail
	#
	$labelEmail.AutoSize = $True
	$labelEmail.Location = '23, 46'
	$labelEmail.Name = 'labelEmail'
	$labelEmail.Size = '40, 17'
	$labelEmail.TabIndex = 0
	$labelEmail.Text = 'E-mail:'
	$labelEmail.UseCompatibleTextRendering = $True
	#
	# labelFullName
	#
	$labelFullName.AutoSize = $True
	$labelFullName.Location = '23, 20'
	$labelFullName.Name = 'labelFullName'
	$labelFullName.Size = '59, 17'
	$labelFullName.TabIndex = 0
	$labelFullName.Text = 'Full Name:'
	$labelFullName.UseCompatibleTextRendering = $True
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonGroupsManagedByUser)
	$groupbox1.Controls.Add($buttonCompareUserGroups)
	$groupbox1.Controls.Add($buttonManageMemberOf)
	$groupbox1.Controls.Add($buttonSearchActiveDirector)
	$groupbox1.Controls.Add($buttonResetSAPPassword)
	$groupbox1.Controls.Add($buttonManageUserAttributes)
	$groupbox1.Controls.Add($buttonResetADPassword)
	$groupbox1.Location = '411, 59'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '200, 323'
	$groupbox1.TabIndex = 100
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'User Administration'
	$groupbox1.UseCompatibleTextRendering = $True
	$groupbox1.add_Enter($groupbox1_Enter)
	#
	# buttonGroupsManagedByUser
	#
	$buttonGroupsManagedByUser.Location = '21, 275'
	$buttonGroupsManagedByUser.Name = 'buttonGroupsManagedByUser'
	$buttonGroupsManagedByUser.Size = '160, 37'
	$buttonGroupsManagedByUser.TabIndex = 9
	$buttonGroupsManagedByUser.Text = 'Groups Managed by User'
	$buttonGroupsManagedByUser.UseCompatibleTextRendering = $True
	$buttonGroupsManagedByUser.UseVisualStyleBackColor = $True
	$buttonGroupsManagedByUser.add_Click($buttonGroupsManagedByUser_Click)
	#
	# buttonCompareUserGroups
	#
	$buttonCompareUserGroups.Location = '21, 232'
	$buttonCompareUserGroups.Name = 'buttonCompareUserGroups'
	$buttonCompareUserGroups.Size = '160, 37'
	$buttonCompareUserGroups.TabIndex = 8
	$buttonCompareUserGroups.Text = 'Compare User Groups'
	$buttonCompareUserGroups.UseCompatibleTextRendering = $True
	$buttonCompareUserGroups.UseVisualStyleBackColor = $True
	$buttonCompareUserGroups.add_Click($buttonCompareUserGroups_Click)
	#
	# buttonManageMemberOf
	#
	$buttonManageMemberOf.Location = '21, 147'
	$buttonManageMemberOf.Name = 'buttonManageMemberOf'
	$buttonManageMemberOf.Size = '160, 37'
	$buttonManageMemberOf.TabIndex = 5
	$buttonManageMemberOf.Text = 'Manage Member Of'
	$buttonManageMemberOf.UseCompatibleTextRendering = $True
	$buttonManageMemberOf.UseVisualStyleBackColor = $True
	$buttonManageMemberOf.add_Click($buttonManageMemberOf_Click)
	#
	# buttonSearchActiveDirector
	#
	$buttonSearchActiveDirector.Location = '21, 104'
	$buttonSearchActiveDirector.Name = 'buttonSearchActiveDirector'
	$buttonSearchActiveDirector.Size = '160, 38'
	$buttonSearchActiveDirector.TabIndex = 6
	$buttonSearchActiveDirector.Text = 'Search Active Directory'
	$buttonSearchActiveDirector.UseCompatibleTextRendering = $True
	$buttonSearchActiveDirector.UseVisualStyleBackColor = $True
	$buttonSearchActiveDirector.add_Click($buttonSearchActiveDirector_Click)
	#
	# buttonResetSAPPassword
	#
	$buttonResetSAPPassword.Location = '21, 62'
	$buttonResetSAPPassword.Name = 'buttonResetSAPPassword'
	$buttonResetSAPPassword.Size = '160, 37'
	$buttonResetSAPPassword.TabIndex = 4
	$buttonResetSAPPassword.Text = 'Reset SAP Password'
	$buttonResetSAPPassword.UseCompatibleTextRendering = $True
	$buttonResetSAPPassword.UseVisualStyleBackColor = $True
	$buttonResetSAPPassword.add_Click($buttonResetSAPPassword_Click)
	#
	# buttonManageUserAttributes
	#
	$buttonManageUserAttributes.Location = '21, 189'
	$buttonManageUserAttributes.Name = 'buttonManageUserAttributes'
	$buttonManageUserAttributes.Size = '160, 37'
	$buttonManageUserAttributes.TabIndex = 7
	$buttonManageUserAttributes.Text = 'Manage User Attributes'
	$buttonManageUserAttributes.UseCompatibleTextRendering = $True
	$buttonManageUserAttributes.UseVisualStyleBackColor = $True
	$buttonManageUserAttributes.add_Click($buttonManageUserAttributes_Click)
	#
	# buttonResetADPassword
	#
	$buttonResetADPassword.Location = '21, 20'
	$buttonResetADPassword.Name = 'buttonResetADPassword'
	$buttonResetADPassword.Size = '160, 37'
	$buttonResetADPassword.TabIndex = 3
	$buttonResetADPassword.Text = 'Reset AD Password'
	$buttonResetADPassword.UseCompatibleTextRendering = $True
	$buttonResetADPassword.UseVisualStyleBackColor = $True
	$buttonResetADPassword.add_Click($buttonResetADPassword_Click)
	#
	# buttonSearch
	#
	$buttonSearch.Location = '230, 16'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '77, 22'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '13, 17'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '75, 21'
	$combobox1.TabIndex = 101
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupboxExchangeAdmin.ResumeLayout()
	$formArlaAdministrationTo.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formArlaAdministrationTo.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formArlaAdministrationTo.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formArlaAdministrationTo.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formArlaAdministrationTo.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formArlaAdministrationTo.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	Add-Type -AssemblyName PresentationFramework
	[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
	
	Import-Module ActiveDirectory
	$domain = ""
	
	$ADS_PROPERTY_CLEAR = 1
	$ADS_PROPERTY_UPDATE = 2
	$ADS_PROPERTY_APPEND = 3
	$ADS_PROPERTY_DELETE = 4
	
	
	#--------------------------------------------
	# Security check function to ensure execution with Service Desk Admin- user and privileges
	#--------------------------------------------
	
	function SecurityCheck # ArlaSD-ServiceDeskAdmins
	{
		param (
			[string]$Identity
		)
		
		<#$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
		if ($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -ne 'True')
		{
			[System.Windows.MessageBox]::Show('Program can only be used with admin user! first', 'Unauthorized use', 'OK', 'Error')
			exit
		}#>
		try
		{
			$GroupMembership = Get-ADPrincipalGroupMembership -Server "" -Identity $Identity | Select-Object -ExpandProperty samaccountname
			if (!($GroupMembership -contains "ArlaSD-ServiceDeskAdmins"))
				{
					[System.Windows.MessageBox]::Show('You are not a Service Desk employee!', "Unauthorized use!", "OK", "Error")
					exit
				}
			<#$users = get-aduser -Server "" -Filter "(Department -like 'Service Desk Support Team') -and (samaccountname -notlike 'adm_*')"`
								-Properties samaccountname, department | Select-Object -ExpandProperty samaccountname
			
			if (!($users -contains $Identity.Split('_')[1]))
			{
				[System.Windows.MessageBox]::Show('You are not a Service Desk employee!', "Unauthorized use!", "OK", "Error")
				exit
			}#>
			
		}
		catch
		{
			[System.Windows.MessageBox]::Show('System could not confirm your legitimacy`nThe program will exit', "Unauthorized use!", "OK", "Error")
			exit
		}
	}
	
	
	#--------------------------------------------
	# User- and Account information for 'MainForm.psf'
	#--------------------------------------------
	
	function Get-ADInfo
	{
		param (
			[string]$userEntry,
			[switch]$GetZdrive # Switch parameter to only return Z-drive for 'SAP Empty Connection List.psf'
		)
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(samAccountName=$userEntry)"
		$Searcher.SearchRoot = 'LDAP://dc=,dc=,dc='
		$item = $Searcher.FindOne()
		
		if ($item.Count -eq 0)
		{
			$statusbar1.Text = "Could not find user!"
			return
		}
		
		elseif ($GetZdrive)
		{
			$userAD = [ADSI]([String]$item.Properties.adspath)
			return $userAD.psbase.invokeGet("TerminalServicesHomeDirectory")
		}
		else
		{
			$userAD = [ADSI]([String]$item.Properties.adspath)
			$statusbar1.Text = "User Found!"
			$textboxFullName.Text = $userAD.psbase.invokeGet("DisplayName")
			$textboxEmail.Text = $userAD.psbase.invokeGet("EmailAddress")
			$textboxLocation.Text = $userAD.psbase.invokeGet("StreetAddress")
			$textboxPhone.Text = $userAD.psbase.invokeGet("otherMobile")
			$textboxManager.Text = ($userAD.psbase.invokeGet("manager") -split 'CN=')[1].split(',')[0]
			$textboxHdrive.Text = $userAD.psbase.invokeGet("HomeDirectory")
			$textboxZDrive.Text = $userAD.psbase.invokeGet("TerminalServicesHomeDirectory")
			$textboxAccountLocked.Text = $userAD.psbase.invokeGet("isAccountLocked")
			$textboxPasswordExpired.text = $userAD.psbase.invokeget("passwordexpirationdate").ToShortDateString()
			$textboxAccountDisabled.Text = $userAD.psbase.invokeget("AccountDisabled")
			
			Get-LogData
		}
	}
	
	
	function Get-LogData # Reads Citrix log data to get Computername and mapped drives
	{
		try
		{
			$listboxMappedDrives.Items.Clear()
			$logpath = "$($textboxZDrive.Text)\upm4\LoginV2-1.log"
			$computername = Select-String -path $logpath -pattern "Client Name" -CaseSensitive
			$textboxPCNumber.Text = "$($computername.Line.trimStart("Client Name     ="))"
			
			$logpath2 = "$($textboxZDrive.Text)\upm4\LoginV2-2.log"
			$mappedDrives = Select-String -path $logpath2 -pattern "->" -CaseSensitive
			foreach ($entry in $mappedDrives)
			{
				if ($entry -cmatch "Subst y")
				{
					# Do nothing
				}
				elseif ($entry -cmatch "Starting distibution")
				{
					# Do nothing
				}
				elseif ($entry -cmatch "Already exists.")
				{
					# Do nothing
				}
				else
				{
					# Add mapped drives to listbox
					$formattedEntry = $($entry.Line.trimStart(""))
					$pos = $formattedEntry.IndexOf("	")
					$leftPart = $formattedEntry.Substring(0, $pos)
					$rightPart = $formattedEntry.Substring($pos + 1)
					$listboxMappedDrives.Items.Add("$($rightPart.trimEnd("Result =True"))")
				}
			}
		}
		catch
		{
			# Do nothing, no Citrix log found
		}
	}
	
	#--------------------------------------------
	# Functions for 'List_Groups_For_User.psf' and 'List_Group_Membership'
	#--------------------------------------------
	
	function Get-UserGroups
	{
		param(
			[string]$identity,
			[switch]$Reverse # Get-ADGroupMembers // Users in group instead of groups for user
		)
		
		if ((Get-ADObject -Server "" -Filter { samaccountname -eq $identity }).objectClass -eq 'User')
		{
			$get_groups = Get-ADPrincipalGroupMembership -Server "" -Identity $identity | Select-Object -ExpandProperty name | Sort-Object
			return $get_groups
		}
		else
		{
			$get_users = Get-ADGroupMember -Server "" -Identity $identity | Select-Object -ExpandProperty samaccountname | Sort-Object
			return $get_users
		}
		
	}
	
	
	function Remove-GroupFromUser
	{
		param(
			[string]$Members,
			[string]$Identity
		)
		
		$confirm = [System.Windows.MessageBox]::Show("Remove $Members from $Identity`?", "Are you sure?", "YesNo", "question")
		if ($confirm -eq 'Yes')
		{
			try
			{
				Remove-ADGroupMember -Server "" -Identity $Identity -Members $Members -Confirm:$false
				[System.Windows.MessageBox]::Show("The user was successfully removed from the group", "Success!", "OK", "Information")
				
				$comboboxGroups.Items.Remove($Identity)
				$comboboxGroups.Text = ''
			}
			catch
			{
				[System.Windows.MessageBox]::Show("Could not remove the user!", "Error", "OK", "Error")
			}
		}
		
	}
	
	
	#--------------------------------------------
	# Functions for 'ResetADPassword.psf' and 'GenerateSAPPassword.psf'
	#--------------------------------------------
	function Generate-Password # Random password generator
	{
		[CmdletBinding()]
		Param (
			[switch]$NotSecure,
			[int]$length = 8
		)
		
		Begin
		{
		}
		
		Process
		{
			$global:password = (-join ((0x30 .. 0x39) + (0x41 .. 0x5A) + (0x61 .. 0x7A) | Get-Random -Count ($length-3) |
								% { [char]$_ })) + (Get-Random -Minimum 0 -Maximum 9) + ((0x61 .. 0x7A) | Get-Random -count 1 |
								% { [char]$_ }) + ((0x41 .. 0x5A) | Get-Random -Count 1 | % { [char]$_ })
			if ($NotSecure)
			{
				return $password
			}
			else
			{
				$SecurePassword = ConvertTo-SecureString $password -asplaintext -force
				return $SecurePassword
			}
		}
	}
	
	
	function ResetAndSendPassword
	{
		param (
			[string]$GeneratedPassword,
			[switch]$SAP
		)
		
		if ($SAP) # Generate and sends SAP-password
		{
			# Send password via sms
			$phoneAddress = $textbox_showNumber.Text + "@esms.nu"
			$SMTPserver = "smtp.arla.net"
			try
			{
				Send-MailMessage -To $phoneAddress -Subject "New password: $GeneratedPassword" -SmtpServer $SMTPserver -Priority High -Body "If you did not request a password reset, please call IT Service Desk immediately.`nIt might be a security breach. `n`nNumber: +45 8938 1850" -From "itsd@arlafoods.com"
				[System.Windows.MessageBox]::Show('SMS with password was sent to the user', 'Success!', "OK", "Information")
			}
			catch
			{
				[System.Windows.MessageBox]::Show('Password could not be sent', 'Unknown error!', 'OK', 'Error')
			}
		}
		
		else # Generate, resets and sends Active Directory password
		{
			
			if ($textbox_UsernameField.Text.StartsWith('adm_', "CurrentCultureIgnoreCase"))
			{
				$SecurePassword = Generate-Password -length 16
				$EmailBody = "OBS! This password is generated for your Administrator account`n`n"
			}
			else
			{
				$SecurePassword = Generate-Password
			}
			$EmailBody += "If you did not request a password reset, please call IT Service Desk immediately.`nIt might be a security breach. `n`nNumber: +45 8938 1850"
			
			try
			{
				Set-ADAccountPassword -Server $domain -Identity $textbox_UsernameField.Text -NewPassword $SecurePassword -Reset -PassThru | Unlock-ADAccount
				Set-ADuser -Server "" -Identity $textbox_UsernameField.Text -ChangePasswordAtLogon $True
				# Send password via sms
				$phoneAddress = $textbox_showNumber.Text + "@esms.nu"
				$SMTPserver = "smtp.arla.net"
				
				try
				{
					Send-MailMessage -To $phoneAddress -Subject "New password: $password" -SmtpServer $SMTPserver -Body $EmailBody -From "itsd@arlafoods.com" -Priority High
					[System.Windows.MessageBox]::Show('SMS with password was sent to the user', 'Success!', "OK", "Information")
				}
				catch
				{
					[System.Windows.MessageBox]::Show('Password was set but could not be sent', 'Unknown error!', 'OK', 'Error')
				}
			}
			catch
			{
				[System.Windows.MessageBox]::Show('Could not set password', 'Unknown error!', 'OK', 'Error')
			}
		}	
	}
	
	
	function Get-PhoneNumber # Lookup phone number from AD
	{
		param (
			[string]$userID
		)
		
		try
		{
			if ($userID.StartsWith('adm_', "CurrentCultureIgnoreCase"))
			{
				$userID = $userID -ireplace [regex]::Escape("ADM_"), ""
			}
			$global:userProperties = Get-ADuser -server $domain -identity $userID -properties othermobile, mobile
			if ($userProperties.otherMobile)
			{
				$number_unTrimmed = $userProperties.otherMobile[0]
				$textbox_showNumber.Text = $number_unTrimmed.Replace(' ', '')
			}
			elseif ($userProperties.mobile)
			{
				$number_unTrimmed = $userProperties.mobile
				$textbox_showNumber.Text = $number_unTrimmed.Replace(' ', '')
			}
			else
			{
				[System.Windows.MessageBox]::Show('No phone number found for user', 'Empty number in AD', 'OK', 'Error')
			}
		}
		catch
		{
			[System.Windows.MessageBox]::Show('User does not exist', 'No user found', 'OK', 'Error')
		}
	}
	
	
	# Function to save output in .txt file
	function Export-ToFile
	{
		param (
			[string]$Content
		)
	
		$ExportConfirmation = $folderbrowserdialog1.ShowDialog()
		if ($ExportConfirmation -ne 'Cancel')
		{
			$textbox1.Text = $folderbrowserdialog1.SelectedPath + '\'
			$NameOfFile = [Microsoft.VisualBasic.Interaction]::InputBox("Please enter a filename", "Filename") + '.csv'
			if ($NameOfFile.Trim() -ne '.csv')
			{
				$FilePath = $textbox1.Text + $NameOfFile
				try
				{
					$Content | Export-Csv -Path $FilePath
					[System.Windows.MessageBox]::Show("Groups was saved to:`n$Filepath", "Success!", "OK", "Information")
				}
				catch
				{
					[System.Windows.MessageBox]::Show('Could not export groups', 'Unknown Error', 'OK', 'Error')
				}
			}
		}
	}
	
	
	#############################################
	#-------------------------------------------#
	#   Functions for Exchange Administration   #
	#-------------------------------------------#
	#############################################
	
	function Fix-InvalidCharsLDAP
	{
		Param (
			[string]$InputString
		)
		$Input = $InputString
		$Input = $Input.Replace('/', '\/')
		
		return $Input
	}
	
	function Validate-IsEmail
	{
		<#
			.SYNOPSIS
				Validates if input is an Email
		
			.DESCRIPTION
				Validates if input is an Email
		
			.PARAMETER  Email
				A string containing an email address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param ([string]$Email)
		
		return $Email -match "^(?("")("".+?""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$"
	}
	
	function RemoveInvalidChars
	{
		Param (
			[string]$InputString
		)
		
		$Input = $InputString.ToLower()
		$Input = $Input.Replace('ä', 'a')
		$Input = $Input.Replace('å', 'a')
		$Input = $Input.Replace('ö', 'o')
		$Input = $Input.Replace('æ', 'ae')
		$Input = $Input.Replace('ø', 'o')
		$Input = $Input.Replace('ü', 'u')
		
		$Input = [regex]::Replace($input, "[^a-zA-Z0-9_]", "")
		$Input = $Input.Replace(" ", "")
		
		return $Input
	}
	
	
	#Global function for logging
	function Add-Log
	{
		param (
			[string]$body
		)
		$Date = (Get-Date -Format "d/M/yyyy HH:mm:ss")
		Add-Content -Path $logpath "$date;$($env:username);$body"
	}
	
	#Global function for getting the FullDN, this is needed for adding users to some of the Exchange parameters
	function Get-FullDN
	{
		param (
			[string]$username
		)
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(sAMAccountName=$username)"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		
		foreach ($result in $results)
		{
			$userObject = $Result.Properties.Item("distinguishedName")
			
		}
		return $userObject
	}
	
	function Get-FullDNDistributionGroups
	{
		param (
			[string]$username
		)
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(&(objectClass=group)(sAMAccountName=$username))"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		
		foreach ($result in $results)
		{
			$userObject = $Result.Properties.Item("distinguishedName")
			
		}
		return $userObject
	}
	
	function Get-FullDNContacts
	{
		param (
			[string]$Email
		)
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(&(objectClass=contact)(mail=$Email))"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		
		foreach ($result in $results)
		{
			$userObject = $Result.Properties.Item("distinguishedName")
			
		}
		return $userObject
	}
	
	#Global function for verifying that group is existing in Notes
	function CheckDomino
	{
		param (
			[string]$email
		)
		
		$DominoRoot = New-Object System.DirectoryServices.DirectoryEntry($DominoDomain, $DominoUsername, $DominoPassword, "None")
		$DominoQuery = New-Object System.DirectoryServices.DirectorySearcher
		$DominoQuery.searchroot = $DominoRoot
		$DominoQuery.Filter = "(mail=$email)"
		$DominoQuery.SearchScope = "Subtree"
		$DominoResult = $DominoQuery.FindOne()
		
		if ($DominoResult -eq $null)
		{
			return $false
		}
		else
		{
			return $true
		}
	}
	
	function Check-AD
	{
		param (
			[string]$Alias
		)
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(sAMAccountName=$Alias)"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		if ($results.Count -eq "0")
		{
			return $false
		}
		foreach ($result in $results)
		{
			return $true
		}
		
	}
	
	function Check-ContactAD
	{
		param (
			[string]$Email
		)
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(&(mail=$Email)(objectClass=contact))"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		if ($results.Count -eq "0")
		{
			return $false
		}
		foreach ($result in $results)
		{
			return $true
		}
		
	}
	
	function Check-ProxyAddresses
	{
		param (
			[string]$FirstPartEmail
		)
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(|(ProxyAddresses=smtp:$FirstPartEmail@)(ProxyAddresses=smtp:$FirstPartEmail@)(ProxyAddresses=smtp:$FirstPartEmail@))"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		if ($results.Count -eq "0")
		{
			return $false
		}
		foreach ($result in $results)
		{
			return $true
		}
	}
	
	Function Get-FileName
	{
		$OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
		$OpenFileDialog.filter = "Text files | *.txt"
		$OpenFileDialog.ShowDialog() | Out-Null
		$OpenFileDialog.filename
	}
	
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	
	#Constant variables
	[string]$ScriptDirectory = Get-ScriptDirectory
	[string]$DomainController = ""
	[string]$logpath = ""
	
	#Default OU's
	$DistributionList_defaultOu = ''
	$Contacts_defaultOu = ''
	$SharedMailbox_defaultOu = ''
	$RoomsAndResources_defaultOu = ''
	
	#LDAP Information for Domino
	$DominoLdap_serv = ""
	$DominoDomain = ""
	#This is a test user which has no specical permissions in Domino, it is only used for reading.
	$DominoUsername = ""
	
	# Confirm legitimacy of execution
	#SecurityCheck -Identity $env:USERNAME
#endregion Source: Globals.ps1

#region Source: List Groups for User.psf
function Show-List_Groups_for_User_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formGetMemberOf = New-Object 'System.Windows.Forms.Form'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonExportList = New-Object 'System.Windows.Forms.Button'
	$comboboxGroups = New-Object 'System.Windows.Forms.ComboBox'
	$buttonRemove = New-Object 'System.Windows.Forms.Button'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$labelName = New-Object 'System.Windows.Forms.Label'
	$buttonCheck = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formGetMemberOf_Load={
		#TODO: Initialize Form Controls here
		$formGetMemberOf.MaximizeBox = $false
		$buttonCheck.Enabled = $false
		$buttonRemove.Enabled = $false
		$buttonExportList.Enabled = $false
		$comboboxGroups.DropDownStyle = 'DropDownList'
		$comboboxGroups.Enabled = $false
	}
	
	
	$buttonRemove_Click = {
		#TODO: Place custom script here
		Remove-GroupFromUser -Identity $comboboxGroups.SelectedItem -Members $textboxUsername.Text 
		$buttonRemove.Enabled = $false
	}
	
	$buttonCheck_Click = {
		$textboxUsername.Text = $textboxUsername.Text.Trim()
		$comboboxGroups.Items.Clear()
		try
		{
			$global:groups = Get-UserGroups -Identity $textboxUsername.Text
			if ($groups.count -gt 0)
			{
				ForEach ($group in $groups)
				{
					$comboboxGroups.Items.Add($group)
				}
				$comboboxGroups.Enabled = $true
				$buttonExportList.Enabled = $true
			}
			else
			{
				[System.Windows.MessageBox]::Show("Could not find any groups", "Unknown Error", "OK", "None")
			}
		}
		catch
		{
			[System.Windows.MessageBox]::Show("User does not exist", "User not found", "OK", "None")
		}
		
		$buttonCheck.Enabled = $false
		$buttonRemove.Enabled = $false
		
		
		
	}
	
	
	$textboxUsername_TextChanged = {
		$buttonCheck.Enabled = $false
		$buttonRemove.Enabled = $false
		$buttonExportList.Enabled = $false
		$comboboxGroups.Text = ''
		$comboboxGroups.Items.Clear()
		$comboboxGroups.Enabled = $false
		if ($textboxUsername.Text.Trim() -ne '')
		{
			$buttonCheck.Enabled = $true
		}
		
		
		
	}
	
	#region Control Helper Function
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	#endregion
	
	
	$comboboxGroups_SelectedIndexChanged = {
		$buttonRemove.Enabled = $false
		if ($comboboxGroups.Text.Trim() -ne '')
		{
			$buttonRemove.Enabled = $true
		}	
	}
	
	#region Job Tracker
	
	
	$buttonExportList_Click = {
		$ExportConfirmation = $folderbrowserdialog1.ShowDialog()
		if ($ExportConfirmation -ne 'Cancel')
		{
			$textbox1.Text = $folderbrowserdialog1.SelectedPath + '\'
			$NameOfFile = [Microsoft.VisualBasic.Interaction]::InputBox("Please enter a filename", "Filename") + '.txt'
			if ($NameOfFile.Trim() -ne '.txt')
			{
				$FilePath = $textbox1.Text + $NameOfFile
				try
				{
					$groups | Out-File -FilePath $FilePath
					[System.Windows.MessageBox]::Show("Groups was saved to:`n$Filepath", "Success!", "OK", "Information")
				}
				catch
				{
					[System.Windows.MessageBox]::Show('Could not export groups', 'Unknown Error', 'OK', 'Error')
				}
			}
		}
	}
	
	$textbox1_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$labelName_Click={
		#TODO: Place custom script here
		
	}
	
	
	$jobTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formGetMemberOf.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:List_Groups_for_User_textbox1 = $textbox1.Text
		$script:List_Groups_for_User_comboboxGroups = $comboboxGroups.Text
		$script:List_Groups_for_User_comboboxGroups_SelectedItem = $comboboxGroups.SelectedItem
		$script:List_Groups_for_User_textboxUsername = $textboxUsername.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textbox1.remove_TextChanged($textbox1_TextChanged)
			$buttonExportList.remove_Click($buttonExportList_Click)
			$comboboxGroups.remove_SelectedIndexChanged($comboboxGroups_SelectedIndexChanged)
			$buttonRemove.remove_Click($buttonRemove_Click)
			$textboxUsername.remove_TextChanged($textboxUsername_TextChanged)
			$labelName.remove_Click($labelName_Click)
			$buttonCheck.remove_Click($buttonCheck_Click)
			$formGetMemberOf.remove_FormClosed($jobTracker_FormClosed)
			$formGetMemberOf.remove_Load($formGetMemberOf_Load)
			$formGetMemberOf.remove_Load($Form_StateCorrection_Load)
			$formGetMemberOf.remove_Closing($Form_StoreValues_Closing)
			$formGetMemberOf.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formGetMemberOf.SuspendLayout()
	#
	# formGetMemberOf
	#
	$formGetMemberOf.Controls.Add($textbox1)
	$formGetMemberOf.Controls.Add($buttonExportList)
	$formGetMemberOf.Controls.Add($comboboxGroups)
	$formGetMemberOf.Controls.Add($buttonRemove)
	$formGetMemberOf.Controls.Add($textboxUsername)
	$formGetMemberOf.Controls.Add($labelName)
	$formGetMemberOf.Controls.Add($buttonCheck)
	$formGetMemberOf.AutoScaleDimensions = '6, 13'
	$formGetMemberOf.AutoScaleMode = 'Font'
	$formGetMemberOf.ClientSize = '283, 287'
	$formGetMemberOf.FormBorderStyle = 'FixedToolWindow'
	$formGetMemberOf.MaximizeBox = $False
	$formGetMemberOf.MinimizeBox = $False
	$formGetMemberOf.Name = 'formGetMemberOf'
	$formGetMemberOf.StartPosition = 'CenterScreen'
	$formGetMemberOf.Text = 'Get Member Of'
	$formGetMemberOf.add_FormClosed($jobTracker_FormClosed)
	$formGetMemberOf.add_Load($formGetMemberOf_Load)
	#
	# textbox1
	#
	$textbox1.Location = '94, 246'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '96, 20'
	$textbox1.TabIndex = 10
	$textbox1.Visible = $False
	$textbox1.add_TextChanged($textbox1_TextChanged)
	#
	# buttonExportList
	#
	$buttonExportList.Location = '30, 210'
	$buttonExportList.Name = 'buttonExportList'
	$buttonExportList.Size = '216, 65'
	$buttonExportList.TabIndex = 9
	$buttonExportList.Text = 'Export List'
	$buttonExportList.UseCompatibleTextRendering = $True
	$buttonExportList.UseVisualStyleBackColor = $True
	$buttonExportList.add_Click($buttonExportList_Click)
	#
	# comboboxGroups
	#
	$comboboxGroups.FormattingEnabled = $True
	$comboboxGroups.Location = '30, 101'
	$comboboxGroups.Name = 'comboboxGroups'
	$comboboxGroups.Size = '228, 21'
	$comboboxGroups.TabIndex = 7
	$comboboxGroups.add_SelectedIndexChanged($comboboxGroups_SelectedIndexChanged)
	#
	# buttonRemove
	#
	$buttonRemove.Location = '150, 157'
	$buttonRemove.Name = 'buttonRemove'
	$buttonRemove.Size = '96, 47'
	$buttonRemove.TabIndex = 6
	$buttonRemove.Text = 'Remove'
	$buttonRemove.UseCompatibleTextRendering = $True
	$buttonRemove.UseVisualStyleBackColor = $True
	$buttonRemove.add_Click($buttonRemove_Click)
	#
	# textboxUsername
	#
	$textboxUsername.Location = '135, 33'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '123, 20'
	$textboxUsername.TabIndex = 3
	$textboxUsername.add_TextChanged($textboxUsername_TextChanged)
	#
	# labelName
	#
	$labelName.AutoSize = $True
	$labelName.Font = 'Microsoft Sans Serif, 12pt'
	$labelName.Location = '30, 31'
	$labelName.Name = 'labelName'
	$labelName.Size = '54, 24'
	$labelName.TabIndex = 2
	$labelName.Text = 'Name:'
	$labelName.UseCompatibleTextRendering = $True
	$labelName.add_Click($labelName_Click)
	#
	# buttonCheck
	#
	$buttonCheck.Location = '30, 157'
	$buttonCheck.Name = 'buttonCheck'
	$buttonCheck.Size = '100, 47'
	$buttonCheck.TabIndex = 0
	$buttonCheck.Text = 'Check'
	$buttonCheck.UseCompatibleTextRendering = $True
	$buttonCheck.UseVisualStyleBackColor = $True
	$buttonCheck.add_Click($buttonCheck_Click)
	#
	# folderbrowserdialog1
	#
	$formGetMemberOf.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formGetMemberOf.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formGetMemberOf.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formGetMemberOf.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formGetMemberOf.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formGetMemberOf.ShowDialog()

}
#endregion Source: List Groups for User.psf

#region Source: List Properties.psf
function Show-List_Properties_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formActiveDirectoryPrope = New-Object 'System.Windows.Forms.Form'
	$textboxPropertyValue = New-Object 'System.Windows.Forms.ListBox'
	$buttonEdit = New-Object 'System.Windows.Forms.Button'
	$buttonCheckUser = New-Object 'System.Windows.Forms.Button'
	$labelProperties = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$comboboxProperties = New-Object 'System.Windows.Forms.ComboBox'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formActiveDirectoryPrope_Load={
		#TODO: Initialize Form Controls here
		$formActiveDirectoryPrope.MaximizeBox = $false
		$comboboxProperties.Enabled = $false
		$comboboxProperties.DropDownStyle = 'DropDownList'
		$buttonCheckUser.Enabled = $false
		$buttonEdit.Enabled = $false
		$Security_check = Security-Authentication
	}
	
	function Get-UserProperties
	{
		param (
			[string]$Identity
		)
		
		try
		{
			$global:objProperties = Get-ADUser -Server $domain -Identity $Identity -Properties *
			foreach ($global:objProperty in $objProperties.PsObject.Properties)
			{
				$comboboxProperties.Items.Add($objProperty.name)
			}
		}
		catch
		{
			[System.Windows.MessageBox]::Show("User: $Identity does not exist! Please try again", "User not found", 'OK', "Error")
		}
	}
	
	
	function Set-UserProperties
	{
		param (
			[string]$Identity,
			[string]$propertyName,
			[string]$propertyValue
		)
		
		try
		{
			Set-ADUser -Server $domain -Identity $Identity -Add @{ $propertyName = $propertyValue }
		}
		catch
		{
			
		}
	}
	
	
	function Security-Authentication
	{
		$password = 'Olaf210498'
		$passwordInput = Read-Host 'What is the password? Cancel to only read attributes' -AsSecureString
		if ([Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($passwordInput)) -eq $password)
		{
			[System.Windows.MessageBox]::Show('SFLAS salutes you', 'Success!', 'OK', 'Information')
			return $true
		}
		else
		{
			[System.Windows.MessageBox]::Show("`tPassword is Incorrect!`nYou will only be able to read attributes", "Password validation failed", 'OK', "Error")
			$buttonEdit.Hide()
			return $false
	
		}
	}
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	
	function Update-ToolStripComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ToolStripComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ToolStripComboBox control.
		
		.PARAMETER ToolStripComboBox
			The ToolStripComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ToolStripComboBox's Items collection.
		
		.PARAMETER Append
			Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
			Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
			Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ToolStripComboBox]
			$ToolStripComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ToolStripComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ToolStripComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ToolStripComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ToolStripComboBox.Items.Add($obj)
			}
			$ToolStripComboBox.EndUpdate()
		}
		else
		{
			$ToolStripComboBox.Items.Add($Items)
		}
	}
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	#endregion
	
	$labelUsername_Click={
		#TODO: Place custom script here
		
	}
	
	$textboxUsername_TextChanged = {
		#TODO: Place custom script here
		$buttonCheckUser.Enabled = $false
		$comboboxProperties.Enabled = $false
		$buttonEdit.Enabled = $false
		$comboboxProperties.Text = ''
		$textboxPropertyValue.Text = ''
		$comboboxProperties.Items.Clear()
		if ($textboxUsername.Text.Trim() -ne '')
		{
			$buttonCheckUser.Enabled = $true
		}
		
	}
	
	$comboboxProperties_SelectedIndexChanged = {
		#TODO: Place custom script here
		$textboxPropertyValue.Enabled = $false
		$buttonEdit.Text = "Edit"
		$textboxPropertyValue.Items.Clear()
		$Old_array_of_values = @()
		$New_array_of_value = @()
		$Old_value = ''
		$New_Value = ''
		if ($objProperties.PsObject.Properties.Item($comboboxProperties.Text).value -ne $null)
		{
			ForEach ($value in $objProperties.PsObject.Properties.Item($comboboxProperties.SelectedItem).value)
			{
				$textboxPropertyValue.Items.Add($value)
			}
		}
		$buttonEdit.Enabled = $true
	}
	
	$buttonCheckUser_Click={
		#TODO: Place custom script here
		Get-UserProperties -Identity $textboxUsername.Text
		$comboboxProperties.Enabled = $true
		$buttonCheckUser.Enabled = $false
		
	}
	
	$textboxPropertyValue_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$buttonEdit_Click= {
		#TODO: Place custom script here
		if ($buttonEdit.Text -eq "Save")
		{
			$textboxPropertyValue.Enabled = $false
			$buttonEdit.Text = "Edit"
			#if ($textboxPropertyValue.SelectedItem -ne $objProperties.PsObject.Properties.Item($comboboxProperties.Text).value)
			if ($New_array_of_value -ne $null -or (Compare-Object -DifferenceObject $New_array_of_value -ReferenceObject $Old_array_of_values) -ne $null)
			{
				$i = 0
				Set-ADUser -Server $domain -Identity $textboxUsername.Text -Clear $comboboxProperties.Text
				ForEach ($value in $New_array_of_value)
				{
					try
					{
						Set-UserProperties -Identity $textboxUsername.Text -propertyName $comboboxProperties.Text -propertyValue $value
						$objProperties.PsObject.Properties.Item($comboboxProperties.Text).value = $New_array_of_value
						$i++
						if ($i -eq $New_array_of_value.count)
						{
							[System.Windows.MessageBox]::Show("Attribute was successfully changed!", "Success!", "OK", 'Information')
							
						}
					}
					catch
					{
						[System.Windows.MessageBox]::Show("Couldn't change the attribute", "Unknown Error", "OK", "Error")
					}
				}
			}
		}
		
		else
		{
			$textboxPropertyValue.Enabled = $true
			$buttonEdit.Text = "Save"
		}
	}
	
	$textboxPropertyValue_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	$textboxPropertyValue.add_DoubleClick(
		{
			If ($buttonEdit.Text -eq 'Save')
			{
				$global:Old_value = $($textboxPropertyValue.SelectedItem)
				$global:Old_array_of_values = $textboxPropertyValue.Items
				$global:New_Value = [Microsoft.VisualBasic.Interaction]::InputBox("Enter the new value:", "Edit the value", $($textboxPropertyValue.SelectedItem))
				if ($New_Value.Trim() -ne '')
				{
					$global:New_array_of_value = $Old_array_of_values -replace $Old_value, $New_Value
					$Selected_index = $textboxPropertyValue.SelectedIndex
					$textboxPropertyValue.Items.RemoveAt($Selected_index)
					$textboxPropertyValue.Items.Insert($Selected_index, $New_Value)
				}
			}
		}
	)
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formActiveDirectoryPrope.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:List_Properties_textboxPropertyValue = $textboxPropertyValue.SelectedItems
		$script:List_Properties_comboboxProperties = $comboboxProperties.Text
		$script:List_Properties_comboboxProperties_SelectedItem = $comboboxProperties.SelectedItem
		$script:List_Properties_textboxUsername = $textboxUsername.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxPropertyValue.remove_SelectedIndexChanged($textboxPropertyValue_SelectedIndexChanged)
			$buttonEdit.remove_Click($buttonEdit_Click)
			$buttonCheckUser.remove_Click($buttonCheckUser_Click)
			$labelUsername.remove_Click($labelUsername_Click)
			$comboboxProperties.remove_SelectedIndexChanged($comboboxProperties_SelectedIndexChanged)
			$textboxUsername.remove_TextChanged($textboxUsername_TextChanged)
			$formActiveDirectoryPrope.remove_Load($formActiveDirectoryPrope_Load)
			$formActiveDirectoryPrope.remove_Load($Form_StateCorrection_Load)
			$formActiveDirectoryPrope.remove_Closing($Form_StoreValues_Closing)
			$formActiveDirectoryPrope.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formActiveDirectoryPrope.SuspendLayout()
	#
	# formActiveDirectoryPrope
	#
	$formActiveDirectoryPrope.Controls.Add($textboxPropertyValue)
	$formActiveDirectoryPrope.Controls.Add($buttonEdit)
	$formActiveDirectoryPrope.Controls.Add($buttonCheckUser)
	$formActiveDirectoryPrope.Controls.Add($labelProperties)
	$formActiveDirectoryPrope.Controls.Add($labelUsername)
	$formActiveDirectoryPrope.Controls.Add($comboboxProperties)
	$formActiveDirectoryPrope.Controls.Add($textboxUsername)
	$formActiveDirectoryPrope.AutoScaleDimensions = '6, 13'
	$formActiveDirectoryPrope.AutoScaleMode = 'Font'
	$formActiveDirectoryPrope.AutoScroll = $True
	$formActiveDirectoryPrope.ClientSize = '401, 342'
	$formActiveDirectoryPrope.FormBorderStyle = 'FixedToolWindow'
	$formActiveDirectoryPrope.Name = 'formActiveDirectoryPrope'
	$formActiveDirectoryPrope.Text = 'Active Directory Properties'
	$formActiveDirectoryPrope.add_Load($formActiveDirectoryPrope_Load)
	#
	# textboxPropertyValue
	#
	$textboxPropertyValue.Enabled = $False
	$textboxPropertyValue.FormattingEnabled = $True
	$textboxPropertyValue.Location = '13, 192'
	$textboxPropertyValue.Name = 'textboxPropertyValue'
	$textboxPropertyValue.Size = '354, 108'
	$textboxPropertyValue.TabIndex = 7
	$textboxPropertyValue.add_SelectedIndexChanged($textboxPropertyValue_SelectedIndexChanged)
	#
	# buttonEdit
	#
	$buttonEdit.Font = 'Microsoft Sans Serif, 12pt'
	$buttonEdit.Location = '13, 133'
	$buttonEdit.Name = 'buttonEdit'
	$buttonEdit.Size = '109, 36'
	$buttonEdit.TabIndex = 6
	$buttonEdit.Text = 'Edit'
	$buttonEdit.UseCompatibleTextRendering = $True
	$buttonEdit.UseVisualStyleBackColor = $True
	$buttonEdit.add_Click($buttonEdit_Click)
	#
	# buttonCheckUser
	#
	$buttonCheckUser.Font = 'Microsoft Sans Serif, 12pt'
	$buttonCheckUser.Location = '258, 133'
	$buttonCheckUser.Name = 'buttonCheckUser'
	$buttonCheckUser.Size = '109, 36'
	$buttonCheckUser.TabIndex = 4
	$buttonCheckUser.Text = 'Check User'
	$buttonCheckUser.UseCompatibleTextRendering = $True
	$buttonCheckUser.UseVisualStyleBackColor = $True
	$buttonCheckUser.add_Click($buttonCheckUser_Click)
	#
	# labelProperties
	#
	$labelProperties.AutoSize = $True
	$labelProperties.Font = 'Microsoft Sans Serif, 13pt'
	$labelProperties.Location = '13, 84'
	$labelProperties.Name = 'labelProperties'
	$labelProperties.Size = '73, 25'
	$labelProperties.TabIndex = 3
	$labelProperties.Text = 'Attribute'
	$labelProperties.UseCompatibleTextRendering = $True
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Font = 'Microsoft Sans Serif, 13pt'
	$labelUsername.Location = '12, 29'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '89, 25'
	$labelUsername.TabIndex = 2
	$labelUsername.Text = 'Username'
	$labelUsername.UseCompatibleTextRendering = $True
	$labelUsername.add_Click($labelUsername_Click)
	#
	# comboboxProperties
	#
	$comboboxProperties.Font = 'Microsoft Sans Serif, 8.25pt'
	$comboboxProperties.FormattingEnabled = $True
	$comboboxProperties.Location = '197, 84'
	$comboboxProperties.Name = 'comboboxProperties'
	$comboboxProperties.Size = '170, 21'
	$comboboxProperties.Sorted = $True
	$comboboxProperties.TabIndex = 1
	$comboboxProperties.add_SelectedIndexChanged($comboboxProperties_SelectedIndexChanged)
	#
	# textboxUsername
	#
	$textboxUsername.Location = '197, 34'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '170, 20'
	$textboxUsername.TabIndex = 1
	$textboxUsername.add_TextChanged($textboxUsername_TextChanged)
	$formActiveDirectoryPrope.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formActiveDirectoryPrope.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formActiveDirectoryPrope.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formActiveDirectoryPrope.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formActiveDirectoryPrope.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formActiveDirectoryPrope.ShowDialog()

}
#endregion Source: List Properties.psf

#region Source: GenerateSAPPassword.psf
function Show-GenerateSAPPassword_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formPasswordGenerator = New-Object 'System.Windows.Forms.Form'
	$buttonSendPassword = New-Object 'System.Windows.Forms.Button'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$labelPhoneNo = New-Object 'System.Windows.Forms.Label'
	$textbox_showNumber = New-Object 'System.Windows.Forms.TextBox'
	$textbox_UsernameField = New-Object 'System.Windows.Forms.TextBox'
	$label_Username = New-Object 'System.Windows.Forms.Label'
	$buttonCheckNumber = New-Object 'System.Windows.Forms.Button'
	$textboxPassword = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formPasswordGenerator_Load={
		#TODO: Initialize Form Controls here
		$formPasswordGenerator.MaximizeBox = $false
		$textboxPassword.ReadOnly = $true
		$textbox_showNumber.ReadOnly = $true
		$buttonCheckNumber.Enabled = $false
		$buttonSendPassword.Enabled = $false
	}
	
	
	$buttonCheckNumber_Click = {
		$textbox_UsernameField.Text = $textbox_UsernameField.Text.Trim()
		Get-PhoneNumber $textbox_UsernameField.Text
		$buttonSendPassword.Enabled = $true
		
		
	}
	
	$textboxPassword_TextChanged={
		#TODO: Place custom script here	
	}
	
	#region Process Tracker
	function Stop-ProcessTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all processes from the list.
		#>
		#Stop the timer
		$timerProcessTracker.Stop()
		
		#Remove all the processes
		while($ProcessTrackerList.Count -gt 0)
		{
			$process = $ProcessTrackerList[0].Process
			$ProcessTrackerList.RemoveAt(0)
			if(-not $process.HasExited)
			{
				Stop-Process -InputObject $process
			}
		}
	}
	
	function Update-ProcessTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerProcessTracker.Stop() #Freeze the Timer
		
		for($index =0; $index -lt $ProcessTrackerList.Count; $index++)
		{
			$psObject = $ProcessTrackerList[$index]
			
			if($null -ne $psObject) 
			{
				if($null -ne $psObject.Process)
				{
					if($psObject.Process.HasExited)
					{				
						#Call the Complete Script Block
						if($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
						}
						
						$ProcessTrackerList.RemoveAt($index)
						$index-- #Step back so we don't skip a job
						$psObject.Process.Dispose()#clean up
					}
					elseif($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
					}
				}
			}
			else
			{
				$ProcessTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if($ProcessTrackerList.Count -gt 0)
		{
			$timerProcessTracker.Start()#Resume the timer
		}
	}
	
	$ProcessTrackerList = New-Object System.Collections.ArrayList
	function Add-ProcessTracker
	{
		<#
			.SYNOPSIS
				Add a new process to the ProcessTracker and starts the timer.
		
			.DESCRIPTION
				Add a new process to the ProcessTracker and starts the timer.
		
			.PARAMETER  FilePath
				The path to executable.
		
			.PARAMETER ArgumentList
				The arguments to pass to the process.
		
			.PARAMETER CompletedScript
				The script block that will be called when the process is complete.
				The process is passed as an argument. The process argument is null when the job fails.
		
			.PARAMETER UpdateScript
				The script block that will be called each time the timer ticks.
				The process is passed as an argument.
		
			.PARAMETER RedirectOutputScript
				The script block that handles output from the process.
				Use $_.Data to access the output text.
		
			.PARAMETER RedirectErrorScript
				The script block that handles error output from the process.
				Use $_.Data to access the output text.
		
			.PARAMETER NoNewWindow
				Start the new process in the current console window.
		
			.PARAMETER WindowStyle
				Specifies the state of the window that is used for the new process. 
				Valid values are Normal, Hidden, Minimized, and Maximized. 
				The default value is Normal.
		
			.PARAMETER WorkingDirectory
				Specifies the location of the executable file or document that runs in the process. 
				The default is the current directory.
		
			.PARAMETER RedirectInput
				Redirects the input of the process. If this switch is set, the function will return the process object.
				Use the process object's StandardInput property to access the input stream.
		
			.PARAMETER PassThru
				Returns the process that was started.
		
			.PARAMETER SyncObject
				The object used to marshal the process event handler calls that are issued.
				You must pass a control to sync otherwise it will produce an error when redirecting output.
	
			.EXAMPLE
				 Add-ProcessTracker -FilePath 'notepad.exe' `
				-SyncObject $form1 `
				-CompletedScript {
					Param([System.Diagnostics.Process]$Process)
					$button.Enable = $true
				}`
				-UpdateScript {
					Param([System.Diagnostics.Process]$Process)
					Function-Animate $button
				}`
				-RedirectOutputScript { 
				# Use $_.Data to access the output text
					$textBox1.AppendText($_.Data)
					$textBox1.AppendText("`r`n")
				}
			.EXAMPLE
				$process = Add-ProcessTracker -FilePath 'powershell.exe' `
				-RedirectInput `
				-SyncObject $buttonRunProcess `
				-RedirectOutputScript {
					# Use $_.Data to access the output text
					$richtextbox1.AppendText($_.Data)
					$richtextbox1.AppendText("`r`n")
				}
				
				#Write to the console
				$process.StandardInput.WriteLine("Get-Process")
		
			.OUTPUTS
				 System.Diagnostics.Process
		#>
		
		[OutputType([System.Diagnostics.Process])]
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$FilePath,
			[string]$Arguments,
			[string]$WorkingDirectory,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.ComponentModel.ISynchronizeInvoke]$SyncObject,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript,
			[ScriptBlock]$RedirectOutputScript,
			[ScriptBlock]$RedirectErrorScript,
			[System.Diagnostics.ProcessWindowStyle]$WindowStyle = 'Normal',
			[switch]$RedirectInput,
			[switch]$NoNewWindow,
			[switch]$PassThru
		)
		
		#Start the Process
		try
		{
			$process = New-Object System.Diagnostics.Process
			$process.StartInfo.FileName = $FilePath
			$process.StartInfo.WindowStyle = $WindowStyle
			
			if ($NoNewWindow)
			{
				$process.StartInfo.CreateNoWindow = $true
			}
			
			if ($WorkingDirectory)
			{
			 	$process.StartInfo.WorkingDirectory = $WorkingDirectory
			}
			
			#Handle Redirection
			if ($RedirectErrorScript)
			{
				$process.EnableRaisingEvents = $true
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.RedirectStandardError = $true
				$process.StartInfo.CreateNoWindow = $true
				$process.add_ErrorDataReceived($RedirectErrorScript)
			}
			
			if ($RedirectOutputScript)
			{
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.RedirectStandardOutput = $true
				$process.add_OutputDataReceived($RedirectOutputScript)
			}
			
			if($RedirectInput)
			{
				$process.EnableRaisingEvents = $true
				$process.StartInfo.UseShellExecute = $false
				$process.StartInfo.CreateNoWindow = $true
				$process.StartInfo.RedirectStandardInput = $true
				$PassThru = $true #Force the object to return
			}
			
			#Pass the arguments and sync with the form
			$process.StartInfo.Arguments = $Arguments
			$process.SynchronizingObject = $SyncObject
			$process.Start() | Out-Null
			
			#Begin the redirect reads
			if ($RedirectOutputScript)
			{
				$process.BeginOutputReadLine()
			}
			
			if ($RedirectErrorScript)
			{
				$process.BeginErrorReadLine()
			}
		}
		catch
		{
			Write-Error $_.Exception.Message
			$process = $null
		}
		
		if ($null -ne $process)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				"Process"	     = $process;
				"CompleteScript" = $CompletedScript;
				"UpdateScript"   = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$ProcessTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerProcessTracker.Enabled)
			{
				$timerProcessTracker.Start()
			}
				
			#Return the process if using PassThru
			if ($PassThru)
			{
				return $process
			}
		}
		elseif ($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	#endregion
	
	
	$buttonSendPassword_Click={
		#TODO: Place custom script here
		$textboxPassword.Text = Generate-Password -NotSecure
		ResetAndSendPassword -SAP -GeneratedPassword $textboxPassword.Text 
		
	}
	
	$textbox_UsernameField_TextChanged={
		#TODO: Place custom script here
		$buttonCheckNumber.Enabled = $false
		$buttonSendPassword.Enabled = $false
		$textbox_showNumber.Text = $null
		$textboxPassword.Text = ''
		if ($textbox_UsernameField.Text.Trim() -ne '')
		{
			$buttonCheckNumber.Enabled = $true
			$global:username = $textbox_UsernameField.Text
		}
		
		
	}
	
	$textbox_showNumber_TextChanged={
		#TODO: Place custom script here
		
	}
	
	
	$label_Username_Click={
		#TODO: Place custom script here
		
	}
	
	$processTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formPasswordGenerator.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GenerateSAPPassword_textbox_showNumber = $textbox_showNumber.Text
		$script:GenerateSAPPassword_textbox_UsernameField = $textbox_UsernameField.Text
		$script:GenerateSAPPassword_textboxPassword = $textboxPassword.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonSendPassword.remove_Click($buttonSendPassword_Click)
			$textbox_showNumber.remove_TextChanged($textbox_showNumber_TextChanged)
			$textbox_UsernameField.remove_TextChanged($textbox_UsernameField_TextChanged)
			$label_Username.remove_Click($label_Username_Click)
			$buttonCheckNumber.remove_Click($buttonCheckNumber_Click)
			$textboxPassword.remove_TextChanged($textboxPassword_TextChanged)
			$formPasswordGenerator.remove_FormClosed($processTracker_FormClosed)
			$formPasswordGenerator.remove_Load($formPasswordGenerator_Load)
			$formPasswordGenerator.remove_Load($Form_StateCorrection_Load)
			$formPasswordGenerator.remove_Closing($Form_StoreValues_Closing)
			$formPasswordGenerator.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formPasswordGenerator.SuspendLayout()
	#
	# formPasswordGenerator
	#
	$formPasswordGenerator.Controls.Add($buttonSendPassword)
	$formPasswordGenerator.Controls.Add($labelPassword)
	$formPasswordGenerator.Controls.Add($labelPhoneNo)
	$formPasswordGenerator.Controls.Add($textbox_showNumber)
	$formPasswordGenerator.Controls.Add($textbox_UsernameField)
	$formPasswordGenerator.Controls.Add($label_Username)
	$formPasswordGenerator.Controls.Add($buttonCheckNumber)
	$formPasswordGenerator.Controls.Add($textboxPassword)
	$formPasswordGenerator.AutoScaleDimensions = '6, 13'
	$formPasswordGenerator.AutoScaleMode = 'Font'
	$formPasswordGenerator.ClientSize = '284, 261'
	$formPasswordGenerator.FormBorderStyle = 'FixedToolWindow'
	$formPasswordGenerator.Name = 'formPasswordGenerator'
	$formPasswordGenerator.Text = 'Password generator'
	$formPasswordGenerator.add_FormClosed($processTracker_FormClosed)
	$formPasswordGenerator.add_Load($formPasswordGenerator_Load)
	#
	# buttonSendPassword
	#
	$buttonSendPassword.Location = '141, 207'
	$buttonSendPassword.Name = 'buttonSendPassword'
	$buttonSendPassword.Size = '117, 42'
	$buttonSendPassword.TabIndex = 22
	$buttonSendPassword.Text = 'Send Password'
	$buttonSendPassword.UseCompatibleTextRendering = $True
	$buttonSendPassword.UseVisualStyleBackColor = $True
	$buttonSendPassword.add_Click($buttonSendPassword_Click)
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Font = 'Microsoft Sans Serif, 10pt'
	$labelPassword.Location = '100, 119'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '65, 20'
	$labelPassword.TabIndex = 21
	$labelPassword.Text = 'Password'
	$labelPassword.UseCompatibleTextRendering = $True
	#
	# labelPhoneNo
	#
	$labelPhoneNo.AutoSize = $True
	$labelPhoneNo.Font = 'Microsoft Sans Serif, 12pt'
	$labelPhoneNo.Location = '15, 71'
	$labelPhoneNo.Name = 'labelPhoneNo'
	$labelPhoneNo.Size = '83, 24'
	$labelPhoneNo.TabIndex = 20
	$labelPhoneNo.Text = 'Phone No.'
	$labelPhoneNo.UseCompatibleTextRendering = $True
	#
	# textbox_showNumber
	#
	$textbox_showNumber.Location = '141, 71'
	$textbox_showNumber.Name = 'textbox_showNumber'
	$textbox_showNumber.Size = '117, 20'
	$textbox_showNumber.TabIndex = 19
	$textbox_showNumber.add_TextChanged($textbox_showNumber_TextChanged)
	#
	# textbox_UsernameField
	#
	$textbox_UsernameField.Location = '141, 28'
	$textbox_UsernameField.Name = 'textbox_UsernameField'
	$textbox_UsernameField.Size = '117, 20'
	$textbox_UsernameField.TabIndex = 18
	$textbox_UsernameField.add_TextChanged($textbox_UsernameField_TextChanged)
	#
	# label_Username
	#
	$label_Username.AutoSize = $True
	$label_Username.Font = 'Microsoft Sans Serif, 12pt'
	$label_Username.Location = '15, 28'
	$label_Username.Name = 'label_Username'
	$label_Username.Size = '86, 24'
	$label_Username.TabIndex = 17
	$label_Username.Text = 'Username:'
	$label_Username.UseCompatibleTextRendering = $True
	$label_Username.add_Click($label_Username_Click)
	#
	# buttonCheckNumber
	#
	$buttonCheckNumber.Font = 'Microsoft Sans Serif, 10pt'
	$buttonCheckNumber.Location = '12, 207'
	$buttonCheckNumber.Name = 'buttonCheckNumber'
	$buttonCheckNumber.Size = '111, 42'
	$buttonCheckNumber.TabIndex = 2
	$buttonCheckNumber.Text = 'Check Number'
	$buttonCheckNumber.UseCompatibleTextRendering = $True
	$buttonCheckNumber.UseVisualStyleBackColor = $True
	$buttonCheckNumber.add_Click($buttonCheckNumber_Click)
	#
	# textboxPassword
	#
	$textboxPassword.Location = '65, 152'
	$textboxPassword.Multiline = $True
	$textboxPassword.Name = 'textboxPassword'
	$textboxPassword.Size = '145, 28'
	$textboxPassword.TabIndex = 1
	$textboxPassword.add_TextChanged($textboxPassword_TextChanged)
	$formPasswordGenerator.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formPasswordGenerator.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formPasswordGenerator.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formPasswordGenerator.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formPasswordGenerator.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formPasswordGenerator.ShowDialog()

}
#endregion Source: GenerateSAPPassword.psf

#region Source: ResetADPassword.psf
function Show-ResetADPassword_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formResetADPassword = New-Object 'System.Windows.Forms.Form'
	$labelPhoneNo = New-Object 'System.Windows.Forms.Label'
	$textbox_showNumber = New-Object 'System.Windows.Forms.TextBox'
	$label_Step2 = New-Object 'System.Windows.Forms.Label'
	$buttonSendPassword = New-Object 'System.Windows.Forms.Button'
	$label_Step1 = New-Object 'System.Windows.Forms.Label'
	$button_CheckNumber = New-Object 'System.Windows.Forms.Button'
	$textbox_UsernameField = New-Object 'System.Windows.Forms.TextBox'
	$label_Username = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formChildForm_Load = {
		#TODO: Place custom script here
		$buttonSendPassword.Enabled = $false
		$button_CheckNumber.Enabled = $false
		$textbox_showNumber.ReadOnly = $true
		$formResetADPassword.MaximizeBox = $false
	}
	
	
	$Username_Click = {
		#TODO: Place custom script here
		
	}
	
	$textbox_UsernameField_TextChanged = {
		#TODO: Place custom script here
		$buttonSendPassword.Enabled = $false
		$button_CheckNumber.Enabled = $false
		$textbox_showNumber.Text = $null
		if ($textbox_UsernameField.Text.Trim() -ne '')
		{
			$button_CheckNumber.Enabled = $true
			$global:username = $textbox_UsernameField.Text
		}
	}
	
	$ResetPassword_Click = {
		#TODO: Place custom script here
		
	}
	
	$label_Step1_Click = {
		#TODO: Place custom script here
		
	}
	
	$labelResetPassword_Click = {
		#TODO: Place custom script here
		
	}
	
	$button_CheckNumber_Click = {
		$textbox_UsernameField.Text = $textbox_UsernameField.Text.Trim()
		Get-PhoneNumber $textbox_UsernameField.Text
		#TODO: Place custom script here
		
	}
	
	$textbox_showNumber_TextChanged = {
		if ($textbox_showNumber.Text -match '\d')
		{
			$buttonSendPassword.Enabled = $true
		}
		#TODO: Place custom script here
	}
	
	$label_Username_Click = {
		#TODO: Place custom script here
		
	}
	
	$buttonSendPassword_Click = {
		ResetAndSendPassword
		#TODO: Place custom script here
		
	}
	
	$label_Step2_Click = {
		#TODO: Place custom script here
		
	}
	
	$labelPhoneNo_Click = {
		#TODO: Place custom script here
		
	}
	
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formResetADPassword.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ResetADPassword_textbox_showNumber = $textbox_showNumber.Text
		$script:ResetADPassword_textbox_UsernameField = $textbox_UsernameField.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textbox_showNumber.remove_TextChanged($textbox_showNumber_TextChanged)
			$buttonSendPassword.remove_Click($buttonSendPassword_Click)
			$button_CheckNumber.remove_Click($button_CheckNumber_Click)
			$textbox_UsernameField.remove_TextChanged($textbox_UsernameField_TextChanged)
			$formResetADPassword.remove_Load($formChildForm_Load)
			$formResetADPassword.remove_Load($Form_StateCorrection_Load)
			$formResetADPassword.remove_Closing($Form_StoreValues_Closing)
			$formResetADPassword.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formResetADPassword.SuspendLayout()
	#
	# formResetADPassword
	#
	$formResetADPassword.Controls.Add($labelPhoneNo)
	$formResetADPassword.Controls.Add($textbox_showNumber)
	$formResetADPassword.Controls.Add($label_Step2)
	$formResetADPassword.Controls.Add($buttonSendPassword)
	$formResetADPassword.Controls.Add($label_Step1)
	$formResetADPassword.Controls.Add($button_CheckNumber)
	$formResetADPassword.Controls.Add($textbox_UsernameField)
	$formResetADPassword.Controls.Add($label_Username)
	$formResetADPassword.AutoScaleDimensions = '6, 13'
	$formResetADPassword.AutoScaleMode = 'Font'
	$formResetADPassword.ClientSize = '284, 262'
	$formResetADPassword.FormBorderStyle = 'FixedToolWindow'
	$formResetADPassword.Margin = '4, 4, 4, 4'
	$formResetADPassword.Name = 'formResetADPassword'
	$formResetADPassword.StartPosition = 'CenterParent'
	$formResetADPassword.Text = 'Reset AD Password'
	$formResetADPassword.add_Load($formChildForm_Load)
	#
	# labelPhoneNo
	#
	$labelPhoneNo.AutoSize = $True
	$labelPhoneNo.Font = 'Microsoft Sans Serif, 12pt'
	$labelPhoneNo.Location = '12, 108'
	$labelPhoneNo.Name = 'labelPhoneNo'
	$labelPhoneNo.Size = '83, 24'
	$labelPhoneNo.TabIndex = 16
	$labelPhoneNo.Text = 'Phone No.'
	$labelPhoneNo.UseCompatibleTextRendering = $True
	#
	# textbox_showNumber
	#
	$textbox_showNumber.Location = '141, 108'
	$textbox_showNumber.Name = 'textbox_showNumber'
	$textbox_showNumber.Size = '117, 20'
	$textbox_showNumber.TabIndex = 15
	$textbox_showNumber.add_TextChanged($textbox_showNumber_TextChanged)
	#
	# label_Step2
	#
	$label_Step2.AutoSize = $True
	$label_Step2.Font = 'Microsoft Sans Serif, 10pt'
	$label_Step2.Location = '191, 165'
	$label_Step2.Name = 'label_Step2'
	$label_Step2.Size = '44, 20'
	$label_Step2.TabIndex = 14
	$label_Step2.Text = 'Step 2'
	$label_Step2.UseCompatibleTextRendering = $True
	#
	# buttonSendPassword
	#
	$buttonSendPassword.Location = '141, 195'
	$buttonSendPassword.Name = 'buttonSendPassword'
	$buttonSendPassword.Size = '131, 43'
	$buttonSendPassword.TabIndex = 13
	$buttonSendPassword.Text = 'Send Password'
	$buttonSendPassword.UseCompatibleTextRendering = $True
	$buttonSendPassword.UseVisualStyleBackColor = $True
	$buttonSendPassword.add_Click($buttonSendPassword_Click)
	#
	# label_Step1
	#
	$label_Step1.AutoSize = $True
	$label_Step1.Font = 'Microsoft Sans Serif, 10pt'
	$label_Step1.Location = '51, 165'
	$label_Step1.Name = 'label_Step1'
	$label_Step1.Size = '44, 20'
	$label_Step1.TabIndex = 12
	$label_Step1.Text = 'Step 1'
	$label_Step1.UseCompatibleTextRendering = $True
	#
	# button_CheckNumber
	#
	$button_CheckNumber.Location = '12, 195'
	$button_CheckNumber.Name = 'button_CheckNumber'
	$button_CheckNumber.Size = '118, 43'
	$button_CheckNumber.TabIndex = 11
	$button_CheckNumber.Text = 'Check Number'
	$button_CheckNumber.UseCompatibleTextRendering = $True
	$button_CheckNumber.UseVisualStyleBackColor = $True
	$button_CheckNumber.add_Click($button_CheckNumber_Click)
	#
	# textbox_UsernameField
	#
	$textbox_UsernameField.Location = '141, 26'
	$textbox_UsernameField.Name = 'textbox_UsernameField'
	$textbox_UsernameField.Size = '117, 20'
	$textbox_UsernameField.TabIndex = 10
	$textbox_UsernameField.add_TextChanged($textbox_UsernameField_TextChanged)
	#
	# label_Username
	#
	$label_Username.AutoSize = $True
	$label_Username.Font = 'Microsoft Sans Serif, 12pt'
	$label_Username.Location = '12, 24'
	$label_Username.Name = 'label_Username'
	$label_Username.Size = '86, 24'
	$label_Username.TabIndex = 9
	$label_Username.Text = 'Username:'
	$label_Username.UseCompatibleTextRendering = $True
	$formResetADPassword.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formResetADPassword.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formResetADPassword.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formResetADPassword.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formResetADPassword.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formResetADPassword.ShowDialog()

}
#endregion Source: ResetADPassword.psf

#region Source: SAP Empty Connection List.psf
function Show-SAP_Empty_Connection_List_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSAPEmptyConnectionLi = New-Object 'System.Windows.Forms.Form'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$buttonConfirmZdriveAccess = New-Object 'System.Windows.Forms.Button'
	$labelPCNo = New-Object 'System.Windows.Forms.Label'
	$textboxPCNumber = New-Object 'System.Windows.Forms.TextBox'
	$labelPathToCopyFiles = New-Object 'System.Windows.Forms.Label'
	$textboxPathToFiles = New-Object 'System.Windows.Forms.TextBox'
	$checkboxLocalPC = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxCitrix = New-Object 'System.Windows.Forms.CheckBox'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$buttonFindSAPFolderPath = New-Object 'System.Windows.Forms.Button'
	$buttonCopyFiles = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSAPEmptyConnectionLi_Load={
		#TODO: Initialize Form Controls here
		$labelPCNo.Hide()
		$textboxPCNumber.Hide()
		$buttonFindSAPFolderPath.Enabled = $false
		$buttonCopyFiles.Enabled = $false
		$checkboxCitrix.Enabled = $false
		$checkboxLocalPC.Checked = $false
		$checkboxLocalPC.Enabled = $false
		$formSAPEmptyConnectionLi.MaximizeBox = $false
	}
	
	function Get-ZDriveAccess
	{
		param (
			[string]$Identity,
			[string]$Path
		)
		
		$permission = (Get-Acl $Path).Access | ?{ $_.IdentityReference -match $Identity } | Select IdentityReference, FileSystemRights
		If ($permission)
		{
			$permission | % { [System.Windows.MessageBox]::Show("User $($_.IdentityReference) has '$($_.FileSystemRights)' rights on folder $folder", "Success!", 'OK', 'Information') }
		}
		Else
		{
			[System.Windows.MessageBox]::Show("$User has no access to their Z-Drive!", 'Assign to NNIT-IAM-Tech', 'OKCancel', 'Warning')
		}
	}
	
	
	function Check-ComputerIsUp
	{
		param (
			[string]$Computername
		)
		
		$Test_Connection = Test-Connection -BufferSize 32 -ComputerName $Computername -Count 1 -Quiet
		if ($Test_Connection)
		{
			[System.Windows.MessageBox]::Show("$Computername is up, copy files is ready!", "Success!", 'OK', 'Information') | Out-Null
			return $true
		}
		else
		{
			[System.Windows.MessageBox]::Show("No reply from PC was received, assumed off", "Error", 'OK', "Warning") | Out-Null
			return $false
		}
		
	}
	
	
	function Copy-SAPFiles
	{
		param (
			[string]$Path
		)
		if (!(Test-Path -Path $Path)) # If SAPWorkDir does not exist, create it
		{
			mkdir -Path $Path -Force
		}
		$SAP_System_Files = (Get-ChildItem -Path "\\dkclu00008-res1\tools\Service Desk Files").FullName
		$Copy_Files_Error_array = @()
		ForEach ($file in $SAP_System_Files)
		{
			try { Copy-Item -Path $file -Destination $Path -Force }
			catch { $Copy_Files_Error_array += $file + '`n' }
		}
		if ($Copy_Files_Error_array -gt 0)
		{
			[System.Windows.MessageBox]::Show("Could not confirm copy of below files. Please doublecheck:`n", "Unknown Error", "OK", "Warning")
		}
		else
		{
			[System.Windows.MessageBox]::Show("All files was copied with success!", "Success!", "OK", "Information")
		}
	}
	
	
	$checkboxCitrix_CheckedChanged={
		#TODO: Place custom script here
		$textboxPathToFiles.Text = ''
		$buttonCopyFiles.Enabled = $false
		$buttonConfirmZdriveAccess.Enabled = $false
		$buttonConfirmZdriveAccess.Text = "Confirm Z-drive access"
		if ($checkboxCitrix.Checked)
		{
			$checkboxLocalPC.Checked = $false
			$labelPCNo.hide()
			$textboxPCNumber.hide()
			$buttonFindSAPFolderPath.Enabled = $true
		}
		if (!$checkboxCitrix.Checked -and !$checkboxLocalPC.Checked)
		{
			$buttonFindSAPFolderPath.Enabled = $false
		}
	}
	
	
	$checkboxLocalPC_CheckedChanged = {
		$statusbar1.Text = ''
		$textboxPathToFiles.Text = ''
		$buttonFindSAPFolderPath.Enabled = $false
		if ($checkboxLocalPC.Checked)
		{
			$checkboxCitrix.Checked = $false
			$labelPCNo.show()
			$textboxPCNumber.show()
			$buttonConfirmZdriveAccess.Text = "Confirm Computer is UP"
		}
		if (!$checkboxCitrix.Checked -and !$checkboxLocalPC.Checked)
		{
			$buttonFindSAPFolderPath.Enabled = $false
			$labelPCNo.hide()
			$textboxPCNumber.hide()
		}
	}
	
	$buttonFindSAPFolderPath_Click={
		#TODO: Place custom script here
		$textboxUsername.Text = $textboxUsername.Text.Trim()
		if ($checkboxCitrix.Checked)
		{
			try
			{
				$global:ZDrivePath = Get-ADInfo -GetZdrive -userEntry $textboxUsername.Text
				if ($ZDrivePath -ne $null)
				{
					$textboxPathToFiles.Text = $ZDrivePath + '\CitrixApps\SAPWorkDir\'
					$buttonConfirmZdriveAccess.Enabled = $true
				}
				
			}
			catch { $statusbar1.Text = "No Z-drive path found in Active Directory!" }
		}
		elseif ($checkboxLocalPC.Checked)
		{
			try
			{
				$buttonConfirmZdriveAccess.show()
				$textboxPathToFiles.Text = "\\$($textboxPCNumber.Text)\C$\users\$($textboxUsername.Text)\AppData\Roaming\SAP\Common\"
				$buttonConfirmZdriveAccess.Enabled = $true
			}
			catch { $statusbar1.Text = "Unknown Error!" }
		}
		else
		{
			$statusbar1.Text = "Please select a checkbox!"
		}
		
		
		
	}
	
	
	$textboxUsername_TextChanged={
		#TODO: Place custom script here
		$statusbar1.Text = ''
		$textboxPathToFiles.Text = ''
		$textboxPCNumber.Text = ''
		$textboxPCNumber.Hide()
		$labelPCNo.hide()
		$checkboxCitrix.Checked = $false
		$checkboxCitrix.Enabled = $false
		$checkboxLocalPC.Checked = $false
		$checkboxLocalPC.Enabled = $false
		$buttonFindSAPFolderPath.Enabled = $false
		$buttonCopyFiles.Enabled = $false
		
		if ($textboxUsername.Text.Trim() -ne '')
		{
			$checkboxCitrix.Enabled = $true
			$checkboxLocalPC.Enabled = $true
		}
		
	}
	
	$textboxPathToFiles_TextChanged={
		if ($textboxPathToFiles.Text.Trim() -ne '')
		{
			if ($checkboxCitrix.Checked)
			{
				$buttonConfirmZdriveAccess.show()
			}
		}
		
	}
	
	$buttonCopyFiles_Click={
		Copy-SAPFiles -Path $textboxPathToFiles.Text	
	}
	
	$textboxPCNumber_TextChanged = {
		$textboxPathToFiles.Text = ''
		$buttonCopyFiles.Enabled = $false
		$buttonFindSAPFolderPath.Enabled = $false
		$buttonConfirmZdriveAccess.Enabled = $false
		if ($textboxPCNumber.Text.Trim() -ne '')
		{
			$buttonFindSAPFolderPath.Enabled = $true
			#$buttonConfirmZdriveAccess.Enabled = $true
		}
	}
	
	$labelPathToCopyFiles_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonConfirmZdriveAccess_Click = {
		if ($checkboxCitrix.Checked)
		{
			Get-ZDriveAccess -Identity $textboxUsername.Text -Path $ZDrivePath
			$buttonCopyFiles.Enabled = $true
		}
		
		elseif ($checkboxLocalPC.Checked)
		{
			$ComputerIsUp = Check-ComputerIsUp -Computername $textboxPCNumber.Text
			
			if (!$ComputerIsUp)
			{
				$buttonCopyFiles.Enabled = $false
			}
			elseif($textboxPathToFiles.Text.Trim() -ne '')
			{
				$buttonCopyFiles.Enabled = $true
			}
			
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSAPEmptyConnectionLi.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SAP_Empty_Connection_List_textboxPCNumber = $textboxPCNumber.Text
		$script:SAP_Empty_Connection_List_textboxPathToFiles = $textboxPathToFiles.Text
		$script:SAP_Empty_Connection_List_checkboxLocalPC = $checkboxLocalPC.Checked
		$script:SAP_Empty_Connection_List_checkboxCitrix = $checkboxCitrix.Checked
		$script:SAP_Empty_Connection_List_textboxUsername = $textboxUsername.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonConfirmZdriveAccess.remove_Click($buttonConfirmZdriveAccess_Click)
			$textboxPCNumber.remove_TextChanged($textboxPCNumber_TextChanged)
			$labelPathToCopyFiles.remove_Click($labelPathToCopyFiles_Click)
			$textboxPathToFiles.remove_TextChanged($textboxPathToFiles_TextChanged)
			$checkboxLocalPC.remove_CheckedChanged($checkboxLocalPC_CheckedChanged)
			$checkboxCitrix.remove_CheckedChanged($checkboxCitrix_CheckedChanged)
			$textboxUsername.remove_TextChanged($textboxUsername_TextChanged)
			$buttonFindSAPFolderPath.remove_Click($buttonFindSAPFolderPath_Click)
			$buttonCopyFiles.remove_Click($buttonCopyFiles_Click)
			$formSAPEmptyConnectionLi.remove_Load($formSAPEmptyConnectionLi_Load)
			$formSAPEmptyConnectionLi.remove_Load($Form_StateCorrection_Load)
			$formSAPEmptyConnectionLi.remove_Closing($Form_StoreValues_Closing)
			$formSAPEmptyConnectionLi.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSAPEmptyConnectionLi.SuspendLayout()
	#
	# formSAPEmptyConnectionLi
	#
	$formSAPEmptyConnectionLi.Controls.Add($statusbar1)
	$formSAPEmptyConnectionLi.Controls.Add($buttonConfirmZdriveAccess)
	$formSAPEmptyConnectionLi.Controls.Add($labelPCNo)
	$formSAPEmptyConnectionLi.Controls.Add($textboxPCNumber)
	$formSAPEmptyConnectionLi.Controls.Add($labelPathToCopyFiles)
	$formSAPEmptyConnectionLi.Controls.Add($textboxPathToFiles)
	$formSAPEmptyConnectionLi.Controls.Add($checkboxLocalPC)
	$formSAPEmptyConnectionLi.Controls.Add($checkboxCitrix)
	$formSAPEmptyConnectionLi.Controls.Add($textboxUsername)
	$formSAPEmptyConnectionLi.Controls.Add($labelUsername)
	$formSAPEmptyConnectionLi.Controls.Add($buttonFindSAPFolderPath)
	$formSAPEmptyConnectionLi.Controls.Add($buttonCopyFiles)
	$formSAPEmptyConnectionLi.AutoScaleDimensions = '6, 13'
	$formSAPEmptyConnectionLi.AutoScaleMode = 'Font'
	$formSAPEmptyConnectionLi.ClientSize = '305, 348'
	$formSAPEmptyConnectionLi.FormBorderStyle = 'FixedDialog'
	$formSAPEmptyConnectionLi.Name = 'formSAPEmptyConnectionLi'
	$formSAPEmptyConnectionLi.Text = 'SAP Empty Connection List'
	$formSAPEmptyConnectionLi.add_Load($formSAPEmptyConnectionLi_Load)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 326'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '305, 22'
	$statusbar1.TabIndex = 10
	#
	# buttonConfirmZdriveAccess
	#
	$buttonConfirmZdriveAccess.Enabled = $False
	$buttonConfirmZdriveAccess.Location = '86, 217'
	$buttonConfirmZdriveAccess.Name = 'buttonConfirmZdriveAccess'
	$buttonConfirmZdriveAccess.Size = '142, 50'
	$buttonConfirmZdriveAccess.TabIndex = 9
	$buttonConfirmZdriveAccess.Text = 'Confirm Z-drive access'
	$buttonConfirmZdriveAccess.UseCompatibleTextRendering = $True
	$buttonConfirmZdriveAccess.UseVisualStyleBackColor = $True
	$buttonConfirmZdriveAccess.add_Click($buttonConfirmZdriveAccess_Click)
	#
	# labelPCNo
	#
	$labelPCNo.AutoSize = $True
	$labelPCNo.Location = '73, 115'
	$labelPCNo.Name = 'labelPCNo'
	$labelPCNo.Size = '44, 17'
	$labelPCNo.TabIndex = 8
	$labelPCNo.Text = 'PC No.:'
	$labelPCNo.UseCompatibleTextRendering = $True
	#
	# textboxPCNumber
	#
	$textboxPCNumber.Location = '128, 112'
	$textboxPCNumber.Name = 'textboxPCNumber'
	$textboxPCNumber.Size = '100, 20'
	$textboxPCNumber.TabIndex = 7
	$textboxPCNumber.add_TextChanged($textboxPCNumber_TextChanged)
	#
	# labelPathToCopyFiles
	#
	$labelPathToCopyFiles.AutoSize = $True
	$labelPathToCopyFiles.Location = '28, 161'
	$labelPathToCopyFiles.Name = 'labelPathToCopyFiles'
	$labelPathToCopyFiles.Size = '93, 17'
	$labelPathToCopyFiles.TabIndex = 6
	$labelPathToCopyFiles.Text = 'Path to copy files:'
	$labelPathToCopyFiles.UseCompatibleTextRendering = $True
	$labelPathToCopyFiles.add_Click($labelPathToCopyFiles_Click)
	#
	# textboxPathToFiles
	#
	$textboxPathToFiles.Location = '28, 181'
	$textboxPathToFiles.Name = 'textboxPathToFiles'
	$textboxPathToFiles.ReadOnly = $True
	$textboxPathToFiles.Size = '268, 20'
	$textboxPathToFiles.TabIndex = 5
	$textboxPathToFiles.add_TextChanged($textboxPathToFiles_TextChanged)
	#
	# checkboxLocalPC
	#
	$checkboxLocalPC.Location = '168, 68'
	$checkboxLocalPC.Name = 'checkboxLocalPC'
	$checkboxLocalPC.Size = '104, 24'
	$checkboxLocalPC.TabIndex = 4
	$checkboxLocalPC.Text = 'Local PC'
	$checkboxLocalPC.UseCompatibleTextRendering = $True
	$checkboxLocalPC.UseVisualStyleBackColor = $True
	$checkboxLocalPC.add_CheckedChanged($checkboxLocalPC_CheckedChanged)
	#
	# checkboxCitrix
	#
	$checkboxCitrix.Location = '58, 68'
	$checkboxCitrix.Name = 'checkboxCitrix'
	$checkboxCitrix.Size = '104, 24'
	$checkboxCitrix.TabIndex = 3
	$checkboxCitrix.Text = 'Citrix'
	$checkboxCitrix.UseCompatibleTextRendering = $True
	$checkboxCitrix.UseVisualStyleBackColor = $True
	$checkboxCitrix.add_CheckedChanged($checkboxCitrix_CheckedChanged)
	#
	# textboxUsername
	#
	$textboxUsername.Location = '196, 25'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '100, 20'
	$textboxUsername.TabIndex = 2
	$textboxUsername.add_TextChanged($textboxUsername_TextChanged)
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Font = 'Microsoft Sans Serif, 13pt'
	$labelUsername.Location = '23, 23'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '94, 25'
	$labelUsername.TabIndex = 1
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# buttonFindSAPFolderPath
	#
	$buttonFindSAPFolderPath.Location = '28, 273'
	$buttonFindSAPFolderPath.Name = 'buttonFindSAPFolderPath'
	$buttonFindSAPFolderPath.Size = '122, 47'
	$buttonFindSAPFolderPath.TabIndex = 0
	$buttonFindSAPFolderPath.Text = 'Find SAP Folder Path'
	$buttonFindSAPFolderPath.UseCompatibleTextRendering = $True
	$buttonFindSAPFolderPath.UseVisualStyleBackColor = $True
	$buttonFindSAPFolderPath.add_Click($buttonFindSAPFolderPath_Click)
	#
	# buttonCopyFiles
	#
	$buttonCopyFiles.Location = '176, 273'
	$buttonCopyFiles.Name = 'buttonCopyFiles'
	$buttonCopyFiles.Size = '117, 47'
	$buttonCopyFiles.TabIndex = 0
	$buttonCopyFiles.Text = 'Copy files'
	$buttonCopyFiles.UseCompatibleTextRendering = $True
	$buttonCopyFiles.UseVisualStyleBackColor = $True
	$buttonCopyFiles.add_Click($buttonCopyFiles_Click)
	$formSAPEmptyConnectionLi.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSAPEmptyConnectionLi.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSAPEmptyConnectionLi.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSAPEmptyConnectionLi.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSAPEmptyConnectionLi.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSAPEmptyConnectionLi.ShowDialog()

}
#endregion Source: SAP Empty Connection List.psf

#region Source: MassCreateContacts.psf
function Show-MassCreateContacts_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MassCrateContactsForm = New-Object 'System.Windows.Forms.Form'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$buttonLoadUsers = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$labelMemberOf = New-Object 'System.Windows.Forms.Label'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$MemberOfTextBox = New-Object 'System.Windows.Forms.TextBox'
	$buttonCreateContacts = New-Object 'System.Windows.Forms.Button'
	$ContactTypeComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$labelContactType = New-Object 'System.Windows.Forms.Label'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function Create-SMS-Contact
	{
		param (
			[string]$PhoneNr,
			[string]$MemberOfGroup
		)
		
		$EsmsEmailAddress = $PhoneNr + "@esms.nu"
		$EsmsAlias = $PhoneNr + ".esms.nu"
		
		if ((Check-ContactAD -Email $EsmsEmailAddress) -eq $false)
		{
			#User does not exist
			New-MailContact -ExternalEmailAddress "SMTP:$EsmsEmailAddress" -Name $EsmsAlias -Alias $EsmsAlias -LastName $PhoneNr -OrganizationalUnit $Contacts_defaultOu -DomainController $DomainController
			
			#Wait until the contact is found.
			do
			{
				$MailContactTest = Get-MailContact -Identity $EsmsAlias -DomainController $DomainController
				Start-Sleep 1
				$i++
				if ($i -gt 59)
				{
					Add-Log -body "SMS Contacts - Failed to create mailcontact $EsmsAlias within 1minute (mass creation)"
				}
			}
			while ($MailContactTest -eq $null -and $i -lt 60)
			
			$ContactDn = Get-FullDNContacts -Email $EsmsEmailAddress
			Set-MailContact -HiddenFromAddressListsEnabled $true -EmailAddressPolicyEnabled $false -EmailAddresses "SMTP:$EsmsEmailAddress" -Identity $ContactDn -DomainController $DomainController
			Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
			Add-Log -body "SMS Contacts - Created contact $ContactDn"
		}
		
		else
		{
			#Contact already exists
			Add-Log -body "SMS Contact - Contact $EsmsEmailAddress already exists"
			$ContactDn = Get-FullDNContacts -Email $EsmsEmailAddress
			if ((Get-DistributionGroupMember -Identity $MemberOfGroup | where { $_.Name -eq "$EsmsAlias" }) -eq $null)
			{
				Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
				Add-Log -body "SMS Contacts - Contact added to group. $ContactDn"
			}
		}
		
	}
	
	function Create-External-Contact
	{
		param (
			[string]$ExternalAddress,
			[string]$MemberOfGroup
		)
		
		$EmailAddress = $ExternalAddress
		$Alias = $EmailAddress.Replace("@", ".")
		$DisplayName = ($EmailAddress.Split("@"))[0]
		
		if ((Check-ContactAD -Email $EmailAddress) -eq $false)
		{
			#User does not exist
			New-MailContact -ExternalEmailAddress "SMTP:$EmailAddress" -Name $Alias -Alias $Alias -LastName $DisplayName -OrganizationalUnit $Contacts_defaultOu -DomainController $DomainController
			
			#Wait until the contact is found.
			do
			{
				$MailContactTest = Get-MailContact -Identity $Alias -DomainController $DomainController
				Start-Sleep 1
				$i++
				if ($i -gt 59)
				{
					Add-Log -body "SMS Contacts - Failed to create mailcontact $EsmsAlias within 1minute (mass creation)"
				}
			}
			
			while ($MailContactTest -eq $null -and $i -lt 60)
			
			$ContactDn = Get-FullDNContacts -Email $EmailAddress
			
			Set-MailContact -HiddenFromAddressListsEnabled $true -EmailAddressPolicyEnabled $false -Identity $ContactDn -EmailAddresses "SMTP:$EmailAddress" -DomainController $DomainController
			Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
			Add-Log -body "External Contacts - Created contact $ContactDn"
		}
		
		else
		{
			#Contact already exists
			$ContactDn = Get-FullDNContacts -Email $EmailAddress
			if ((Get-DistributionGroupMember -Identity $MemberOfGroup | where { $_.Name -eq "$Alias" }) -eq $null)
			{
				Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
				Add-Log -body "External Contacts - Contact added to group. $ContactDn"
			}
		}
		
	}
	
	$formCreateContacts_Load = {
		#TODO: Initialize Form Controls here
		$ContactTypeComboBox.SelectedIndex = 0
	}
	
	$ContactTypeComboBox_SelectedIndexChanged = {
		#TODO: Place custom script here
		if ($ContactTypeComboBox.Text -eq "SMS Contacts")
		{
			$listbox1.Items.Clear()
		}
		if ($ContactTypeComboBox.Text -eq "External Address")
		{
			$listbox1.Items.Clear()
		}
	}
	
	$buttonAdd_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which group do you want to add the user to?", "Group", "")
		$UserToAdd = Get-FullDNDistributionGroups -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$MemberOfTextBox.Text = $UserToAdd
		}
	}
	
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$MassCrateContactsForm.Close()
	}
	
	$MassCrateContactsForm_Load = {
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Load-ListBox
	{
		<#
			.SYNOPSIS
				This functions helps you load items into a ListBox or CheckedListBox.
		
			.DESCRIPTION
				Use this function to dynamically load items into the ListBox control.
		
			.PARAMETER  ListBox
				The ListBox control you want to add items to.
		
			.PARAMETER  Items
				The object or objects you wish to load into the ListBox's Items collection.
		
			.PARAMETER  DisplayMember
				Indicates the property to display for the items in this control.
			
			.PARAMETER  Append
				Adds the item(s) to the ListBox without clearing the Items collection.
			
			.EXAMPLE
				Load-ListBox $ListBox1 "Red", "White", "Blue"
			
			.EXAMPLE
				Load-ListBox $listBox1 "Red" -Append
				Load-ListBox $listBox1 "White" -Append
				Load-ListBox $listBox1 "Blue" -Append
			
			.EXAMPLE
				Load-ListBox $listBox1 (Get-Process) "ProcessName"
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Load-ComboBox
	{
		<#
			.SYNOPSIS
				This functions helps you load items into a ComboBox.
		
			.DESCRIPTION
				Use this function to dynamically load items into the ComboBox control.
		
			.PARAMETER  ComboBox
				The ComboBox control you want to add items to.
		
			.PARAMETER  Items
				The object or objects you wish to load into the ComboBox's Items collection.
		
			.PARAMETER  DisplayMember
				Indicates the property to display for the items in this control.
			
			.PARAMETER  Append
				Adds the item(s) to the ComboBox without clearing the Items collection.
			
			.EXAMPLE
				Load-ComboBox $combobox1 "Red", "White", "Blue"
			
			.EXAMPLE
				Load-ComboBox $combobox1 "Red" -Append
				Load-ComboBox $combobox1 "White" -Append
				Load-ComboBox $combobox1 "Blue" -Append
			
			.EXAMPLE
				Load-ComboBox $combobox1 (Get-Process) "ProcessName"
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$listbox1_SelectedIndexChanged = {
		#TODO: Place custom script here
		
	}
	
	$buttonLoadUsers_Click = {
		#TODO: Place custom script here
		$openfiledialog1.ShowDialog()
		If ($ContactTypeComboBox.Text -eq "External address")
		{
			Get-Content -Path $openfiledialog1.FileName | Foreach { If (Validate-IsEmail -Email $_) { $listbox1.Items.Add($_) } }
		}
		elseif ($ContactTypeComboBox.Text -eq "SMS Contacts")
		{
			Get-Content -Path $openfiledialog1.FileName | Foreach { If ($_ -match "^[0-9+]*$") { $listbox1.Items.Add($_) } }
			
		}
	}
	
	$openfiledialog1_FileOk = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$buttonCreateContacts_Click = {
		#TODO: Place custom script here
		#TODO: Place custom script here
		if ($ContactTypeComboBox.Text -eq "SMS Contacts")
		{
			$MemberOfGroup = $MemberOfTextBox.Text
			if ($MemberOfGroup -ne "")
			{
				foreach ($phonenr in $listbox1.Items)
				{
					Create-SMS-Contact -MemberOfGroup $MemberOfGroup -PhoneNr $PhoneNr
				}
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("External emails have been added to mailgroup", "Success")
				
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("One of the fields is empty! You must fill in both to create a contact", "Error")
			}
		}
		elseif ($ContactTypeComboBox.Text -eq "External Address")
		{
			$MemberOfGroup = $MemberOfTextBox.Text
			if ($MemberOfGroup -ne "")
			{
				foreach ($mail in $listbox1.Items)
				{
					Create-External-Contact -ExternalAddress $mail -MemberOfGroup $MemberOfGroup
				}
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("External emails have been added to mailgroup", "Success")
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("One of the fields is empty! You must fill in both to create a contact", "Error")
			}
		}
		else
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Chose a contact type!", "Error")
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MassCrateContactsForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MassCreateContacts_listbox1 = $listbox1.SelectedItems
		$script:MassCreateContacts_MemberOfTextBox = $MemberOfTextBox.Text
		$script:MassCreateContacts_ContactTypeComboBox = $ContactTypeComboBox.Text
		$script:MassCreateContacts_ContactTypeComboBox_SelectedItem = $ContactTypeComboBox.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listbox1.remove_SelectedIndexChanged($listbox1_SelectedIndexChanged)
			$buttonLoadUsers.remove_Click($buttonLoadUsers_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonAdd.remove_Click($buttonAdd_Click)
			$buttonCreateContacts.remove_Click($buttonCreateContacts_Click)
			$ContactTypeComboBox.remove_SelectedIndexChanged($ContactTypeComboBox_SelectedIndexChanged)
			$MassCrateContactsForm.remove_Load($MassCrateContactsForm_Load)
			$openfiledialog1.remove_FileOk($openfiledialog1_FileOk)
			$MassCrateContactsForm.remove_Load($Form_StateCorrection_Load)
			$MassCrateContactsForm.remove_Closing($Form_StoreValues_Closing)
			$MassCrateContactsForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MassCrateContactsForm.SuspendLayout()
	#
	# MassCrateContactsForm
	#
	$MassCrateContactsForm.Controls.Add($listbox1)
	$MassCrateContactsForm.Controls.Add($buttonLoadUsers)
	$MassCrateContactsForm.Controls.Add($buttonExit)
	$MassCrateContactsForm.Controls.Add($labelMemberOf)
	$MassCrateContactsForm.Controls.Add($buttonAdd)
	$MassCrateContactsForm.Controls.Add($MemberOfTextBox)
	$MassCrateContactsForm.Controls.Add($buttonCreateContacts)
	$MassCrateContactsForm.Controls.Add($ContactTypeComboBox)
	$MassCrateContactsForm.Controls.Add($labelContactType)
	$MassCrateContactsForm.AutoScaleDimensions = '6, 13'
	$MassCrateContactsForm.AutoScaleMode = 'Font'
	$MassCrateContactsForm.ClientSize = '292, 413'
	$MassCrateContactsForm.FormBorderStyle = 'FixedDialog'
	$MassCrateContactsForm.Name = 'MassCrateContactsForm'
	$MassCrateContactsForm.Text = 'Masscreate contacts'
	$MassCrateContactsForm.add_Load($MassCrateContactsForm_Load)
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '10, 87'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '270, 199'
	$listbox1.TabIndex = 22
	$listbox1.add_SelectedIndexChanged($listbox1_SelectedIndexChanged)
	#
	# buttonLoadUsers
	#
	$buttonLoadUsers.Location = '205, 296'
	$buttonLoadUsers.Name = 'buttonLoadUsers'
	$buttonLoadUsers.Size = '75, 23'
	$buttonLoadUsers.TabIndex = 21
	$buttonLoadUsers.Text = 'Load users'
	$buttonLoadUsers.UseCompatibleTextRendering = $True
	$buttonLoadUsers.UseVisualStyleBackColor = $True
	$buttonLoadUsers.add_Click($buttonLoadUsers_Click)
	#
	# buttonExit
	#
	$buttonExit.Location = '5, 378'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 19
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# labelMemberOf
	#
	$labelMemberOf.Location = '10, 32'
	$labelMemberOf.Name = 'labelMemberOf'
	$labelMemberOf.Size = '100, 23'
	$labelMemberOf.TabIndex = 20
	$labelMemberOf.Text = 'Member of:'
	$labelMemberOf.UseCompatibleTextRendering = $True
	#
	# buttonAdd
	#
	$buttonAdd.Location = '241, 58'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '41, 23'
	$buttonAdd.TabIndex = 17
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# MemberOfTextBox
	#
	$MemberOfTextBox.Location = '116, 32'
	$MemberOfTextBox.Name = 'MemberOfTextBox'
	$MemberOfTextBox.ReadOnly = $True
	$MemberOfTextBox.Size = '166, 20'
	$MemberOfTextBox.TabIndex = 15
	#
	# buttonCreateContacts
	#
	$buttonCreateContacts.Location = '186, 378'
	$buttonCreateContacts.Name = 'buttonCreateContacts'
	$buttonCreateContacts.Size = '94, 23'
	$buttonCreateContacts.TabIndex = 18
	$buttonCreateContacts.Text = 'Create Contacts'
	$buttonCreateContacts.UseCompatibleTextRendering = $True
	$buttonCreateContacts.UseVisualStyleBackColor = $True
	$buttonCreateContacts.add_Click($buttonCreateContacts_Click)
	#
	# ContactTypeComboBox
	#
	$ContactTypeComboBox.DisplayMember = 'SMS Contacts'
	$ContactTypeComboBox.DropDownStyle = 'DropDownList'
	$ContactTypeComboBox.FormattingEnabled = $True
	[void]$ContactTypeComboBox.Items.Add('External Address')
	[void]$ContactTypeComboBox.Items.Add('SMS Contacts')
	$ContactTypeComboBox.Location = '116, 11'
	$ContactTypeComboBox.Name = 'ContactTypeComboBox'
	$ContactTypeComboBox.Size = '166, 21'
	$ContactTypeComboBox.TabIndex = 11
	$ContactTypeComboBox.add_SelectedIndexChanged($ContactTypeComboBox_SelectedIndexChanged)
	#
	# labelContactType
	#
	$labelContactType.Location = '5, 9'
	$labelContactType.Name = 'labelContactType'
	$labelContactType.Size = '80, 23'
	$labelContactType.TabIndex = 10
	$labelContactType.Text = 'Contact Type:'
	$labelContactType.UseCompatibleTextRendering = $True
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$openfiledialog1.add_FileOk($openfiledialog1_FileOk)
	$MassCrateContactsForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MassCrateContactsForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MassCrateContactsForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MassCrateContactsForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MassCrateContactsForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MassCrateContactsForm.ShowDialog()

}
#endregion Source: MassCreateContacts.psf

#region Source: AddOwnersDistributionList.psf
function Show-AddOwnersDistributionList_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$AddOwnersDistributionList = New-Object 'System.Windows.Forms.Form'
	$labelOwners = New-Object 'System.Windows.Forms.Label'
	$buttonAddOwners = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$ButtonLoadFromFileOwner = New-Object 'System.Windows.Forms.Button'
	$buttonRemoveOwner = New-Object 'System.Windows.Forms.Button'
	$buttonAddOwner = New-Object 'System.Windows.Forms.Button'
	$buttonLoadFromFileList = New-Object 'System.Windows.Forms.Button'
	$buttonRemoveList = New-Object 'System.Windows.Forms.Button'
	$buttonAddList = New-Object 'System.Windows.Forms.Button'
	$DistributionListsLabel = New-Object 'System.Windows.Forms.Label'
	$OwnerListBox = New-Object 'System.Windows.Forms.ListBox'
	$DistributionListBox = New-Object 'System.Windows.Forms.ListBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$AddOwnersDistributionList_Load = {
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Load-ListBox
	{
		<#
			.SYNOPSIS
				This functions helps you load items into a ListBox or CheckedListBox.
		
			.DESCRIPTION
				Use this function to dynamically load items into the ListBox control.
		
			.PARAMETER  ListBox
				The ListBox control you want to add items to.
		
			.PARAMETER  Items
				The object or objects you wish to load into the ListBox's Items collection.
		
			.PARAMETER  DisplayMember
				Indicates the property to display for the items in this control.
			
			.PARAMETER  Append
				Adds the item(s) to the ListBox without clearing the Items collection.
			
			.EXAMPLE
				Load-ListBox $ListBox1 "Red", "White", "Blue"
			
			.EXAMPLE
				Load-ListBox $listBox1 "Red" -Append
				Load-ListBox $listBox1 "White" -Append
				Load-ListBox $listBox1 "Blue" -Append
			
			.EXAMPLE
				Load-ListBox $listBox1 (Get-Process) "ProcessName"
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	
	
	$buttonAddList_Click = {
		#TODO: Place custom script here
		$ListAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which list do you want to add?", "Distribution List", "")
		$ListToAdd = Get-FullDNDistributionGroups -username $ListAdd
		if ($ListToAdd -ne $null)
		{
			$DistributionListBox.Items.Add("$ListToAdd")
		}
	}
	
	$buttonRemoveList_Click = {
		#TODO: Place custom script here
		$DistributionListBox.Items.Remove($DistributionListBox.SelectedItem)
	}
	
	$buttonAddOwner_Click = {
		#TODO: Place custom script here
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which user do you want to add?", "Owner", "")
		$UserToAdd = Get-FullDN -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$OwnerListBox.Items.Add("$UserToAdd")
		}
	}
	
	$buttonRemoveOwner_Click = {
		#TODO: Place custom script here
		$OwnerListBox.Items.Remove($OwnerListBox.SelectedItem)
	}
	
	$buttonLoadFromFileList_Click = {
		#TODO: Place custom script here
		$Filepath = Get-FileName
		if ($Filepath -ne $null)
		{
			$Lists = Get-Content -Path $Filepath
			
			foreach ($List in $Lists)
			{
				$ListToAdd = Get-FullDNDistributionGroups -username $List
				if ($ListToAdd -ne $null)
				{
					$DistributionListBox.Items.Add("$ListToAdd")
				}
			}
		}
		
	}
	
	$ButtonLoadFromFileOwner_Click = {
		#TODO: Place custom script here
		$Filepath = Get-FileName
		if ($Filepath -ne $null)
		{
			$Users = Get-Content -Path $Filepath
			
			foreach ($User in $Users)
			{
				$UserToAdd = Get-FullDN -username $User
				if ($UserToAdd -ne $null)
				{
					$OwnerListBox.Items.Add("$UserToAdd")
				}
				
			}
		}
	}
	
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$AddOwnersDistributionList.Close()
	}
	
	$buttonAddOwners_Click = {
		#TODO: Place custom script here
		$Owners = @()
		$i = 0
		$MaxCount = $($OwnerListBox.Items).Count
		foreach ($Item in $OwnerListBox.Items)
		{
			$Owners += $Item
		}
		
		foreach ($DistributionList in $DistributionListBox.Items)
		{
			try
			{
				Set-DistributionGroup -BypassSecurityGroupManagerCheck -ManagedBy $Owners -Identity $DistributionList
			}
			catch
			{
				[void][System.Windows.Forms.MessageBox]::Show("Failed to set owners on $DistributionList`n$Error[0]", "Error")
			}
		}
		
		[void][System.Windows.Forms.MessageBox]::Show("Owners has been setup.", "Success")
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$AddOwnersDistributionList.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddOwnersDistributionList_OwnerListBox = $OwnerListBox.SelectedItems
		$script:AddOwnersDistributionList_DistributionListBox = $DistributionListBox.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAddOwners.remove_Click($buttonAddOwners_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$ButtonLoadFromFileOwner.remove_Click($ButtonLoadFromFileOwner_Click)
			$buttonRemoveOwner.remove_Click($buttonRemoveOwner_Click)
			$buttonAddOwner.remove_Click($buttonAddOwner_Click)
			$buttonLoadFromFileList.remove_Click($buttonLoadFromFileList_Click)
			$buttonRemoveList.remove_Click($buttonRemoveList_Click)
			$buttonAddList.remove_Click($buttonAddList_Click)
			$AddOwnersDistributionList.remove_Load($AddOwnersDistributionList_Load)
			$AddOwnersDistributionList.remove_Load($Form_StateCorrection_Load)
			$AddOwnersDistributionList.remove_Closing($Form_StoreValues_Closing)
			$AddOwnersDistributionList.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$AddOwnersDistributionList.SuspendLayout()
	#
	# AddOwnersDistributionList
	#
	$AddOwnersDistributionList.Controls.Add($labelOwners)
	$AddOwnersDistributionList.Controls.Add($buttonAddOwners)
	$AddOwnersDistributionList.Controls.Add($buttonExit)
	$AddOwnersDistributionList.Controls.Add($ButtonLoadFromFileOwner)
	$AddOwnersDistributionList.Controls.Add($buttonRemoveOwner)
	$AddOwnersDistributionList.Controls.Add($buttonAddOwner)
	$AddOwnersDistributionList.Controls.Add($buttonLoadFromFileList)
	$AddOwnersDistributionList.Controls.Add($buttonRemoveList)
	$AddOwnersDistributionList.Controls.Add($buttonAddList)
	$AddOwnersDistributionList.Controls.Add($DistributionListsLabel)
	$AddOwnersDistributionList.Controls.Add($OwnerListBox)
	$AddOwnersDistributionList.Controls.Add($DistributionListBox)
	$AddOwnersDistributionList.AutoScaleDimensions = '6, 13'
	$AddOwnersDistributionList.AutoScaleMode = 'Font'
	$AddOwnersDistributionList.ClientSize = '292, 441'
	$AddOwnersDistributionList.FormBorderStyle = 'FixedSingle'
	$AddOwnersDistributionList.Name = 'AddOwnersDistributionList'
	$AddOwnersDistributionList.StartPosition = 'CenterParent'
	$AddOwnersDistributionList.Text = 'Add Owners to Distribution Lists'
	$AddOwnersDistributionList.add_Load($AddOwnersDistributionList_Load)
	#
	# labelOwners
	#
	$labelOwners.Location = '12, 183'
	$labelOwners.Name = 'labelOwners'
	$labelOwners.Size = '100, 23'
	$labelOwners.TabIndex = 11
	$labelOwners.Text = 'Owners:'
	$labelOwners.UseCompatibleTextRendering = $True
	#
	# buttonAddOwners
	#
	$buttonAddOwners.Location = '205, 406'
	$buttonAddOwners.Name = 'buttonAddOwners'
	$buttonAddOwners.Size = '75, 23'
	$buttonAddOwners.TabIndex = 10
	$buttonAddOwners.Text = 'Add owners'
	$buttonAddOwners.UseCompatibleTextRendering = $True
	$buttonAddOwners.UseVisualStyleBackColor = $True
	$buttonAddOwners.add_Click($buttonAddOwners_Click)
	#
	# buttonExit
	#
	$buttonExit.Location = '12, 406'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 9
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# ButtonLoadFromFileOwner
	#
	$ButtonLoadFromFileOwner.Location = '12, 310'
	$ButtonLoadFromFileOwner.Name = 'ButtonLoadFromFileOwner'
	$ButtonLoadFromFileOwner.Size = '75, 34'
	$ButtonLoadFromFileOwner.TabIndex = 8
	$ButtonLoadFromFileOwner.Text = 'Load from file'
	$ButtonLoadFromFileOwner.UseCompatibleTextRendering = $True
	$ButtonLoadFromFileOwner.UseVisualStyleBackColor = $True
	$ButtonLoadFromFileOwner.add_Click($ButtonLoadFromFileOwner_Click)
	#
	# buttonRemoveOwner
	#
	$buttonRemoveOwner.Location = '222, 339'
	$buttonRemoveOwner.Name = 'buttonRemoveOwner'
	$buttonRemoveOwner.Size = '58, 23'
	$buttonRemoveOwner.TabIndex = 7
	$buttonRemoveOwner.Text = 'Remove'
	$buttonRemoveOwner.UseCompatibleTextRendering = $True
	$buttonRemoveOwner.UseVisualStyleBackColor = $True
	$buttonRemoveOwner.add_Click($buttonRemoveOwner_Click)
	#
	# buttonAddOwner
	#
	$buttonAddOwner.Location = '222, 310'
	$buttonAddOwner.Name = 'buttonAddOwner'
	$buttonAddOwner.Size = '58, 23'
	$buttonAddOwner.TabIndex = 6
	$buttonAddOwner.Text = 'Add'
	$buttonAddOwner.UseCompatibleTextRendering = $True
	$buttonAddOwner.UseVisualStyleBackColor = $True
	$buttonAddOwner.add_Click($buttonAddOwner_Click)
	#
	# buttonLoadFromFileList
	#
	$buttonLoadFromFileList.Location = '12, 138'
	$buttonLoadFromFileList.Name = 'buttonLoadFromFileList'
	$buttonLoadFromFileList.Size = '75, 34'
	$buttonLoadFromFileList.TabIndex = 5
	$buttonLoadFromFileList.Text = 'Load from file'
	$buttonLoadFromFileList.UseCompatibleTextRendering = $True
	$buttonLoadFromFileList.UseVisualStyleBackColor = $True
	$buttonLoadFromFileList.add_Click($buttonLoadFromFileList_Click)
	#
	# buttonRemoveList
	#
	$buttonRemoveList.Location = '222, 167'
	$buttonRemoveList.Name = 'buttonRemoveList'
	$buttonRemoveList.Size = '58, 23'
	$buttonRemoveList.TabIndex = 4
	$buttonRemoveList.Text = 'Remove'
	$buttonRemoveList.UseCompatibleTextRendering = $True
	$buttonRemoveList.UseVisualStyleBackColor = $True
	$buttonRemoveList.add_Click($buttonRemoveList_Click)
	#
	# buttonAddList
	#
	$buttonAddList.Location = '222, 138'
	$buttonAddList.Name = 'buttonAddList'
	$buttonAddList.Size = '58, 23'
	$buttonAddList.TabIndex = 3
	$buttonAddList.Text = 'Add'
	$buttonAddList.UseCompatibleTextRendering = $True
	$buttonAddList.UseVisualStyleBackColor = $True
	$buttonAddList.add_Click($buttonAddList_Click)
	#
	# DistributionListsLabel
	#
	$DistributionListsLabel.Location = '12, 11'
	$DistributionListsLabel.Name = 'DistributionListsLabel'
	$DistributionListsLabel.Size = '100, 23'
	$DistributionListsLabel.TabIndex = 2
	$DistributionListsLabel.Text = 'Distribution Lists:'
	$DistributionListsLabel.UseCompatibleTextRendering = $True
	#
	# OwnerListBox
	#
	$OwnerListBox.FormattingEnabled = $True
	$OwnerListBox.Location = '12, 209'
	$OwnerListBox.Name = 'OwnerListBox'
	$OwnerListBox.Size = '268, 95'
	$OwnerListBox.TabIndex = 1
	#
	# DistributionListBox
	#
	$DistributionListBox.FormattingEnabled = $True
	$DistributionListBox.Location = '12, 37'
	$DistributionListBox.Name = 'DistributionListBox'
	$DistributionListBox.Size = '268, 95'
	$DistributionListBox.TabIndex = 0
	$AddOwnersDistributionList.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $AddOwnersDistributionList.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$AddOwnersDistributionList.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$AddOwnersDistributionList.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$AddOwnersDistributionList.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $AddOwnersDistributionList.ShowDialog()

}
#endregion Source: AddOwnersDistributionList.psf

#region Source: Calendar.psf
function Show-Calendar_psf
{

param (
	[string]$username,
	[string]$state
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formOutofofficeMessage = New-Object 'System.Windows.Forms.Form'
	$buttonRemoveOutofOfficeMes = New-Object 'System.Windows.Forms.Button'
	$checkboxNoEndDate = New-Object 'System.Windows.Forms.CheckBox'
	$buttonSetOutofofficeMessag = New-Object 'System.Windows.Forms.Button'
	$labelOutofofficeForUserus = New-Object 'System.Windows.Forms.Label'
	$labelExternalMessage = New-Object 'System.Windows.Forms.Label'
	$externalMsg = New-Object 'System.Windows.Forms.TextBox'
	$labelInternalMessage = New-Object 'System.Windows.Forms.Label'
	$internalMsg = New-Object 'System.Windows.Forms.TextBox'
	$labelEndDate = New-Object 'System.Windows.Forms.Label'
	$labelStartDate = New-Object 'System.Windows.Forms.Label'
	$endDate = New-Object 'System.Windows.Forms.DateTimePicker'
	$startDate = New-Object 'System.Windows.Forms.DateTimePicker'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formOutofofficeMessage_Load = {
		#TODO: Initialize Form Controls here
		if ($state -ne "Disabled")
		{
			$buttonRemoveOutofOfficeMes.Visible = $true
			$buttonSetOutofofficeMessag.Visible = $false
			$internalMsg.ReadOnly = $true
			$externalMsg.ReadOnly = $true
			$startDate.Visible = $false
			$endDate.Visible = $false
			$checkboxNoEndDate.Visible = $false
		}
	}
	
	$buttonSetOutofofficeMessag_Click = {
		#TODO: Place custom script here
		if ($checkboxNoEndDate.Checked -eq $true)
		{
			Set-MailboxAutoReplyConfiguration -Identity $username -AutoReplyState Enabled -InternalMessage $internalMsg.Text -ExternalMessage $externalMsg.Text
			$check_success = Get-MailBoxAutoReplyConfiguration -Identity $username
			if ($check_success.AutoReplyState -eq "Enabled")
			{
				[System.Windows.Forms.MessageBox]::Show("Out of office message has been set!")
				$formOutofofficeMessage.Close()
			}
			else
			{
				[System.Windows.Forms.MessageBox]::Show("Something failed! please doublecheck the values set.")
			}
		}
		else
		{
			$startDateString = $($startDate.Value).ToString()
			$startDate_value = $startDateString.TrimEnd("AM")
			$endDateString = $($endDate.Value).ToString()
			$endDate_value = $endDateString.TrimEnd("AM")
			#do not need handler for PM, since the start/end date always ends at 12:00 AM
			Set-MailboxAutoReplyConfiguration -Identity $username -AutoReplyState Scheduled -StartTime $startDate_value -EndTime $endDate_Value -InternalMessage $internalMsg.Text -ExternalMessage $externalMsg.Text
			$check_success = Get-MailBoxAutoReplyConfiguration -Identity $username
			if ($check_success.AutoReplyState -eq "Scheduled")
			{
				[System.Windows.Forms.MessageBox]::Show("Out of office message has been set!")
				$formOutofofficeMessage.Close()
				$
			}
			else
			{
				[System.Windows.Forms.MessageBox]::Show("Something failed! please doublecheck the values set.")
			}
		}
		
	}
	
	$checkboxNoEndDate_CheckedChanged = {
		#TODO: Place custom script here
		if ($checkboxNoEndDate.Checked -eq $true)
		{
			$startDate.Visible = $false
			$endDate.Visible = $false
		}
		else
		{
			$startDate.Visible = $true
			$endDate.Visible = $true
		}
	}
	
	$buttonRemoveOutofOfficeMes_Click = {
		#TODO: Place custom script here
		Set-MailboxAutoReplyConfiguration -Identity $username -AutoReplyState Disabled
		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
		[void][System.Windows.Forms.MessageBox]::Show("Out-Of-Office has been disabled for user", "Out-of-Office has been removed")
		$formOutofofficeMessage.Close()
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formOutofofficeMessage.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Calendar_checkboxNoEndDate = $checkboxNoEndDate.Checked
		$script:Calendar_externalMsg = $externalMsg.Text
		$script:Calendar_internalMsg = $internalMsg.Text
		$script:Calendar_endDate = $endDate.Value
		$script:Calendar_startDate = $startDate.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRemoveOutofOfficeMes.remove_Click($buttonRemoveOutofOfficeMes_Click)
			$checkboxNoEndDate.remove_CheckedChanged($checkboxNoEndDate_CheckedChanged)
			$buttonSetOutofofficeMessag.remove_Click($buttonSetOutofofficeMessag_Click)
			$formOutofofficeMessage.remove_Load($formOutofofficeMessage_Load)
			$formOutofofficeMessage.remove_Load($Form_StateCorrection_Load)
			$formOutofofficeMessage.remove_Closing($Form_StoreValues_Closing)
			$formOutofofficeMessage.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formOutofofficeMessage.SuspendLayout()
	#
	# formOutofofficeMessage
	#
	$formOutofofficeMessage.Controls.Add($buttonRemoveOutofOfficeMes)
	$formOutofofficeMessage.Controls.Add($checkboxNoEndDate)
	$formOutofofficeMessage.Controls.Add($buttonSetOutofofficeMessag)
	$formOutofofficeMessage.Controls.Add($labelOutofofficeForUserus)
	$formOutofofficeMessage.Controls.Add($labelExternalMessage)
	$formOutofofficeMessage.Controls.Add($externalMsg)
	$formOutofofficeMessage.Controls.Add($labelInternalMessage)
	$formOutofofficeMessage.Controls.Add($internalMsg)
	$formOutofofficeMessage.Controls.Add($labelEndDate)
	$formOutofofficeMessage.Controls.Add($labelStartDate)
	$formOutofofficeMessage.Controls.Add($endDate)
	$formOutofofficeMessage.Controls.Add($startDate)
	$formOutofofficeMessage.AutoScaleDimensions = '6, 13'
	$formOutofofficeMessage.AutoScaleMode = 'Font'
	$formOutofofficeMessage.ClientSize = '393, 404'
	$formOutofofficeMessage.FormBorderStyle = 'FixedSingle'
	$formOutofofficeMessage.Name = 'formOutofofficeMessage'
	$formOutofofficeMessage.StartPosition = 'CenterParent'
	$formOutofofficeMessage.Text = 'Out-of-office message'
	$formOutofofficeMessage.add_Load($formOutofofficeMessage_Load)
	#
	# buttonRemoveOutofOfficeMes
	#
	$buttonRemoveOutofOfficeMes.Location = '235, 339'
	$buttonRemoveOutofOfficeMes.Name = 'buttonRemoveOutofOfficeMes'
	$buttonRemoveOutofOfficeMes.Size = '99, 43'
	$buttonRemoveOutofOfficeMes.TabIndex = 12
	$buttonRemoveOutofOfficeMes.Text = 'Remove Out-of-Office message'
	$buttonRemoveOutofOfficeMes.UseCompatibleTextRendering = $True
	$buttonRemoveOutofOfficeMes.UseVisualStyleBackColor = $True
	$buttonRemoveOutofOfficeMes.Visible = $False
	$buttonRemoveOutofOfficeMes.add_Click($buttonRemoveOutofOfficeMes_Click)
	#
	# checkboxNoEndDate
	#
	$checkboxNoEndDate.Location = '284, 54'
	$checkboxNoEndDate.Name = 'checkboxNoEndDate'
	$checkboxNoEndDate.Size = '104, 24'
	$checkboxNoEndDate.TabIndex = 11
	$checkboxNoEndDate.Text = 'No end date'
	$checkboxNoEndDate.UseCompatibleTextRendering = $True
	$checkboxNoEndDate.UseVisualStyleBackColor = $True
	$checkboxNoEndDate.add_CheckedChanged($checkboxNoEndDate_CheckedChanged)
	#
	# buttonSetOutofofficeMessag
	#
	$buttonSetOutofofficeMessag.Location = '111, 340'
	$buttonSetOutofofficeMessag.Name = 'buttonSetOutofofficeMessag'
	$buttonSetOutofofficeMessag.Size = '118, 41'
	$buttonSetOutofofficeMessag.TabIndex = 10
	$buttonSetOutofofficeMessag.Text = 'Set out-of-office message'
	$buttonSetOutofofficeMessag.UseCompatibleTextRendering = $True
	$buttonSetOutofofficeMessag.UseVisualStyleBackColor = $True
	$buttonSetOutofofficeMessag.add_Click($buttonSetOutofofficeMessag_Click)
	#
	# labelOutofofficeForUserus
	#
	$labelOutofofficeForUserus.Location = '38, 9'
	$labelOutofofficeForUserus.Name = 'labelOutofofficeForUserus'
	$labelOutofofficeForUserus.Size = '280, 23'
	$labelOutofofficeForUserus.TabIndex = 9
	$labelOutofofficeForUserus.Text = "Out-of-office for user $username is currently $state"
	$labelOutofofficeForUserus.UseCompatibleTextRendering = $True
	#
	# labelExternalMessage
	#
	$labelExternalMessage.Location = '12, 217'
	$labelExternalMessage.Name = 'labelExternalMessage'
	$labelExternalMessage.Size = '100, 20'
	$labelExternalMessage.TabIndex = 8
	$labelExternalMessage.Text = 'External message:'
	$labelExternalMessage.UseCompatibleTextRendering = $True
	#
	# externalMsg
	#
	$externalMsg.Location = '12, 240'
	$externalMsg.Multiline = $True
	$externalMsg.Name = 'externalMsg'
	$externalMsg.Size = '319, 94'
	$externalMsg.TabIndex = 7
	#
	# labelInternalMessage
	#
	$labelInternalMessage.Location = '12, 97'
	$labelInternalMessage.Name = 'labelInternalMessage'
	$labelInternalMessage.Size = '100, 20'
	$labelInternalMessage.TabIndex = 5
	$labelInternalMessage.Text = 'Internal message:'
	$labelInternalMessage.UseCompatibleTextRendering = $True
	#
	# internalMsg
	#
	$internalMsg.Location = '12, 120'
	$internalMsg.Multiline = $True
	$internalMsg.Name = 'internalMsg'
	$internalMsg.Size = '319, 94'
	$internalMsg.TabIndex = 4
	#
	# labelEndDate
	#
	$labelEndDate.Location = '12, 77'
	$labelEndDate.Name = 'labelEndDate'
	$labelEndDate.Size = '60, 23'
	$labelEndDate.TabIndex = 3
	$labelEndDate.Text = 'End date:'
	$labelEndDate.UseCompatibleTextRendering = $True
	#
	# labelStartDate
	#
	$labelStartDate.Location = '12, 54'
	$labelStartDate.Name = 'labelStartDate'
	$labelStartDate.Size = '60, 23'
	$labelStartDate.TabIndex = 2
	$labelStartDate.Text = 'Start date:'
	$labelStartDate.UseCompatibleTextRendering = $True
	#
	# endDate
	#
	$endDate.Location = '78, 74'
	$endDate.Name = 'endDate'
	$endDate.Size = '200, 20'
	$endDate.TabIndex = 1
	$endDate.Value = '2014-01-28'
	#
	# startDate
	#
	$startDate.Location = '78, 48'
	$startDate.Name = 'startDate'
	$startDate.Size = '200, 20'
	$startDate.TabIndex = 0
	$startDate.Value = '2014-01-28'
	$formOutofofficeMessage.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formOutofofficeMessage.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formOutofofficeMessage.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formOutofofficeMessage.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formOutofofficeMessage.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formOutofofficeMessage.ShowDialog()

}
#endregion Source: Calendar.psf

#region Source: CreateMailForwarding.psf
function Show-CreateMailForwarding_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCreateMailforward = New-Object 'System.Windows.Forms.Form'
	$FirstNameTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelFirstName = New-Object 'System.Windows.Forms.Label'
	$LastNameTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelLastName = New-Object 'System.Windows.Forms.Label'
	$labelTargetMailbox = New-Object 'System.Windows.Forms.Label'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$TargetMailboxTextBox = New-Object 'System.Windows.Forms.TextBox'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonCreateMailforward = New-Object 'System.Windows.Forms.Button'
	$ExternalAddressTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelExternalAddress = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function Create-Mailforwarding
	{
		param (
			[string]$FirstName,
			[string]$LastName,
			[string]$targetInbox,
			[string]$ExternalAddress
		)
		
		$Alias = $FirstName + $LastName
		$DisplayName = "$FirstName $LastName"
		
		if ((Check-ContactAD -Email $ExternalAddress) -eq $false -and (Get-Mailbox -Identity $targetInbox -DomainController $DomainController) -ne $null)
		{
			New-MailContact -Alias $Alias -Name $DisplayName -FirstName $FirstName -LastName $LastName -ExternalEmailAddress $ExternalAddress -OrganizationalUnit $Contacts_defaultOu -DomainController $DomainController
			do
			{
				$MailContactTest = Get-MailContact -Identity $Alias -DomainController $DomainController
				Start-Sleep 1
				$i++
				if ($i -gt 119)
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 2 minutes has passed since the object was created but it is still not found", "ERROR")
					return
				}
			}
			while ($MailContactTest -eq $null -and $i -lt 120)
			
			$ExternalContactDn = Get-FullDNContacts -Email $ExternalAddress
			
			Set-MailContact -Identity $ExternalContactDn -HiddenFromAddressListsEnabled $true -EmailAddressPolicyEnabled $false -EmailAddresses "SMTP:$ExternalAddress" -DomainController $DomainController
			Set-Mailbox -Force -ForwardingAddress $ExternalContactDn -Identity $targetInbox -DomainController $DomainController -ErrorVariable +err
			$Errormessage = $err[0].ToString()
			if ($Errormessage -eq $null)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Mail forwarding has been set up", "Success")
				Add-Log "Mail Forwarding - Mailforward created $ExternalContactDn"
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Something went wrong when setting up the mail forwarding!`n$Errormessage", "Error")
				Add-Log "Mail Forwarding - Error when creating mailforward for $ExternalContactDn $Errormessage"
			}
			
		}
		else
		{
			#Contact already exists
			$ContactDn = Get-FullDNContacts -Email $EmailAddress
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			if ([System.Windows.Forms.MessageBox]::Show("The contact already exists! Do you want to try and set up forwarding anyways?", "Error", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
			{
				if (((Get-MailBox -Identity $targetInbox).ForwardingAddress) -eq $null)
				{
					$ExternalContactDn = Get-FullDNContacts -Email $ExternalAddress
					Set-Mailbox -Force -ForwardingAddress $ExternalContactDn -Identity $targetInbox -DomainController $DomainController -ErrorVariable +err
					$Errormessage = $err[0].ToString()
					if ($Errormessage -eq $null)
					{
						#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
						[void][System.Windows.Forms.MessageBox]::Show("Mail forwarding has been set up", "Success")
						Add-Log "Mail Forwarding - Mailforward set up for already existing contact $ExternalContactDn"
					}
					else
					{
						#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
						[void][System.Windows.Forms.MessageBox]::Show("Something went wrong when setting up the mail forwarding!`n$Errormessage", "Error")
						Add-Log "Mail Forwarding - Mailforward failed for already existing contact $ExternalContactDn . $Errormessage"
					}
				}
				else
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("The user already has mailforwarding set up", "Error")
					Add-Log "Mail Forwarding - User already have mailforwarding set up $ExternalContactDn"
				}
			}
			
		}
	}
	
	$formCreateMailforward_Load = {
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonAdd_Click = {
		#TODO: Place custom script here	
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which Inbox do you want to set up mailforwarding for?", "Target Inbox", "")
		$UserToAdd = Get-FullDN -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$TargetMailboxTextBox.Text = $UserToAdd
		}
	}
	
	$buttonCreateMailforward_Click = {
		#TODO: Place custom script here
		$ExternalAddress = $ExternalAddressTextBox.Text
		$FirstName = $FirstNameTextBox.Text
		$LastName = $LastNameTextBox.Text
		$TargetMailbox = $TargetMailboxTextBox.Text
		if ($ExternalAddress -ne $null -and $FirstName -ne $null -and $LastName -ne $null -and $TargetMailbox -ne $null)
		{
			if ($FirstName -notmatch "^[a-zA-Z0-9_ÖöÄäÅåÆæØøÜüÉé -]*$")
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the FirstName", "Error")
				return
			}
			if ($LastName -notmatch "^[a-zA-Z0-9_ÖöÄäÅåÆæØøÜüÉé -]*$")
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the LastName", "Error")
				return
			}
			if ($ExternalAddress -notmatch "^[a-zA-Z0-9_@.-]*$")
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the External Address", "Error")
				return
			}
			
			Create-Mailforwarding -ExternalAddress $ExternalAddress -FirstName $FirstName -LastName $LastName -targetInbox $TargetMailbox
		}
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formCreateMailforward.Close()
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCreateMailforward.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:CreateMailForwarding_FirstNameTextBox = $FirstNameTextBox.Text
		$script:CreateMailForwarding_LastNameTextBox = $LastNameTextBox.Text
		$script:CreateMailForwarding_TargetMailboxTextBox = $TargetMailboxTextBox.Text
		$script:CreateMailForwarding_ExternalAddressTextBox = $ExternalAddressTextBox.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAdd.remove_Click($buttonAdd_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonCreateMailforward.remove_Click($buttonCreateMailforward_Click)
			$formCreateMailforward.remove_Load($formCreateMailforward_Load)
			$formCreateMailforward.remove_Load($Form_StateCorrection_Load)
			$formCreateMailforward.remove_Closing($Form_StoreValues_Closing)
			$formCreateMailforward.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCreateMailforward.SuspendLayout()
	#
	# formCreateMailforward
	#
	$formCreateMailforward.Controls.Add($FirstNameTextBox)
	$formCreateMailforward.Controls.Add($labelFirstName)
	$formCreateMailforward.Controls.Add($LastNameTextBox)
	$formCreateMailforward.Controls.Add($labelLastName)
	$formCreateMailforward.Controls.Add($labelTargetMailbox)
	$formCreateMailforward.Controls.Add($buttonAdd)
	$formCreateMailforward.Controls.Add($TargetMailboxTextBox)
	$formCreateMailforward.Controls.Add($buttonExit)
	$formCreateMailforward.Controls.Add($buttonCreateMailforward)
	$formCreateMailforward.Controls.Add($ExternalAddressTextBox)
	$formCreateMailforward.Controls.Add($labelExternalAddress)
	$formCreateMailforward.AutoScaleDimensions = '6, 13'
	$formCreateMailforward.AutoScaleMode = 'Font'
	$formCreateMailforward.ClientSize = '292, 214'
	$formCreateMailforward.FormBorderStyle = 'FixedDialog'
	$formCreateMailforward.MaximizeBox = $False
	$formCreateMailforward.Name = 'formCreateMailforward'
	$formCreateMailforward.StartPosition = 'CenterParent'
	$formCreateMailforward.Text = 'Create Mailforward'
	$formCreateMailforward.add_Load($formCreateMailforward_Load)
	#
	# FirstNameTextBox
	#
	$FirstNameTextBox.Location = '114, 23'
	$FirstNameTextBox.Name = 'FirstNameTextBox'
	$FirstNameTextBox.Size = '166, 20'
	$FirstNameTextBox.TabIndex = 1
	#
	# labelFirstName
	#
	$labelFirstName.Location = '8, 20'
	$labelFirstName.Name = 'labelFirstName'
	$labelFirstName.Size = '100, 23'
	$labelFirstName.TabIndex = 19
	$labelFirstName.Text = 'First Name:'
	$labelFirstName.UseCompatibleTextRendering = $True
	#
	# LastNameTextBox
	#
	$LastNameTextBox.Location = '114, 49'
	$LastNameTextBox.Name = 'LastNameTextBox'
	$LastNameTextBox.Size = '166, 20'
	$LastNameTextBox.TabIndex = 2
	#
	# labelLastName
	#
	$labelLastName.Location = '8, 46'
	$labelLastName.Name = 'labelLastName'
	$labelLastName.Size = '100, 23'
	$labelLastName.TabIndex = 17
	$labelLastName.Text = 'Last Name:'
	$labelLastName.UseCompatibleTextRendering = $True
	#
	# labelTargetMailbox
	#
	$labelTargetMailbox.Location = '8, 101'
	$labelTargetMailbox.Name = 'labelTargetMailbox'
	$labelTargetMailbox.Size = '100, 23'
	$labelTargetMailbox.TabIndex = 15
	$labelTargetMailbox.Text = 'Target Mailbox:'
	$labelTargetMailbox.UseCompatibleTextRendering = $True
	#
	# buttonAdd
	#
	$buttonAdd.Location = '239, 127'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '41, 23'
	$buttonAdd.TabIndex = 5
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# TargetMailboxTextBox
	#
	$TargetMailboxTextBox.Location = '114, 101'
	$TargetMailboxTextBox.Name = 'TargetMailboxTextBox'
	$TargetMailboxTextBox.ReadOnly = $True
	$TargetMailboxTextBox.Size = '166, 20'
	$TargetMailboxTextBox.TabIndex = 4
	#
	# buttonExit
	#
	$buttonExit.Location = '8, 186'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 7
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonCreateMailforward
	#
	$buttonCreateMailforward.Location = '175, 186'
	$buttonCreateMailforward.Name = 'buttonCreateMailforward'
	$buttonCreateMailforward.Size = '105, 23'
	$buttonCreateMailforward.TabIndex = 6
	$buttonCreateMailforward.Text = 'Create Mailforward'
	$buttonCreateMailforward.UseCompatibleTextRendering = $True
	$buttonCreateMailforward.UseVisualStyleBackColor = $True
	$buttonCreateMailforward.add_Click($buttonCreateMailforward_Click)
	#
	# ExternalAddressTextBox
	#
	$ExternalAddressTextBox.Location = '114, 75'
	$ExternalAddressTextBox.Name = 'ExternalAddressTextBox'
	$ExternalAddressTextBox.Size = '166, 20'
	$ExternalAddressTextBox.TabIndex = 3
	#
	# labelExternalAddress
	#
	$labelExternalAddress.Location = '8, 72'
	$labelExternalAddress.Name = 'labelExternalAddress'
	$labelExternalAddress.Size = '100, 23'
	$labelExternalAddress.TabIndex = 10
	$labelExternalAddress.Text = 'External Address:'
	$labelExternalAddress.UseCompatibleTextRendering = $True
	$formCreateMailforward.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCreateMailforward.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCreateMailforward.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCreateMailforward.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCreateMailforward.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCreateMailforward.ShowDialog()

}
#endregion Source: CreateMailForwarding.psf

#region Source: CreateRoomResource.psf
function Show-CreateRoomResource_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCreateRoomResource = New-Object 'System.Windows.Forms.Form'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$labelRoomResource = New-Object 'System.Windows.Forms.Label'
	$RoRComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$CountryComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$LocationTextBox = New-Object 'System.Windows.Forms.TextBox'
	$DescriptionTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelCapacity = New-Object 'System.Windows.Forms.Label'
	$labelDescription = New-Object 'System.Windows.Forms.Label'
	$labelLocation = New-Object 'System.Windows.Forms.Label'
	$labelCountry = New-Object 'System.Windows.Forms.Label'
	$FinalDisplayNameTextBox = New-Object 'System.Windows.Forms.TextBox'
	$CapacityTextBox = New-Object 'System.Windows.Forms.NumericUpDown'
	$labelFinalDisplayName = New-Object 'System.Windows.Forms.Label'
	$labelDelegatedPersons = New-Object 'System.Windows.Forms.Label'
	$labelApprovedPersons = New-Object 'System.Windows.Forms.Label'
	$labelOwner = New-Object 'System.Windows.Forms.Label'
	$OwnerAdd = New-Object 'System.Windows.Forms.Button'
	$OwnerTextBox = New-Object 'System.Windows.Forms.TextBox'
	$DelegatePersonAdd = New-Object 'System.Windows.Forms.Button'
	$DelegatePersonRemove = New-Object 'System.Windows.Forms.Button'
	$DelegatePersonListBox = New-Object 'System.Windows.Forms.ListBox'
	$AddApprovedPersonButton = New-Object 'System.Windows.Forms.Button'
	$RemoveApprovedPersonButton = New-Object 'System.Windows.Forms.Button'
	$ApprovedPersonsListBox = New-Object 'System.Windows.Forms.ListBox'
	$RoomTypeInfoLabel = New-Object 'System.Windows.Forms.Label'
	$RoomOrResourceTypeComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$labelRoomResourceType = New-Object 'System.Windows.Forms.Label'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonCreateRoomResource = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formCreateRoomResource_Load = {
		#TODO: Initialize Form Controls here
		$RoomOrResourceTypeComboBox.SelectedIndex = 2
	}
	
	function Create-RoR
	{
		param (
			[string]$DisplayName,
			[string]$Country,
			[string]$Location,
			[string]$Description,
			[string]$RoRType,
			[string]$RoomOrResource,
			[string]$Owner
		)
		
		#Generate Distribution Group Name/Alias
		$Alias = RemoveInvalidChars -InputString $($RoomOrResource + "_" + $Country + "_" + $Location + "_" + $Description).Replace(" ", "_")
		$ApprovedPersonsGroupName = $RoomOrResource + "_Approved_Persons_" + $Country + "_" + $Location + "_" + $Description
		$ApprovedPersonsGroupAlias = RemoveInvalidChars -InputString ($ApprovedPersonsGroupName.Replace("_", "")).Replace(" ", "")
		$DelegateGroupName = $RoomOrResource + "_DLG_" + $Country + "_" + $Location + "_" + $Description
		$DelegateGroupAlias = RemoveInvalidChars -InputString ($DelegateGroupName.Replace("_", "")).Replace(" ", "")
		$FullAccessGroupName = $RoomOrResource + "_ADM_" + $Country + "_" + $Location + "_" + $Description
		$FullAccessGroupAlias = RemoveInvalidChars -InputString ($FullAccessGroupName.Replace("_", "")).Replace(" ", "")
		
		$SAMAlias = $Alias.Replace("_", "")
		
		if ($SAMAlias.length -gt 19)
		{
			$SAMAlias = $SAMAlias.SubString(0, 20)
		}
		
		$ADCheck = Check-AD -Alias $SAMAlias
		
		if ($ADCheck -eq $true)
		{
			if ($SAMAlias.Length -gt 19)
			{
				$SAMAlias = $SAMAlias.SubString(0, 19)
			}
			
			$SAMAliasCheck = $true
			do
			{
				$SAMAliasInput = [Microsoft.VisualBasic.Interaction]::InputBox("The generated usernames are already in use, Please enter a number (0-9) to be placed after each name.`nEnter a blank input to cancel", "Add number after name", "")
				if ($SAMAliasInput -notmatch "^[0-9]*$")
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Please enter a number!", "Error")
					$SAMAliasCheck = $true
				}
				elseif ($SAMAliasInput -eq "")
				{
					return
				}
				elseif ($SAMAliasInput.length -gt 1)
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Please enter a number between 0-9!", "Error")
					$SAMAliasCheck = $true
				}
				else
				{
					$SAMAlias = $SAMAlias + $SAMAliasInput
					$SAMAliasADCheck = Check-AD -Alias $SAMAlias
					if ($SAMAliasADCheck -eq $false)
					{
						$ApprovedPersonsGroupAlias = $ApprovedPersonsGroupAlias.Substring(0, ($ApprovedPersonsGroupAlias.length) - 1) + $SAMAliasInput
						$DelegateGroupAlias = $DelegateGroupAlias.Substring(0, ($DelegateGroupAlias.length) - 1) + $SAMAliasInput
						$FullAccessGroupAlias = $FullAccessGroupAlias.Substring(0, ($FullAccessGroupAlias.Length) - 1) + $SAMAliasInput
						$SAMAliasCheck = $false
						
					}
				}
			}
			while ($SAMAliasCheck -eq $true)
			
		}
		else
		{
			#Continue like normal!
		}
		
		
		$ADCheckSAMAlias = Check-AD -Alias $SAMAlias
		$ADCheckApprovedPerson = Check-AD -Alias $ApprovedPersonsGroupAlias
		$ADCheckDelegateGroup = Check-AD -Alias $DelegateGroupAlias
		$ADFullAccess = Check-AD -Alias $FullAccessGroupAlias
		
		if ($ADCheckSAMAlias -ne $true -and $ADCheckApprovedPerson -ne $true -and $ADCheckDelegateGroup -ne $true -and $ADFullAccess -ne $true)
		{
			#Do nothing, let the script continue
		}
		else
		{
			#Found a match, cancels the whole function
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Creation of the room/resource failed because there are already a room/groups with the generated names", "FAILED")
			Add-Log -body "Rooms & Resource - Creation failed for $Alias due to already existing ad objects"
			return
		}
		
		#Create the Room.
		New-RemoteMailbox -Name "$DisplayName" -Alias "$Alias" -OnPremisesOrganizationalUnit $RoomsAndResources_defaultOu -UserPrincipalName "$Alias@arlafoods.com" -SamAccountName "$SAMAlias" -DomainController $DomainController -Room
		
		
		#Determine which groups needs to be created and then creates them.
		if ($RoRType -eq "Auto-processing")
		{
			New-DistributionGroup -Name "$ApprovedPersonsGroupName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "$ApprovedPersonsGroupAlias" -Alias "$ApprovedPersonsGroupAlias" -DomainController $DomainController
			New-DistributionGroup -Name "$DelegateGroupName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "$DelegateGroupAlias" -Alias "$DelegateGroupAlias" -DomainController $DomainController
			New-DistributionGroup -Name "$FullAccessGroupName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "$FullAccessGroupAlias" -Alias "$FullAccessGroupAlias" -DomainController $DomainController
		}
		elseif ($RoRType -eq "Specific people")
		{
			New-DistributionGroup -Name "$ApprovedPersonsGroupName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "$ApprovedPersonsGroupAlias" -Alias "$ApprovedPersonsGroupAlias" -DomainController $DomainController
			New-DistributionGroup -Name "$FullAccessGroupName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "$FullAccessGroupAlias" -Alias "$FullAccessGroupAlias" -DomainController $DomainController
		}
		
		elseif ($RoRType -eq "None")
		{
			New-DistributionGroup -Name "$FullAccessGroupName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "$FullAccessGroupAlias" -Alias "$FullAccessGroupAlias" -DomainController $DomainController
		}
		
		#Ensure that the room & the permissions groups are created before proceeding
		do
		{
			$RoomCheck = Get-remoteMailbox -Identity $SAMAlias -ErrorAction SilentlyContinue -DomainController $DomainController
			if ($RoRType -eq "Auto-Processing")
			{
				$GroupCheck1 = Get-DistributionGroup -Identity $ApprovedPersonsGroupAlias -ErrorAction SilentlyContinue -DomainController $DomainController
				$GroupCheck2 = Get-DistributionGroup -Identity $DelegateGroupAlias -ErrorAction SilentlyContinue -DomainController $DomainController
				$GroupCheck3 = Get-DistributionGroup -Identity $FullAccessGroupAlias -ErrorAction SilentlyContinue -DomainController $DomainController
				if ($GroupCheck1 -ne $null -and $GroupCheck2 -ne $null -and $GroupCheck3 -ne $null)
				{
					$FinalGroupCheck = $true
				}
			}
			elseif ($RoRType -eq "Specific people")
			{
				$GroupCheck1 = Get-DistributionGroup -Identity $ApprovedPersonsGroupAlias -ErrorAction SilentlyContinue -DomainController $DomainController
				$GroupCheck2 = Get-DistributionGroup -Identity $FullAccessGroupAlias -ErrorAction SilentlyContinue -DomainController $DomainController
				if ($GroupCheck1 -ne $null -and $GroupCheck2 -ne $null)
				{
					$FinalGroupCheck = $true
				}
			}
			elseif ($RoRType -eq "None")
			{
				$GroupCheck1 = Get-DistributionGroup -Identity $FullAccessGroupAlias -DomainController $DomainController -ErrorAction SilentlyContinue
				if ($GroupCheck1 -ne $null)
				{
					$FinalGroupCheck = $true
				}
			}
			Start-Sleep 1
			$i++
			if ($i -gt 179)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 3 minutes has passed since the objects were created but they are still not found", "ERROR")
				Add-Log -body "Rooms & Resource - Failed to find Room $DisplayName after creating room/groups"
				return
			}
		}
		while ($FinalGroupCheck -eq $null -or $RoomCheck -eq $null -and $i -lt 180)
		
		#Set the DN's in order to able to identify the AD objects correctly
		$RoomDn = Get-FullDN -username $SAMAlias
		switch ($RoRType)
		{
			"Auto-Processing" { $ApprovedPersonsGroupDn = Get-FullDN -username $ApprovedPersonsGroupAlias; $DelegateGroupDn = Get-FullDN -username $DelegateGroupAlias; $FullAccessGroupDn = Get-FullDN -username $FullAccessGroupAlias; }
			"Specific people" { $ApprovedPersonsGroupDn = Get-FullDN -username $ApprovedPersonsGroupAlias; $FullAccessGroupDn = Get-FullDN -username $FullAccessGroupAlias }
			"None" { $FullAccessGroupDn = Get-FullDN -username $FullAccessGroupAlias }
		}
		
		
		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
		[void][System.Windows.Forms.MessageBox]::Show("Room/Groups are created, now we have to set the default settings.`nThis takes a while, so please wait up to 10minutes while the tool is frozen and loading", "Warning!")
		do
		{
			$CalendarProcessingCheck = Get-CalendarProcessing -Identity $RoomDn -ErrorAction 'SilentlyContinue'
			Start-Sleep 1
			$i++
			if ($i -gt 10)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 10 minutes has passed since the objects were created but Calendar Processing is still not found", "ERROR")
				Add-Log -body "Rooms & Resource - Failed to set CalendarProcessing for $RoomDn"
				return
			}
		}
		while ($CalendarProcessingCheck -eq $null -and $i -lt 11)
		
		#Set default permissions for the Room.
		#Set-CalendarProcessing -identity $RoomDn -AutomateProcessing AutoAccept -AllowConflicts $False -AllowRecurringMeetings $True -ScheduleOnlyDuringWorkHours $False -EnforceSchedulingHorizon $True -BookingWindowInDays 740 -MaximumDurationInMinutes 1440 -ConflictPercentageAllowed 0 -MaximumConflictInstances 0 -DeleteAttachments $True -DeleteComments $True -DeleteSubject $False -DeleteNonCalendarItems $True -AddOrganizerToSubject $True -RemovePrivateProperty $True -OrganizerInfo $True -TentativePendingApproval $True -DomainController $DomainController
		
		
		#Permissions for all types of boxes.
		#Add-MailboxPermission -Identity $RoomDn -User "MRGeneralOwner" -AccessRights Fullaccess -InheritanceType All -DomainController $DomainController
		#Add-MailboxPermission -Identity $RoomDn -User $FullAccessGroupDn -AccessRights Fullaccess -InheritanceType All -DomainController $DomainController
		
		
		#Permissions & settings for Auto-Processing
		if ($ApprovedPersonsGroupDn -ne $null -and $DelegateGroupDn -ne $null)
		{
			#Enable the mailbox to be managed by the Approved persons group & permissions for the resource delegates.
			#Set-CalendarProcessing -Identity $RoomDn -AllBookInPolicy $False -AllRequestInPolicy $True -BookInPolicy $ApprovedPersonsGroupDn -ResourceDelegates $DelegateGroupDn -DomainController $DomainController
			Set-DistributionGroup -Identity $ApprovedPersonsGroupDn -ManagedBy $Owner -DomainController $DomainController
			Set-DistributionGroup -Identity $DelegateGroupDn -ManagedBy $Owner -DomainController $DomainController
			Set-DistributionGroup -Identity $FullAccessGroupDn -ManagedBy $Owner -DomainController $DomainController
			
			Add-ADPermission -identity $ApprovedPersonsGroupDn -User $Owner -AccessRights "WriteProperty" -ExtendedRights "Self-Membership" -DomainController $DomainController
			Add-AdPermission -identity $ApprovedPersonsGroupDn -User $Owner -AccessRights "WriteProperty" -Properties Member -InheritanceType None -DomainController $DomainController
			Add-ADPermission -identity $DelegateGroupDn -User $Owner -AccessRights "WriteProperty" -ExtendedRights "Self-Membership" -DomainController $DomainController
			Add-AdPermission -identity $DelegateGroupDn -User $Owner -AccessRights "WriteProperty" -Properties Member -InheritanceType None -DomainController $DomainController
			Add-ADPermission -identity $FullAccessGroupDn -User $Owner -AccessRights "WriteProperty" -ExtendedRights "Self-Membership" -DomainController $DomainController
			Add-AdPermission -identity $FullAccessGroupDn -User $Owner -AccessRights "WriteProperty" -Properties Member -InheritanceType None -DomainController $DomainController
			
			
			#Adding users for the Approved Persons usergroup
			foreach ($ApprovedPerson in $ApprovedPersonsListBox.Items)
			{
				Add-DistributionGroupMember -Identity $ApprovedPersonsGroupDn -Member $ApprovedPerson -BypassSecurityGroupManagerCheck -DomainController $DomainController
			}
			#Adding users for the Delegated usersgroup
			foreach ($DelegateUser in $DelegatePersonListBox.Items)
			{
				Add-DistributionGroupMember -Identity $DelegateGroupDn -Member $DelegateUser -BypassSecurityGroupManagerCheck -DomainController $DomainController
			}
		}
		
		#Permissions & settings for Specific people
		if ($ApprovedPersonsGroupDn -ne $null -and $DelegateGroupDn -eq $null)
		{
			#Enable the mailbox to be managed by the Approved Persons group
			#Set-CalendarProcessing -identity $RoomDn -AllBookInPolicy $False -AllRequestInPolicy $False -BookInPolicy $ApprovedPersonsGroupDn -ResourceDelegates $null -DomainController $DomainController
			Set-DistributionGroup -Identity $ApprovedPersonsGroupDn -ManagedBy $Owner -DomainController $DomainController
			Set-DistributionGroup -Identity $FullAccessGroupDn -ManagedBy $Owner -DomainController $DomainController
			
			#Adding the users to the Approved Persons usergroup
			foreach ($ApprovedPerson in $ApprovedPersonsListBox.Items)
			{
				Add-DistributionGroupMember -Identity $ApprovedPersonsGroupDn -Member $ApprovedPerson -BypassSecurityGroupManagerCheck -DomainController $DomainController
			}
		}
		
		#Permissions & settings for None
		if ($ApprovedPersonsGroupDn -eq $null -and $DelegateGroupDn -eq $null)
		{
			Set-DistributionGroup -Identity $FullAccessGroupDn -ManagedBy $Owner -DomainController $DomainController
			#Set-CalendarProcessing -identity $RoomDn -AllBookInPolicy $true -AllRequestInPolicy $false -DomainController $DomainController
		}
		
		#Add to corresponding Room List
		$RoomList = Get-DistributionGroup -Identity "$country $location" -ErrorAction SilentlyContinue -DomainController $DomainController
		if ($RoomList -ne $null)
		{
			$RoomListDn = Get-FullDNDistributionGroups -username $RoomList.SAMAccountName
			Add-DistributionGroupMember -Identity $RoomListDn -Member $RoomDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
		}
		else
		{
			Add-Log -body "Rooms & Resource - Failed to add Room/Resource $RoomDn to Room List"
		}
		
		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
		[void][System.Windows.Forms.MessageBox]::Show("Room/Resource has been created!", "Finished")
		Add-Log -body "Rooms & Resource - Created Room/Resource $RoomDn"
		
	}
	
	function Refresh-DisplayName
	{
		if ($RoRComboBox.Text -eq "RS")
		{
			$labelCapacity.Visible = $false
			$CapacityTextBox.Visible = $false
			$CapacityTextBox.Value = ""
			$FinalDisplayNameTextBox.Text = $RoRComboBox.Text + " " + $CountryComboBox.Text + " " + $LocationTextBox.Text + " " + $DescriptionTextBox.Text
		}
		else
		{
			$labelCapacity.Visible = $true
			$CapacityTextBox.Visible = $true
			if ($CapacityTextBox.Value -eq "")
			{
				$FinalDisplayNameTextBox.Text = $RoRComboBox.Text + " " + $CountryComboBox.Text + " " + $LocationTextBox.Text + " " + $DescriptionTextBox.Text
			}
			else
			{
				$FinalDisplayNameTextBox.Text = $RoRComboBox.Text + " " + $CountryComboBox.Text + " " + $LocationTextBox.Text + " " + $DescriptionTextBox.Text + " " + "($($CapacityTextBox.Value))"
			}
		}
		
		
	}
	
	$LocationTextBox_TextChanged = {
		#TODO: Place custom script here
		Refresh-DisplayName
	}
	
	$DescriptionTextBox_TextChanged = {
		#TODO: Place custom script here
		Refresh-DisplayName
	}
	
	
	$RoRComboBox_SelectedIndexChanged = {
		#TODO: Place custom script here
		Refresh-DisplayName
	}
	
	$CountryComboBox_SelectedIndexChanged = {
		#TODO: Place custom script here
		Refresh-DisplayName
	}
	
	
	$CapacityTextBox_ValueChanged = {
		#TODO: Place custom script here
		Refresh-DisplayName
	}
	
	
	$buttonCreateRoomResource_Click = {
		#TODO: Place custom script here
		$DisplayName = $FinalDisplayNameTextBox.Text
		$Location = $LocationTextBox.Text
		$Description = $DescriptionTextBox.Text
		$Country = $CountryComboBox.Text
		$RoRType = $RoomOrResourceTypeComboBox.Text
		$RoomOrResource = $RoRComboBox.Text
		$Owner = $OwnerTextBox.Text
		
		if ($DisplayName -eq "" -or $location -eq "" -or $Description -eq "" -or $Country -eq "" -or $RoRType -eq "" -or $RoomOrResource -eq "" -or $Owner -eq "")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("You have not filled out all the required fields!", "Error")
			return
		}
		elseif ((Get-Mailbox -Identity $DisplayName -ErrorAction 'SilentlyContinue') -ne $null)
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("The room already exists!", "Error")
			return
		}
		
		Create-RoR -DisplayName $DisplayName -Country $Country -Description $Description -Location $Location -RoRType $RoRType -RoomOrResource $RoomOrResource -Owner $Owner
	}
	
	$RoomTypeInfoLabel_Click = {
		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
		[void][System.Windows.Forms.MessageBox]::Show("•Auto-processing
This type of Room / Resource will have a group of `"Approved_Persons`" that can book the room without approval - all other users can request a booking of the room.
A Delegate Group can approve request.
A group `(ADM`) with Full Access permissions can manage the Room / Resource

•Specific people
This type of Room / Resource will have a group of `"Approved_Persons`" that can 
book the room without approval - No other users can request or book the Room / Resource.
No Delegate Group is used.
A group `(ADM`) with Full Access permissions can manage the Room / Resource
	
•None
This type of Room / Resource will allow anyone to book the Room if available.
No one can request the Room and therefore no Delegate Group is used.
A group `(ADM`) with Full Access permissions can manage the Room / Resource", "Info")
		
	}
	
	$AddApprovedPersonButton_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$ApprovedPersonAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which users do you want to add as an Approved Person?", "Approved Person", "")
		$UserToAdd = Get-FullDN -username $ApprovedPersonAdd
		if ($UserToAdd -ne $null)
		{
			$ApprovedPersonsListBox.Items.Add("$UserToAdd")
		}
	}
	
	$RemoveApprovedPersonButton_Click = {
		#TODO: Place custom script here
		$ApprovedPersonsListBox.Items.Remove($ApprovedPersonsListBox.SelectedItem)
	}
	
	$DelegatePersonAdd_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$DelegatePersonAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which users do you want to add as a Delegate Person?", "Delegate Person", "")
		$UserToAdd = Get-FullDN -username $DelegatePersonAdd
		if ($UserToAdd -ne $null)
		{
			$DelegatePersonListBox.Items.Add("$UserToAdd")
		}
	}
	
	$DelegatePersonRemove_Click = {
		#TODO: Place custom script here
		$DelegatePersonListBox.Items.Remove($DelegatePersonListBox.SelectedItem)
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formCreateRoomResource.Close()
	}
	
	$OwnerAdd_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which user do you want to add as owner?", "Owner", "")
		$UserToAdd = Get-FullDN -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$OwnerTextBox.Text = $UserToAdd
		}
	}
	
	$RoomOrResourceTypeComboBox_SelectedIndexChanged = {
		#TODO: Place custom script here
		if ($RoomOrResourceTypeComboBox.Text -eq "Auto-Processing")
		{
			$labelApprovedPersons.Visible = $true
			$labelDelegatedPersons.Visible = $true
			$ApprovedPersonsListBox.Visible = $true
			$AddApprovedPersonButton.Visible = $true
			$RemoveApprovedPersonButton.Visible = $true
			$DelegatePersonListBox.Visible = $true
			$DelegatePersonAdd.Visible = $true
			$DelegatePersonRemove.Visible = $true
		}
		if ($RoomOrResourceTypeComboBox.Text -eq "Specific people")
		{
			$labelApprovedPersons.Visible = $true
			$labelDelegatedPersons.Visible = $false
			$ApprovedPersonsListBox.Visible = $true
			$AddApprovedPersonButton.Visible = $true
			$RemoveApprovedPersonButton.Visible = $true
			$DelegatePersonListBox.Visible = $false
			$DelegatePersonAdd.Visible = $false
			$DelegatePersonRemove.Visible = $false
		}
		if ($RoomOrResourceTypeComboBox.Text -eq "None")
		{
			$labelApprovedPersons.Visible = $false
			$labelDelegatedPersons.Visible = $false
			$ApprovedPersonsListBox.Visible = $false
			$AddApprovedPersonButton.Visible = $false
			$RemoveApprovedPersonButton.Visible = $false
			$DelegatePersonListBox.Visible = $false
			$DelegatePersonAdd.Visible = $false
			$DelegatePersonRemove.Visible = $false
		}
	}
	
	$labelDescription_Click = {
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCreateRoomResource.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:CreateRoomResource_RoRComboBox = $RoRComboBox.Text
		$script:CreateRoomResource_RoRComboBox_SelectedItem = $RoRComboBox.SelectedItem
		$script:CreateRoomResource_CountryComboBox = $CountryComboBox.Text
		$script:CreateRoomResource_CountryComboBox_SelectedItem = $CountryComboBox.SelectedItem
		$script:CreateRoomResource_LocationTextBox = $LocationTextBox.Text
		$script:CreateRoomResource_DescriptionTextBox = $DescriptionTextBox.Text
		$script:CreateRoomResource_FinalDisplayNameTextBox = $FinalDisplayNameTextBox.Text
		$script:CreateRoomResource_CapacityTextBox = $CapacityTextBox.Value
		$script:CreateRoomResource_OwnerTextBox = $OwnerTextBox.Text
		$script:CreateRoomResource_DelegatePersonListBox = $DelegatePersonListBox.SelectedItems
		$script:CreateRoomResource_ApprovedPersonsListBox = $ApprovedPersonsListBox.SelectedItems
		$script:CreateRoomResource_RoomOrResourceTypeComboBox = $RoomOrResourceTypeComboBox.Text
		$script:CreateRoomResource_RoomOrResourceTypeComboBox_SelectedItem = $RoomOrResourceTypeComboBox.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$RoRComboBox.remove_SelectedIndexChanged($RoRComboBox_SelectedIndexChanged)
			$CountryComboBox.remove_SelectedIndexChanged($CountryComboBox_SelectedIndexChanged)
			$LocationTextBox.remove_TextChanged($LocationTextBox_TextChanged)
			$DescriptionTextBox.remove_TextChanged($DescriptionTextBox_TextChanged)
			$labelDescription.remove_Click($labelDescription_Click)
			$CapacityTextBox.remove_ValueChanged($CapacityTextBox_ValueChanged)
			$OwnerAdd.remove_Click($OwnerAdd_Click)
			$DelegatePersonAdd.remove_Click($DelegatePersonAdd_Click)
			$DelegatePersonRemove.remove_Click($DelegatePersonRemove_Click)
			$AddApprovedPersonButton.remove_Click($AddApprovedPersonButton_Click)
			$RemoveApprovedPersonButton.remove_Click($RemoveApprovedPersonButton_Click)
			$RoomTypeInfoLabel.remove_Click($RoomTypeInfoLabel_Click)
			$RoomOrResourceTypeComboBox.remove_SelectedIndexChanged($RoomOrResourceTypeComboBox_SelectedIndexChanged)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonCreateRoomResource.remove_Click($buttonCreateRoomResource_Click)
			$formCreateRoomResource.remove_Load($formCreateRoomResource_Load)
			$formCreateRoomResource.remove_Load($Form_StateCorrection_Load)
			$formCreateRoomResource.remove_Closing($Form_StoreValues_Closing)
			$formCreateRoomResource.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCreateRoomResource.SuspendLayout()
	$groupbox1.SuspendLayout()
	$CapacityTextBox.BeginInit()
	#
	# formCreateRoomResource
	#
	$formCreateRoomResource.Controls.Add($groupbox1)
	$formCreateRoomResource.Controls.Add($labelDelegatedPersons)
	$formCreateRoomResource.Controls.Add($labelApprovedPersons)
	$formCreateRoomResource.Controls.Add($labelOwner)
	$formCreateRoomResource.Controls.Add($OwnerAdd)
	$formCreateRoomResource.Controls.Add($OwnerTextBox)
	$formCreateRoomResource.Controls.Add($DelegatePersonAdd)
	$formCreateRoomResource.Controls.Add($DelegatePersonRemove)
	$formCreateRoomResource.Controls.Add($DelegatePersonListBox)
	$formCreateRoomResource.Controls.Add($AddApprovedPersonButton)
	$formCreateRoomResource.Controls.Add($RemoveApprovedPersonButton)
	$formCreateRoomResource.Controls.Add($ApprovedPersonsListBox)
	$formCreateRoomResource.Controls.Add($RoomTypeInfoLabel)
	$formCreateRoomResource.Controls.Add($RoomOrResourceTypeComboBox)
	$formCreateRoomResource.Controls.Add($labelRoomResourceType)
	$formCreateRoomResource.Controls.Add($buttonExit)
	$formCreateRoomResource.Controls.Add($buttonCreateRoomResource)
	$formCreateRoomResource.AutoScaleDimensions = '6, 13'
	$formCreateRoomResource.AutoScaleMode = 'Font'
	$formCreateRoomResource.ClientSize = '455, 475'
	$formCreateRoomResource.FormBorderStyle = 'FixedDialog'
	$formCreateRoomResource.MaximizeBox = $False
	$formCreateRoomResource.Name = 'formCreateRoomResource'
	$formCreateRoomResource.StartPosition = 'CenterParent'
	$formCreateRoomResource.Text = 'Create Room / Resource'
	$formCreateRoomResource.add_Load($formCreateRoomResource_Load)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($labelRoomResource)
	$groupbox1.Controls.Add($RoRComboBox)
	$groupbox1.Controls.Add($CountryComboBox)
	$groupbox1.Controls.Add($LocationTextBox)
	$groupbox1.Controls.Add($DescriptionTextBox)
	$groupbox1.Controls.Add($labelCapacity)
	$groupbox1.Controls.Add($labelDescription)
	$groupbox1.Controls.Add($labelLocation)
	$groupbox1.Controls.Add($labelCountry)
	$groupbox1.Controls.Add($FinalDisplayNameTextBox)
	$groupbox1.Controls.Add($CapacityTextBox)
	$groupbox1.Controls.Add($labelFinalDisplayName)
	$groupbox1.Location = '12, 12'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '432, 189'
	$groupbox1.TabIndex = 50
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'DisplayName'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# labelRoomResource
	#
	$labelRoomResource.Location = '21, 16'
	$labelRoomResource.Name = 'labelRoomResource'
	$labelRoomResource.Size = '100, 23'
	$labelRoomResource.TabIndex = 5
	$labelRoomResource.Text = 'Room/Resource:'
	$labelRoomResource.UseCompatibleTextRendering = $True
	#
	# RoRComboBox
	#
	$RoRComboBox.DropDownStyle = 'DropDownList'
	$RoRComboBox.FormattingEnabled = $True
	[void]$RoRComboBox.Items.Add('RM')
	[void]$RoRComboBox.Items.Add('RS')
	$RoRComboBox.Location = '124, 13'
	$RoRComboBox.Name = 'RoRComboBox'
	$RoRComboBox.Size = '43, 21'
	$RoRComboBox.TabIndex = 1
	$RoRComboBox.add_SelectedIndexChanged($RoRComboBox_SelectedIndexChanged)
	#
	# CountryComboBox
	#
	$CountryComboBox.DropDownStyle = 'DropDownList'
	$CountryComboBox.FormattingEnabled = $True
	[void]$CountryComboBox.Items.Add('DK')
	[void]$CountryComboBox.Items.Add('SE')
	[void]$CountryComboBox.Items.Add('UK')
	[void]$CountryComboBox.Items.Add('AE')
	[void]$CountryComboBox.Items.Add('AR')
	[void]$CountryComboBox.Items.Add('BD')
	[void]$CountryComboBox.Items.Add('BR')
	[void]$CountryComboBox.Items.Add('CA')
	[void]$CountryComboBox.Items.Add('CN')
	[void]$CountryComboBox.Items.Add('DE')
	[void]$CountryComboBox.Items.Add('ES')
	[void]$CountryComboBox.Items.Add('FI')
	[void]$CountryComboBox.Items.Add('FR')
	[void]$CountryComboBox.Items.Add('GR')
	[void]$CountryComboBox.Items.Add('IT')
	[void]$CountryComboBox.Items.Add('JP')
	[void]$CountryComboBox.Items.Add('KW')
	[void]$CountryComboBox.Items.Add('LB')
	[void]$CountryComboBox.Items.Add('NL')
	[void]$CountryComboBox.Items.Add('NO')
	[void]$CountryComboBox.Items.Add('PL')
	[void]$CountryComboBox.Items.Add('RU')
	[void]$CountryComboBox.Items.Add('SA')
	[void]$CountryComboBox.Items.Add('US')
	[void]$CountryComboBox.Items.Add('VN')
	[void]$CountryComboBox.Items.Add('WW')
	$CountryComboBox.Location = '124, 40'
	$CountryComboBox.Name = 'CountryComboBox'
	$CountryComboBox.Size = '43, 21'
	$CountryComboBox.TabIndex = 2
	$CountryComboBox.add_SelectedIndexChanged($CountryComboBox_SelectedIndexChanged)
	#
	# LocationTextBox
	#
	$LocationTextBox.Location = '124, 70'
	$LocationTextBox.Name = 'LocationTextBox'
	$LocationTextBox.Size = '100, 20'
	$LocationTextBox.TabIndex = 3
	$LocationTextBox.add_TextChanged($LocationTextBox_TextChanged)
	#
	# DescriptionTextBox
	#
	$DescriptionTextBox.Location = '124, 96'
	$DescriptionTextBox.Name = 'DescriptionTextBox'
	$DescriptionTextBox.Size = '100, 20'
	$DescriptionTextBox.TabIndex = 4
	$DescriptionTextBox.add_TextChanged($DescriptionTextBox_TextChanged)
	#
	# labelCapacity
	#
	$labelCapacity.Location = '21, 122'
	$labelCapacity.Name = 'labelCapacity'
	$labelCapacity.Size = '100, 23'
	$labelCapacity.TabIndex = 7
	$labelCapacity.Text = 'Capacity'
	$labelCapacity.UseCompatibleTextRendering = $True
	#
	# labelDescription
	#
	$labelDescription.Location = '21, 99'
	$labelDescription.Name = 'labelDescription'
	$labelDescription.Size = '100, 23'
	$labelDescription.TabIndex = 8
	$labelDescription.Text = 'Description:'
	$labelDescription.UseCompatibleTextRendering = $True
	$labelDescription.add_Click($labelDescription_Click)
	#
	# labelLocation
	#
	$labelLocation.Location = '21, 73'
	$labelLocation.Name = 'labelLocation'
	$labelLocation.Size = '100, 23'
	$labelLocation.TabIndex = 9
	$labelLocation.Text = 'Location:'
	$labelLocation.UseCompatibleTextRendering = $True
	#
	# labelCountry
	#
	$labelCountry.Location = '21, 43'
	$labelCountry.Name = 'labelCountry'
	$labelCountry.Size = '100, 23'
	$labelCountry.TabIndex = 10
	$labelCountry.Text = 'Country:'
	$labelCountry.UseCompatibleTextRendering = $True
	#
	# FinalDisplayNameTextBox
	#
	$FinalDisplayNameTextBox.Location = '124, 148'
	$FinalDisplayNameTextBox.Name = 'FinalDisplayNameTextBox'
	$FinalDisplayNameTextBox.ReadOnly = $True
	$FinalDisplayNameTextBox.Size = '293, 20'
	$FinalDisplayNameTextBox.TabIndex = 6
	#
	# CapacityTextBox
	#
	$CapacityTextBox.Location = '124, 122'
	$CapacityTextBox.Name = 'CapacityTextBox'
	$CapacityTextBox.Size = '43, 20'
	$CapacityTextBox.TabIndex = 5
	$CapacityTextBox.add_ValueChanged($CapacityTextBox_ValueChanged)
	#
	# labelFinalDisplayName
	#
	$labelFinalDisplayName.Location = '6, 151'
	$labelFinalDisplayName.Name = 'labelFinalDisplayName'
	$labelFinalDisplayName.Size = '115, 23'
	$labelFinalDisplayName.TabIndex = 14
	$labelFinalDisplayName.Text = 'Final Display Name:'
	$labelFinalDisplayName.UseCompatibleTextRendering = $True
	#
	# labelDelegatedPersons
	#
	$labelDelegatedPersons.Location = '172, 276'
	$labelDelegatedPersons.Name = 'labelDelegatedPersons'
	$labelDelegatedPersons.Size = '146, 23'
	$labelDelegatedPersons.TabIndex = 49
	$labelDelegatedPersons.Text = 'Delegated Persons:'
	$labelDelegatedPersons.UseCompatibleTextRendering = $True
	#
	# labelApprovedPersons
	#
	$labelApprovedPersons.Location = '16, 276'
	$labelApprovedPersons.Name = 'labelApprovedPersons'
	$labelApprovedPersons.Size = '100, 23'
	$labelApprovedPersons.TabIndex = 48
	$labelApprovedPersons.Text = 'Approved Persons:'
	$labelApprovedPersons.UseCompatibleTextRendering = $True
	#
	# labelOwner
	#
	$labelOwner.Location = '14, 254'
	$labelOwner.Name = 'labelOwner'
	$labelOwner.Size = '90, 23'
	$labelOwner.TabIndex = 47
	$labelOwner.Text = 'Owner:'
	$labelOwner.UseCompatibleTextRendering = $True
	#
	# OwnerAdd
	#
	$OwnerAdd.Location = '295, 254'
	$OwnerAdd.Name = 'OwnerAdd'
	$OwnerAdd.Size = '59, 19'
	$OwnerAdd.TabIndex = 9
	$OwnerAdd.Text = 'Add'
	$OwnerAdd.UseCompatibleTextRendering = $True
	$OwnerAdd.UseVisualStyleBackColor = $True
	$OwnerAdd.add_Click($OwnerAdd_Click)
	#
	# OwnerTextBox
	#
	$OwnerTextBox.Location = '139, 253'
	$OwnerTextBox.MaxLength = 256
	$OwnerTextBox.Name = 'OwnerTextBox'
	$OwnerTextBox.ReadOnly = $True
	$OwnerTextBox.Size = '150, 20'
	$OwnerTextBox.TabIndex = 8
	#
	# DelegatePersonAdd
	#
	$DelegatePersonAdd.Location = '194, 377'
	$DelegatePersonAdd.Name = 'DelegatePersonAdd'
	$DelegatePersonAdd.Size = '59, 19'
	$DelegatePersonAdd.TabIndex = 12
	$DelegatePersonAdd.Text = 'Add'
	$DelegatePersonAdd.UseCompatibleTextRendering = $True
	$DelegatePersonAdd.UseVisualStyleBackColor = $True
	$DelegatePersonAdd.add_Click($DelegatePersonAdd_Click)
	#
	# DelegatePersonRemove
	#
	$DelegatePersonRemove.Location = '259, 377'
	$DelegatePersonRemove.Name = 'DelegatePersonRemove'
	$DelegatePersonRemove.Size = '59, 19'
	$DelegatePersonRemove.TabIndex = 13
	$DelegatePersonRemove.Text = 'Remove'
	$DelegatePersonRemove.UseCompatibleTextRendering = $True
	$DelegatePersonRemove.UseVisualStyleBackColor = $True
	$DelegatePersonRemove.add_Click($DelegatePersonRemove_Click)
	#
	# DelegatePersonListBox
	#
	$DelegatePersonListBox.FormattingEnabled = $True
	$DelegatePersonListBox.Location = '172, 302'
	$DelegatePersonListBox.Name = 'DelegatePersonListBox'
	$DelegatePersonListBox.Size = '150, 69'
	$DelegatePersonListBox.TabIndex = 17
	#
	# AddApprovedPersonButton
	#
	$AddApprovedPersonButton.Location = '38, 377'
	$AddApprovedPersonButton.Name = 'AddApprovedPersonButton'
	$AddApprovedPersonButton.Size = '59, 19'
	$AddApprovedPersonButton.TabIndex = 10
	$AddApprovedPersonButton.Text = 'Add'
	$AddApprovedPersonButton.UseCompatibleTextRendering = $True
	$AddApprovedPersonButton.UseVisualStyleBackColor = $True
	$AddApprovedPersonButton.add_Click($AddApprovedPersonButton_Click)
	#
	# RemoveApprovedPersonButton
	#
	$RemoveApprovedPersonButton.Location = '103, 377'
	$RemoveApprovedPersonButton.Name = 'RemoveApprovedPersonButton'
	$RemoveApprovedPersonButton.Size = '59, 19'
	$RemoveApprovedPersonButton.TabIndex = 11
	$RemoveApprovedPersonButton.Text = 'Remove'
	$RemoveApprovedPersonButton.UseCompatibleTextRendering = $True
	$RemoveApprovedPersonButton.UseVisualStyleBackColor = $True
	$RemoveApprovedPersonButton.add_Click($RemoveApprovedPersonButton_Click)
	#
	# ApprovedPersonsListBox
	#
	$ApprovedPersonsListBox.FormattingEnabled = $True
	$ApprovedPersonsListBox.Location = '16, 302'
	$ApprovedPersonsListBox.Name = 'ApprovedPersonsListBox'
	$ApprovedPersonsListBox.Size = '150, 69'
	$ApprovedPersonsListBox.TabIndex = 16
	#
	# RoomTypeInfoLabel
	#
	$RoomTypeInfoLabel.Location = '307, 227'
	$RoomTypeInfoLabel.Name = 'RoomTypeInfoLabel'
	$RoomTypeInfoLabel.Size = '24, 23'
	$RoomTypeInfoLabel.TabIndex = 22
	$RoomTypeInfoLabel.Text = '?'
	$RoomTypeInfoLabel.UseCompatibleTextRendering = $True
	$RoomTypeInfoLabel.add_Click($RoomTypeInfoLabel_Click)
	#
	# RoomOrResourceTypeComboBox
	#
	$RoomOrResourceTypeComboBox.DropDownStyle = 'DropDownList'
	$RoomOrResourceTypeComboBox.FormattingEnabled = $True
	[void]$RoomOrResourceTypeComboBox.Items.Add('Auto-processing')
	[void]$RoomOrResourceTypeComboBox.Items.Add('Specific people')
	[void]$RoomOrResourceTypeComboBox.Items.Add('None')
	$RoomOrResourceTypeComboBox.Location = '139, 227'
	$RoomOrResourceTypeComboBox.Name = 'RoomOrResourceTypeComboBox'
	$RoomOrResourceTypeComboBox.Size = '150, 21'
	$RoomOrResourceTypeComboBox.TabIndex = 7
	$RoomOrResourceTypeComboBox.add_SelectedIndexChanged($RoomOrResourceTypeComboBox_SelectedIndexChanged)
	#
	# labelRoomResourceType
	#
	$labelRoomResourceType.Location = '13, 227'
	$labelRoomResourceType.Name = 'labelRoomResourceType'
	$labelRoomResourceType.Size = '117, 23'
	$labelRoomResourceType.TabIndex = 20
	$labelRoomResourceType.Text = 'Room/Resource Type:'
	$labelRoomResourceType.UseCompatibleTextRendering = $True
	#
	# buttonExit
	#
	$buttonExit.Location = '16, 428'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 15
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonCreateRoomResource
	#
	$buttonCreateRoomResource.Location = '295, 428'
	$buttonCreateRoomResource.Name = 'buttonCreateRoomResource'
	$buttonCreateRoomResource.Size = '133, 23'
	$buttonCreateRoomResource.TabIndex = 14
	$buttonCreateRoomResource.Text = 'Create Room/Resource'
	$buttonCreateRoomResource.UseCompatibleTextRendering = $True
	$buttonCreateRoomResource.UseVisualStyleBackColor = $True
	$buttonCreateRoomResource.add_Click($buttonCreateRoomResource_Click)
	$CapacityTextBox.EndInit()
	$groupbox1.ResumeLayout()
	$formCreateRoomResource.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCreateRoomResource.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCreateRoomResource.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCreateRoomResource.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCreateRoomResource.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCreateRoomResource.ShowDialog()

}
#endregion Source: CreateRoomResource.psf

#region Source: CreateSharedMailbox.psf
function Show-CreateSharedMailbox_psf
{

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCreateSharedMailbox = New-Object 'System.Windows.Forms.Form'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$labelOwner = New-Object 'System.Windows.Forms.Label'
	$OwnerTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelEmail = New-Object 'System.Windows.Forms.Label'
	$EmailTextBox = New-Object 'System.Windows.Forms.TextBox'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonCreateSharedMailbox = New-Object 'System.Windows.Forms.Button'
	$AddEditorButton = New-Object 'System.Windows.Forms.Button'
	$RemoveEditorButton = New-Object 'System.Windows.Forms.Button'
	$AddAdministratorButton = New-Object 'System.Windows.Forms.Button'
	$RemoveAdministratorsButton = New-Object 'System.Windows.Forms.Button'
	$labelEditors = New-Object 'System.Windows.Forms.Label'
	$labelAdministrators = New-Object 'System.Windows.Forms.Label'
	$AdministratorsListBox = New-Object 'System.Windows.Forms.ListBox'
	$EditorsListBox = New-Object 'System.Windows.Forms.ListBox'
	$labelAlias = New-Object 'System.Windows.Forms.Label'
	$labelDisplayName = New-Object 'System.Windows.Forms.Label'
	$AliasTextBox = New-Object 'System.Windows.Forms.TextBox'
	$DisplayNameTextBox = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function CreateSharedMailbox
	{
		param
		(
			[string]$DisplayName,
			[string]$Alias,
			[string]$Email,
			[string]$Owner
		)
		
		#For generating the SMTP addresses later
		$EmailSplit = $Email.Split("@")
		$PrefixMail = $EmailSplit[0]
		
		#Generates a random password, this is not given to the customer & it never used!
		$generatedPw = "Start" + "$(Get-Random -Minimum 1000 -Maximum 99999)"
		if (Check-ProxyAddresses -FirstPartEmail $PrefixMail -eq $true)
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Creation of the shared mailbox failed because there are already a user with the specified email", "FAILED")
			Add-Log -body "Shared Mailbox - Creation failed for $Alias due to email conflicts"
			return
		}
		$ADCheckSMBX = Check-AD -Alias $Alias
		$ADCheckADMGrp = Check-AD -Alias "SM_ADM_$Alias"
		$ADCheckEDTGrp = Check-AD -Alias "SM_EDT_$Alias"
		
		if ($ADCheckSMBX -eq $false -and $ADCheckADMGrp -eq $false -and $ADCheckEDTGrp -eq $false)
		{
			#Do nothing, let the script continue
		}
		else
		{
			#Found a match, cancels the whole function
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Creation of the shared mailbox failed because there are already a user/groups with the generated names", "FAILED")
			Add-Log -body "Shared Mailbox - Creation failed for $Alias due to conflicts with generated ad names"
			return
		}
		
		#Create the needed AD Objects
		New-RemoteMailbox -shared -Name $DisplayName -Alias $Alias -OnPremisesOrganizationalUnit $SharedMailbox_defaultOu -UserPrincipalName "$Alias@" -SamAccountName $Alias -LastName $DisplayName -Password (ConvertTo-SecureString $generatedPw -AsPlainText -Force) -ResetPasswordOnNextLogon $false -DomainController $DomainController
		New-DistributionGroup -Name "SM_ADM_$DisplayName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "SM_ADM_$Alias" -Alias "SM_ADM_$Alias" -DomainController $DomainController
		New-DistributionGroup -Name "SM_EDT_$DisplayName" -Type 'Security' -OrganizationalUnit $DistributionList_defaultOu -SamAccountName "SM_EDT_$Alias" -Alias "SM_EDT_$Alias" -DomainController $DomainController
		
		# Need to have this do/while loop in order to secure that the DL + Mailbox is created before proceeding.
		do
		{
			$EditorGroupCheck = Get-DistributionGroup -Identity "SM_EDT_$DisplayName" -ErrorAction SilentlyContinue -DomainController $DomainController
			$AdminGroupCheck = Get-DistributionGroup -Identity "SM_ADM_$DisplayName" -ErrorAction SilentlyContinue -DomainController $DomainController
			$MailboxCheck = Get-RemoteMailbox -Identity $Alias -ErrorAction SilentlyContinue -DomainController $DomainController
			Start-Sleep 1
			$i++
			if ($i -gt 179)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 3 minutes has passed since the objects were created but they are still not found", "ERROR")
			}
		}
		while ($EditorGroupCheck -eq $null -or $AdminGroupCheck -eq $null -or $MailboxCheck -eq $null -and $i -lt 180)
		
		#Sets the neccessary DN's in order to apply settings & work with the AD objects.
		$EditorGroup = Get-FullDN -username "SM_EDT_$Alias"
		$AdminGroup = Get-FullDN -username "SM_ADM_$Alias"
		$MailboxDn = Get-FullDN -username $Alias
		
		#Set the owners
		Set-DistributionGroup -Identity $AdminGroup -ManagedBy $Owner -BypassSecurityGroupManagerCheck -DomainController $DomainController
		Set-DistributionGroup -Identity $EditorGroup -ManagedBy $Owner -BypassSecurityGroupManagerCheck -DomainController $DomainController
		#Add-ADPermission -identity $AdminGroup -User $Owner -AccessRights "WriteProperty" -ExtendedRights "Self-Membership" -DomainController $DomainController
		#Add-AdPermission -identity $AdminGroup -User $Owner -AccessRights "WriteProperty" -Properties Member -InheritanceType None -DomainController $DomainController
		#Add-ADPermission -identity $EditorGroup -User $Owner -AccessRights "WriteProperty" -ExtendedRights "Self-Membership" -DomainController $DomainController
		#Add-AdPermission -identity $EditorGroup -User $Owner -AccessRights "WriteProperty" -Properties Member -InheritanceType None -DomainController $DomainController
		
		#Make the Mailbox a 'Shared mailbox', and set the correct Email addresses
		Set-RemoteMailbox -Identity $MailboxDn -EmailAddressPolicyEnabled $false -EmailAddresses "SMTP:$Email", "smtp:$PrefixMail@", "smtp:$PrefixMail@", "smtp:$Alias@" -DomainController $DomainController -UserPrincipalName "$Alias@"
		
		#Put the mailbox to a text file to be processed by a batchjob which sets the sent items configuration
		Add-Content -Path "" -Value $MailboxDn
		
		#Set full access permissions
		#Add-MailboxPermission -Identity $MailboxDn -User "" -AccessRights 'FullAccess' -DomainController $DomainController
		#Add-ADPermission -Identity $MailboxDn -User $AdminGroup -ExtendedRights 'Send-As' -DomainController $DomainController
		
		#Set Editor permissions - Need to fix?..
		#Add-MailboxFolderPermission -identity $MailboxDn -AccessRights Editor -User $EditorGroup -DomainController $DomainController
		#Add-MailboxFolderPermission -identity "$Alias:\Calendar" -AccessRights Editor -User $EditorGroup
		#Add-MailboxFolderPermission -identity "$Alias:\Inbox" -AccessRights Editor -User $EditorGroup
		#Add-MailboxFolderPermission -identity "$Alias:\Deleted Items" -AccessRights Editor -User $EditorGroup
		#Add-MailboxFolderPermission -identity "$Alias:\Sent Items" -AccessRights Editor -User $EditorGroup
		#Add-MailboxFolderPermission -identity "$Alias:\Drafts" -AccessRights Editor -User $EditorGroup
		
		#Set up editor permission, and auto-mapping
		$MailBoxLDAP = [ADSI]"LDAP://$($DomainController)/$MailBoxDN"
		$AdminGroupLDAP = [ADSI]"LDAP://$($DomainController)/$AdminGroup"
		$EditorGroupLDAP = [ADSI]"LDAP://$($DomainController)/$EditorGroup"
		
		foreach ($userDn in $EditorsListBox.Items)
		{
			#Set-Mailbox -GrantSendOnBehalfTo $userDn -Identity $MailboxDn -DomainController $DomainController
			$MailBoxLDAP.msExchDelegateListLink.Add($UserDn)
			$UserLdap = [ADSI]"LDAP://$($DomainController)/$userDn"
			$EditorGroupLDAP.PSBase.Invoke("Add", $UserLDAP.PSBase.Path)
			$MailBoxLDAP.SetInfo()
		}
		
		
		#Sets up the automapping for the full access users
		foreach ($userDn in $AdministratorsListBox.Items)
		{
			$MailBoxLDAP.msExchDelegateListLink.Add($UserDn)
			$UserLdap = [ADSI]"LDAP://$($DomainController)/$UserDn"
			$AdminGroupLDAP.PSBase.Invoke("Add", $UserLDAP.PSBase.Path)
			$MailBoxLDAP.SetInfo()
			
		}
		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
		[void][System.Windows.Forms.MessageBox]::Show("Shared mailbox has been created.", "Shared mailbox has been created.")
		Add-Log -body "Shared Mailbox - Created Shared Mailbox $MailboxDn"
	}
	
	
	$formCreateSharedMailbox_Load={
		#TODO: Place custom script here
	}
	
	$AddEditorButton_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$EditorAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which users do you want to add as Editors?", "Editors", "")
		$UserToAdd = Get-FullDN -username $EditorAdd
		if ($UserToAdd -ne $null)
		{
			$EditorsListBox.Items.Add("$UserToAdd")
		}
	}
	
	$RemoveEditorButton_Click = {
		#TODO: Place custom script here
		$EditorsListBox.Items.Remove($EditorsListBox.SelectedItem)
	}
	
	$AddAdministratorButton_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$AdminAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which users do you want to add as Administrators?", "Administrator", "")
		$UserToAdd = Get-FullDN -username $AdminAdd
		if ($UserToAdd -ne $null)
		{
			$AdministratorsListBox.Items.Add("$UserToAdd")
		}
	}
	
	$RemoveAdministratorsButton_Click = {
		#TODO: Place custom script here
		$AdministratorsListBox.Items.Remove($AdministratorsListBox.SelectedItem)
	}
	
	$buttonCreateSharedMailbox_Click = {
		#TODO: Place custom script here
		$Alias = $AliasTextBox.Text
		$DisplayName = $DisplayNameTextBox.Text
		$Email = $EmailTextBox.Text
		$Owner = $OwnerTextBox.Text
		
		if ($Alias -eq "" -or $DisplayName -eq "" -or $Email -eq "" -or $Owner -eq "")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Fields are not filled out!", "Error")
			return
		}
		
		if ($Alias -notmatch "^[a-zA-Z0-9_-]*$")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the Alias", "Error")
			return
		}
		if ($DisplayName -notmatch "^[a-zA-Z0-9_ÖöÄäÅåÆæØøÜüÉé -]*$")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the DisplayName", "Error")
			return
		}
		if ($Email -notmatch "@arlafoods.com")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("The email is not containing @arlafoods.com", "Error")
			return
		}
		else
		{
			CreateSharedMailbox -Alias $Alias -DisplayName $DisplayName -Email $Email -Owner $Owner
		}
		
		
	}
	
	$buttonAdd_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which user do you want to add as owner?", "Owner", "")
		$UserToAdd = Get-FullDN -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$OwnerTextBox.Text = $UserToAdd
		}
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formCreateSharedMailbox.Close()
	}
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCreateSharedMailbox.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:CreateSharedMailbox_OwnerTextBox = $OwnerTextBox.Text
		$script:CreateSharedMailbox_EmailTextBox = $EmailTextBox.Text
		$script:CreateSharedMailbox_AdministratorsListBox = $AdministratorsListBox.SelectedItems
		$script:CreateSharedMailbox_EditorsListBox = $EditorsListBox.SelectedItems
		$script:CreateSharedMailbox_AliasTextBox = $AliasTextBox.Text
		$script:CreateSharedMailbox_DisplayNameTextBox = $DisplayNameTextBox.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAdd.remove_Click($buttonAdd_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonCreateSharedMailbox.remove_Click($buttonCreateSharedMailbox_Click)
			$AddEditorButton.remove_Click($AddEditorButton_Click)
			$RemoveEditorButton.remove_Click($RemoveEditorButton_Click)
			$AddAdministratorButton.remove_Click($AddAdministratorButton_Click)
			$RemoveAdministratorsButton.remove_Click($RemoveAdministratorsButton_Click)
			$formCreateSharedMailbox.remove_Load($formCreateSharedMailbox_Load)
			$formCreateSharedMailbox.remove_Load($Form_StateCorrection_Load)
			$formCreateSharedMailbox.remove_Closing($Form_StoreValues_Closing)
			$formCreateSharedMailbox.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCreateSharedMailbox.SuspendLayout()
	#
	# formCreateSharedMailbox
	#
	$formCreateSharedMailbox.Controls.Add($buttonAdd)
	$formCreateSharedMailbox.Controls.Add($labelOwner)
	$formCreateSharedMailbox.Controls.Add($OwnerTextBox)
	$formCreateSharedMailbox.Controls.Add($labelEmail)
	$formCreateSharedMailbox.Controls.Add($EmailTextBox)
	$formCreateSharedMailbox.Controls.Add($buttonExit)
	$formCreateSharedMailbox.Controls.Add($buttonCreateSharedMailbox)
	$formCreateSharedMailbox.Controls.Add($AddEditorButton)
	$formCreateSharedMailbox.Controls.Add($RemoveEditorButton)
	$formCreateSharedMailbox.Controls.Add($AddAdministratorButton)
	$formCreateSharedMailbox.Controls.Add($RemoveAdministratorsButton)
	$formCreateSharedMailbox.Controls.Add($labelEditors)
	$formCreateSharedMailbox.Controls.Add($labelAdministrators)
	$formCreateSharedMailbox.Controls.Add($AdministratorsListBox)
	$formCreateSharedMailbox.Controls.Add($EditorsListBox)
	$formCreateSharedMailbox.Controls.Add($labelAlias)
	$formCreateSharedMailbox.Controls.Add($labelDisplayName)
	$formCreateSharedMailbox.Controls.Add($AliasTextBox)
	$formCreateSharedMailbox.Controls.Add($DisplayNameTextBox)
	$formCreateSharedMailbox.AutoScaleDimensions = '6, 13'
	$formCreateSharedMailbox.AutoScaleMode = 'Font'
	$formCreateSharedMailbox.ClientSize = '400, 446'
	$formCreateSharedMailbox.FormBorderStyle = 'FixedDialog'
	$formCreateSharedMailbox.MaximizeBox = $False
	$formCreateSharedMailbox.Name = 'formCreateSharedMailbox'
	$formCreateSharedMailbox.StartPosition = 'CenterParent'
	$formCreateSharedMailbox.Text = 'Create Shared Mailbox'
	$formCreateSharedMailbox.add_Load($formCreateSharedMailbox_Load)
	#
	# buttonAdd
	#
	$buttonAdd.Location = '264, 119'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '59, 19'
	$buttonAdd.TabIndex = 5
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# labelOwner
	#
	$labelOwner.Location = '12, 122'
	$labelOwner.Name = 'labelOwner'
	$labelOwner.Size = '90, 17'
	$labelOwner.TabIndex = 40
	$labelOwner.Text = 'Owner:'
	$labelOwner.UseCompatibleTextRendering = $True
	#
	# OwnerTextBox
	#
	$OwnerTextBox.Location = '108, 119'
	$OwnerTextBox.MaxLength = 256
	$OwnerTextBox.Name = 'OwnerTextBox'
	$OwnerTextBox.ReadOnly = $True
	$OwnerTextBox.Size = '150, 20'
	$OwnerTextBox.TabIndex = 4
	#
	# labelEmail
	#
	$labelEmail.Location = '12, 96'
	$labelEmail.Name = 'labelEmail'
	$labelEmail.Size = '90, 23'
	$labelEmail.TabIndex = 38
	$labelEmail.Text = 'Email:'
	$labelEmail.UseCompatibleTextRendering = $True
	#
	# EmailTextBox
	#
	$EmailTextBox.Location = '108, 93'
	$EmailTextBox.MaxLength = 256
	$EmailTextBox.Name = 'EmailTextBox'
	$EmailTextBox.Size = '150, 20'
	$EmailTextBox.TabIndex = 3
	#
	# buttonExit
	#
	$buttonExit.Location = '12, 411'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 11
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonCreateSharedMailbox
	#
	$buttonCreateSharedMailbox.Location = '261, 411'
	$buttonCreateSharedMailbox.Name = 'buttonCreateSharedMailbox'
	$buttonCreateSharedMailbox.Size = '124, 23'
	$buttonCreateSharedMailbox.TabIndex = 10
	$buttonCreateSharedMailbox.Text = 'Create Shared Mailbox'
	$buttonCreateSharedMailbox.UseCompatibleTextRendering = $True
	$buttonCreateSharedMailbox.UseVisualStyleBackColor = $True
	$buttonCreateSharedMailbox.add_Click($buttonCreateSharedMailbox_Click)
	#
	# AddEditorButton
	#
	$AddEditorButton.Location = '130, 356'
	$AddEditorButton.Name = 'AddEditorButton'
	$AddEditorButton.Size = '59, 19'
	$AddEditorButton.TabIndex = 8
	$AddEditorButton.Text = 'Add'
	$AddEditorButton.UseCompatibleTextRendering = $True
	$AddEditorButton.UseVisualStyleBackColor = $True
	$AddEditorButton.add_Click($AddEditorButton_Click)
	#
	# RemoveEditorButton
	#
	$RemoveEditorButton.Location = '195, 356'
	$RemoveEditorButton.Name = 'RemoveEditorButton'
	$RemoveEditorButton.Size = '59, 19'
	$RemoveEditorButton.TabIndex = 9
	$RemoveEditorButton.Text = 'Remove'
	$RemoveEditorButton.UseCompatibleTextRendering = $True
	$RemoveEditorButton.UseVisualStyleBackColor = $True
	$RemoveEditorButton.add_Click($RemoveEditorButton_Click)
	#
	# AddAdministratorButton
	#
	$AddAdministratorButton.Location = '130, 217'
	$AddAdministratorButton.Name = 'AddAdministratorButton'
	$AddAdministratorButton.Size = '59, 19'
	$AddAdministratorButton.TabIndex = 6
	$AddAdministratorButton.Text = 'Add'
	$AddAdministratorButton.UseCompatibleTextRendering = $True
	$AddAdministratorButton.UseVisualStyleBackColor = $True
	$AddAdministratorButton.add_Click($AddAdministratorButton_Click)
	#
	# RemoveAdministratorsButton
	#
	$RemoveAdministratorsButton.Location = '195, 217'
	$RemoveAdministratorsButton.Name = 'RemoveAdministratorsButton'
	$RemoveAdministratorsButton.Size = '59, 19'
	$RemoveAdministratorsButton.TabIndex = 7
	$RemoveAdministratorsButton.Text = 'Remove'
	$RemoveAdministratorsButton.UseCompatibleTextRendering = $True
	$RemoveAdministratorsButton.UseVisualStyleBackColor = $True
	$RemoveAdministratorsButton.add_Click($RemoveAdministratorsButton_Click)
	#
	# labelEditors
	#
	$labelEditors.Location = '12, 242'
	$labelEditors.Name = 'labelEditors'
	$labelEditors.Size = '90, 23'
	$labelEditors.TabIndex = 29
	$labelEditors.Text = 'Editors:'
	$labelEditors.UseCompatibleTextRendering = $True
	#
	# labelAdministrators
	#
	$labelAdministrators.Location = '12, 142'
	$labelAdministrators.Name = 'labelAdministrators'
	$labelAdministrators.Size = '90, 23'
	$labelAdministrators.TabIndex = 28
	$labelAdministrators.Text = 'Administrators:'
	$labelAdministrators.UseCompatibleTextRendering = $True
	#
	# AdministratorsListBox
	#
	$AdministratorsListBox.FormattingEnabled = $True
	$AdministratorsListBox.Location = '108, 142'
	$AdministratorsListBox.Name = 'AdministratorsListBox'
	$AdministratorsListBox.Size = '150, 69'
	$AdministratorsListBox.TabIndex = 12
	#
	# EditorsListBox
	#
	$EditorsListBox.FormattingEnabled = $True
	$EditorsListBox.Location = '108, 242'
	$EditorsListBox.Name = 'EditorsListBox'
	$EditorsListBox.Size = '150, 108'
	$EditorsListBox.TabIndex = 13
	#
	# labelAlias
	#
	$labelAlias.Location = '12, 71'
	$labelAlias.Name = 'labelAlias'
	$labelAlias.Size = '90, 23'
	$labelAlias.TabIndex = 25
	$labelAlias.Text = 'Alias:'
	$labelAlias.UseCompatibleTextRendering = $True
	#
	# labelDisplayName
	#
	$labelDisplayName.Location = '12, 48'
	$labelDisplayName.Name = 'labelDisplayName'
	$labelDisplayName.Size = '90, 23'
	$labelDisplayName.TabIndex = 24
	$labelDisplayName.Text = 'Display Name:'
	$labelDisplayName.UseCompatibleTextRendering = $True
	#
	# AliasTextBox
	#
	$AliasTextBox.Location = '108, 68'
	$AliasTextBox.MaxLength = 20
	$AliasTextBox.Name = 'AliasTextBox'
	$AliasTextBox.Size = '150, 20'
	$AliasTextBox.TabIndex = 2
	#
	# DisplayNameTextBox
	#
	$DisplayNameTextBox.Location = '108, 45'
	$DisplayNameTextBox.MaxLength = 256
	$DisplayNameTextBox.Name = 'DisplayNameTextBox'
	$DisplayNameTextBox.Size = '150, 20'
	$DisplayNameTextBox.TabIndex = 1
	$formCreateSharedMailbox.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCreateSharedMailbox.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCreateSharedMailbox.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCreateSharedMailbox.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCreateSharedMailbox.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCreateSharedMailbox.ShowDialog()

}
#endregion Source: CreateSharedMailbox.psf

#region Source: CreateDistributionList.psf
function Show-CreateDistributionList_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCreateDistributionLi = New-Object 'System.Windows.Forms.Form'
	$labelOwner = New-Object 'System.Windows.Forms.Label'
	$OwnerAdd = New-Object 'System.Windows.Forms.Button'
	$OwnerTextBox = New-Object 'System.Windows.Forms.TextBox'
	$ListTypeComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$labelListType = New-Object 'System.Windows.Forms.Label'
	$checkboxRecieveMailsExternal = New-Object 'System.Windows.Forms.CheckBox'
	$AddMemberOfButton = New-Object 'System.Windows.Forms.Button'
	$RemoveMemberOfButton = New-Object 'System.Windows.Forms.Button'
	$labelMemberOf = New-Object 'System.Windows.Forms.Label'
	$MemberOfListBox = New-Object 'System.Windows.Forms.ListBox'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$labelAlias = New-Object 'System.Windows.Forms.Label'
	$labelDisplayName = New-Object 'System.Windows.Forms.Label'
	$AliasTextBox = New-Object 'System.Windows.Forms.TextBox'
	$DisplayNameTextBox = New-Object 'System.Windows.Forms.TextBox'
	$buttonCreateList = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function VerifyGroup
	{
		param (
			[string]$Alias
		)
		$DistributionGroupTest = Get-DistributionGroup -Identity $Alias -DomainController $DomainController -ErrorAction SilentlyContinue
		
		if ($DistributionGroupTest -eq $null)
		{
			return $true
		}
		else
		{
			return $false
		}
	}
	
	function CreateGroup
	{
		param (
			[string]$Name,
			[string]$Alias,
			[bool]$externalMails = $false,
			[string]$Owner,
			[string]$ListType
		)
		$RoomListResult = $false
		
		$AdCheck = Check-AD -Alias $Alias
		if ($AdCheck -eq $false)
		{
			#Do nothing, let the script continue
		}
		else
		{
			#Found a match, cancels the whole function
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Creation of the distribution list failed because there are already a group with that name", "FAILED")
			Add-Log -body "Distribution List - Creation failed for $Alias due to already existing AD objects"
			return
		}
		
		New-DistributionGroup -Name $Name -OrganizationalUnit $DistributionList_defaultOu -SAMAccountName $Alias -Alias $Alias -DomainController $DomainController
		
		#Ensure that the group is created and found in Exchange/AD before proceeding
		do
		{
			$GroupCheck = Get-DistributionGroup -Identity $Alias -ErrorAction SilentlyContinue
			$DistributionListDn = Get-FullDN -username $Alias
			Start-Sleep 1
			$i++
			if ($i -gt 119)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 2 minutes has passed since the objects were created but they are still not found", "ERROR")
				Add-Log -body "Distribution List - Creation failed for $Alias due to the object not being found after creation "
				return
			}
		}
		while ($GroupCheck -eq $null -or $DistributionListDn -eq $null -and $i -lt 120)
		
		#Set the Owner for the group
		$DistributionListDn = Get-FullDN -username $Alias
		if ($Owner)
		{
			Set-DistributionGroup -Identity $DistributionListDn -ManagedBy $Owner -BypassSecurityGroupManagerCheck -DomainController $DomainController
		}
		
		#Add the members of
		foreach ($MemberOfListBoxItem in $MemberOfListBox.Items)
		{
			Add-DistributionGroupMember -Identity $DistributionListDn -Member $MemberOfListBoxItem -BypassSecurityGroupManagerCheck -DomainController $DomainController
		}
		
		#Enable so that non-authenticated users can mail this distribution group.
		if ($externalMails -eq $true)
		{
			Set-DistributionGroup -BypassSecurityGroupManagerCheck -RequireSenderAuthenticationEnabled $false -Identity $DistributionListDn -DomainController $DomainController
		}
		
		if ($ListType -eq "Room List")
		{
			Set-DistributionGroup -Identity $DistributionListDn -RoomList
			Add-Log -body "Distribution List - Group $DistributionListDn has been converted to a Room List"
			$RoomListResult = $true
		}
		
		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
		[void][System.Windows.Forms.MessageBox]::Show("Group has been created", "Success!")
		if ($RoomListResult -eq $true)
		{
			Add-Log -body "Room List List - Room List $DistributionListDn created"
		}
		else
		{
			Add-Log -body "Distribution List - Group $DistributionListDn created"
		}
	}
	
	$formCreateDistributionLi_Load = {
		#TODO: Place custom script here
		$ListTypeComboBox.SelectedIndex = 0
	}
	
	$AddMemberOfButton_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$MemberOfAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which user do you want to add as members of?", "Members of", "")
		$UserToAdd = Get-FullDN -username $MemberOfAdd
		if ($UserToAdd -ne $null)
		{
			$MemberOfListBox.Items.Add("$UserToAdd")
		}
	}
	
	$RemoveMemberOfButton_Click = {
		#TODO: Place custom script here
		$MemberOfListBox.Items.Remove($MemberOfListBox.SelectedItem)
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formCreateDistributionLi.Close()
	}
	
	
	$OwnerAdd_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which user do you want to add as owner?", "Owner", "")
		$UserToAdd = Get-FullDN -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$OwnerTextBox.Text = $UserToAdd
		}
	}
	
	$ListTypeComboBox_SelectedIndexChanged = {
		#TODO: Place custom script here
		if ($ListTypeComboBox.Items -eq "ROom List")
		{
			#Write-Host "Bingo"
		}
	}
	
	$buttonCreateList_Click = {
		#TODO: Place custom script here
		$Alias = $($AliasTextBox.Text).Trim()
		$DisplayName = $DisplayNameTextBox.Text
		$Owner = $OwnerTextBox.Text
		$ListType = $ListTypeComboBox.Text
		Write-Host $ListTypeComboBox.Text
		$GoOrNot = VerifyGroup -Alias $Alias
		
		if ($Alias -notmatch "^[-a-zA-Z0-9_.]*$" -or $Alias -eq "")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the Alias.`nThis name must be characters (only a-z) + numbers and you should replace spaces with underscores.", "Error")
			return
		}
		if ($DisplayName -notmatch "^[-a-zA-Z0-9 _.åäöÅÄÖæøÆØèìÉÍ&]*$" -or $DisplayName -eq "")
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Invalid character in the DisplayName", "Error")
			return
		}
		#Group did not exist
		if ($GoOrNot -eq $true)
		{
			
			if ($checkboxRecieveMailsExternal.Checked)
			{
				CreateGroup -Alias $Alias -Name $DisplayName -externalMails $true -Owner $owner -ListType $ListType
			}
			
			#If the External mail was not checked, then we are good to go and create the contact!
			else
			{
				CreateGroup -Alias $Alias -Name $DisplayName -Owner $owner -ListType $ListType
			}
		}
		
		
		#There is already a distribution group with this Alias
		Else
		{
			[void][System.Windows.Forms.MessageBox]::Show("There is already a distribution group existing with this Alias, please verify that it's not already existing and then chose a new Alias", "Error!")
		}
	}
	
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCreateDistributionLi.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:CreateDistributionList_OwnerTextBox = $OwnerTextBox.Text
		$script:CreateDistributionList_ListTypeComboBox = $ListTypeComboBox.Text
		$script:CreateDistributionList_ListTypeComboBox_SelectedItem = $ListTypeComboBox.SelectedItem
		$script:CreateDistributionList_checkboxRecieveMailsExternal = $checkboxRecieveMailsExternal.Checked
		$script:CreateDistributionList_MemberOfListBox = $MemberOfListBox.SelectedItems
		$script:CreateDistributionList_AliasTextBox = $AliasTextBox.Text
		$script:CreateDistributionList_DisplayNameTextBox = $DisplayNameTextBox.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$OwnerAdd.remove_Click($OwnerAdd_Click)
			$ListTypeComboBox.remove_SelectedIndexChanged($ListTypeComboBox_SelectedIndexChanged)
			$AddMemberOfButton.remove_Click($AddMemberOfButton_Click)
			$RemoveMemberOfButton.remove_Click($RemoveMemberOfButton_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonCreateList.remove_Click($buttonCreateList_Click)
			$formCreateDistributionLi.remove_Load($formCreateDistributionLi_Load)
			$formCreateDistributionLi.remove_Load($Form_StateCorrection_Load)
			$formCreateDistributionLi.remove_Closing($Form_StoreValues_Closing)
			$formCreateDistributionLi.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCreateDistributionLi.SuspendLayout()
	#
	# formCreateDistributionLi
	#
	$formCreateDistributionLi.Controls.Add($labelOwner)
	$formCreateDistributionLi.Controls.Add($OwnerAdd)
	$formCreateDistributionLi.Controls.Add($OwnerTextBox)
	$formCreateDistributionLi.Controls.Add($ListTypeComboBox)
	$formCreateDistributionLi.Controls.Add($labelListType)
	$formCreateDistributionLi.Controls.Add($checkboxRecieveMailsExternal)
	$formCreateDistributionLi.Controls.Add($AddMemberOfButton)
	$formCreateDistributionLi.Controls.Add($RemoveMemberOfButton)
	$formCreateDistributionLi.Controls.Add($labelMemberOf)
	$formCreateDistributionLi.Controls.Add($MemberOfListBox)
	$formCreateDistributionLi.Controls.Add($buttonExit)
	$formCreateDistributionLi.Controls.Add($labelAlias)
	$formCreateDistributionLi.Controls.Add($labelDisplayName)
	$formCreateDistributionLi.Controls.Add($AliasTextBox)
	$formCreateDistributionLi.Controls.Add($DisplayNameTextBox)
	$formCreateDistributionLi.Controls.Add($buttonCreateList)
	$formCreateDistributionLi.AutoScaleDimensions = '6, 13'
	$formCreateDistributionLi.AutoScaleMode = 'Font'
	$formCreateDistributionLi.ClientSize = '315, 347'
	$formCreateDistributionLi.MaximizeBox = $False
	$formCreateDistributionLi.Name = 'formCreateDistributionLi'
	$formCreateDistributionLi.StartPosition = 'CenterParent'
	$formCreateDistributionLi.Text = 'Create Distribution List'
	$formCreateDistributionLi.add_Load($formCreateDistributionLi_Load)
	#
	# labelOwner
	#
	$labelOwner.Location = '12, 91'
	$labelOwner.Name = 'labelOwner'
	$labelOwner.Size = '90, 23'
	$labelOwner.TabIndex = 44
	$labelOwner.Text = 'Owner:'
	$labelOwner.UseCompatibleTextRendering = $True
	#
	# OwnerAdd
	#
	$OwnerAdd.Location = '199, 117'
	$OwnerAdd.Name = 'OwnerAdd'
	$OwnerAdd.Size = '59, 19'
	$OwnerAdd.TabIndex = 5
	$OwnerAdd.Text = 'Add'
	$OwnerAdd.UseCompatibleTextRendering = $True
	$OwnerAdd.UseVisualStyleBackColor = $True
	$OwnerAdd.add_Click($OwnerAdd_Click)
	#
	# OwnerTextBox
	#
	$OwnerTextBox.Location = '108, 91'
	$OwnerTextBox.MaxLength = 256
	$OwnerTextBox.Name = 'OwnerTextBox'
	$OwnerTextBox.ReadOnly = $True
	$OwnerTextBox.Size = '150, 20'
	$OwnerTextBox.TabIndex = 4
	#
	# ListTypeComboBox
	#
	$ListTypeComboBox.DisplayMember = 'Distribution List'
	$ListTypeComboBox.DropDownStyle = 'DropDownList'
	$ListTypeComboBox.FormattingEnabled = $True
	[void]$ListTypeComboBox.Items.Add('Distribution List')
	[void]$ListTypeComboBox.Items.Add('Room List')
	$ListTypeComboBox.Location = '108, 21'
	$ListTypeComboBox.Name = 'ListTypeComboBox'
	$ListTypeComboBox.Size = '150, 21'
	$ListTypeComboBox.TabIndex = 1
	$ListTypeComboBox.add_SelectedIndexChanged($ListTypeComboBox_SelectedIndexChanged)
	#
	# labelListType
	#
	$labelListType.Location = '12, 21'
	$labelListType.Name = 'labelListType'
	$labelListType.Size = '90, 23'
	$labelListType.TabIndex = 19
	$labelListType.Text = 'List type:'
	$labelListType.UseCompatibleTextRendering = $True
	#
	# checkboxRecieveMailsExternal
	#
	$checkboxRecieveMailsExternal.Location = '108, 281'
	$checkboxRecieveMailsExternal.Name = 'checkboxRecieveMailsExternal'
	$checkboxRecieveMailsExternal.Size = '146, 24'
	$checkboxRecieveMailsExternal.TabIndex = 8
	$checkboxRecieveMailsExternal.Text = 'Recieve mails externally'
	$checkboxRecieveMailsExternal.UseCompatibleTextRendering = $True
	$checkboxRecieveMailsExternal.UseVisualStyleBackColor = $True
	#
	# AddMemberOfButton
	#
	$AddMemberOfButton.Location = '130, 256'
	$AddMemberOfButton.Name = 'AddMemberOfButton'
	$AddMemberOfButton.Size = '59, 19'
	$AddMemberOfButton.TabIndex = 6
	$AddMemberOfButton.Text = 'Add'
	$AddMemberOfButton.UseCompatibleTextRendering = $True
	$AddMemberOfButton.UseVisualStyleBackColor = $True
	$AddMemberOfButton.add_Click($AddMemberOfButton_Click)
	#
	# RemoveMemberOfButton
	#
	$RemoveMemberOfButton.Location = '195, 256'
	$RemoveMemberOfButton.Name = 'RemoveMemberOfButton'
	$RemoveMemberOfButton.Size = '59, 19'
	$RemoveMemberOfButton.TabIndex = 7
	$RemoveMemberOfButton.Text = 'Remove'
	$RemoveMemberOfButton.UseCompatibleTextRendering = $True
	$RemoveMemberOfButton.UseVisualStyleBackColor = $True
	$RemoveMemberOfButton.add_Click($RemoveMemberOfButton_Click)
	#
	# labelMemberOf
	#
	$labelMemberOf.Location = '12, 142'
	$labelMemberOf.Name = 'labelMemberOf'
	$labelMemberOf.Size = '90, 23'
	$labelMemberOf.TabIndex = 10
	$labelMemberOf.Text = 'Member of:'
	$labelMemberOf.UseCompatibleTextRendering = $True
	#
	# MemberOfListBox
	#
	$MemberOfListBox.FormattingEnabled = $True
	$MemberOfListBox.Location = '108, 142'
	$MemberOfListBox.Name = 'MemberOfListBox'
	$MemberOfListBox.Size = '150, 108'
	$MemberOfListBox.TabIndex = 11
	#
	# buttonExit
	#
	$buttonExit.Location = '12, 312'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 10
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# labelAlias
	#
	$labelAlias.Location = '12, 70'
	$labelAlias.Name = 'labelAlias'
	$labelAlias.Size = '90, 23'
	$labelAlias.TabIndex = 5
	$labelAlias.Text = 'Alias:'
	$labelAlias.UseCompatibleTextRendering = $True
	#
	# labelDisplayName
	#
	$labelDisplayName.Location = '12, 47'
	$labelDisplayName.Name = 'labelDisplayName'
	$labelDisplayName.Size = '90, 23'
	$labelDisplayName.TabIndex = 4
	$labelDisplayName.Text = 'Display Name:'
	$labelDisplayName.UseCompatibleTextRendering = $True
	#
	# AliasTextBox
	#
	$AliasTextBox.Location = '108, 67'
	$AliasTextBox.MaxLength = 20
	$AliasTextBox.Name = 'AliasTextBox'
	$AliasTextBox.Size = '150, 20'
	$AliasTextBox.TabIndex = 3
	#
	# DisplayNameTextBox
	#
	$DisplayNameTextBox.Location = '108, 44'
	$DisplayNameTextBox.Name = 'DisplayNameTextBox'
	$DisplayNameTextBox.Size = '150, 20'
	$DisplayNameTextBox.TabIndex = 2
	#
	# buttonCreateList
	#
	$buttonCreateList.Location = '228, 312'
	$buttonCreateList.Name = 'buttonCreateList'
	$buttonCreateList.Size = '75, 23'
	$buttonCreateList.TabIndex = 9
	$buttonCreateList.Text = 'Create List'
	$buttonCreateList.UseCompatibleTextRendering = $True
	$buttonCreateList.UseVisualStyleBackColor = $True
	$buttonCreateList.add_Click($buttonCreateList_Click)
	$formCreateDistributionLi.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCreateDistributionLi.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCreateDistributionLi.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCreateDistributionLi.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCreateDistributionLi.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCreateDistributionLi.ShowDialog()

}
#endregion Source: CreateDistributionList.psf

#region Source: CreateContact.psf
function Show-CreateContact_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCreateContacts = New-Object 'System.Windows.Forms.Form'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$labelMemberOf = New-Object 'System.Windows.Forms.Label'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$MemberOfTextBox = New-Object 'System.Windows.Forms.TextBox'
	$buttonCreateContact = New-Object 'System.Windows.Forms.Button'
	$ExternalAddressTextBox = New-Object 'System.Windows.Forms.TextBox'
	$PhoneNrTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelExternalAddress = New-Object 'System.Windows.Forms.Label'
	$labelPhoneNr = New-Object 'System.Windows.Forms.Label'
	$ContactTypeComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$labelContactType = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function Create-SMS-Contact
	{
		param (
			[string]$PhoneNr,
			[string]$MemberOfGroup
		)
		
		$EsmsEmailAddress = $PhoneNr + "@esms.nu"
		$EsmsAlias = $PhoneNr + ".esms.nu"
		
		if ((Check-ContactAD -Email $EsmsEmailAddress) -eq $false)
		{
			#User does not exist
			New-MailContact -ExternalEmailAddress "SMTP:$EsmsEmailAddress" -Name $EsmsAlias -Alias $EsmsAlias -LastName $PhoneNr -OrganizationalUnit $Contacts_defaultOu -DomainController $DomainController
			
			#Wait until the contact is found.
			do
			{
				$MailContactTest = Get-MailContact -Identity $EsmsAlias -DomainController $DomainController
				Start-Sleep 1
				$i++
				if ($i -gt 119)
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 2 minutes has passed since the object were created but it is still not found", "ERROR")
				}
			}
			while ($MailContactTest -eq $null -and $i -lt 120)
			
			$ContactDn = Get-FullDNContacts -Email $EsmsEmailAddress
			Set-MailContact -HiddenFromAddressListsEnabled $true -EmailAddressPolicyEnabled $false -EmailAddresses "SMTP:$EsmsEmailAddress" -Identity $ContactDn -DomainController $DomainController
			Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Contact has been created and added to the group", "Success")
			Add-Log -body "SMS Contacts - Created contact $ContactDn"
		}
		
		else
		{
			#Contact already exists
			$ContactDn = Get-FullDNContacts -Email $EsmsEmailAddress
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			if ([System.Windows.Forms.MessageBox]::Show("The SMS contact already exists! Do you want to try and add him to the group anyways?", "Error", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
			{
				if ((Get-DistributionGroupMember -Identity $MemberOfGroup | where { $_.Name -eq "$EsmsAlias" }) -eq $null)
				{
					Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("User was added to the group", "Success")
					Add-Log -body "SMS Contacts - Contact added to group. $ContactDn"
				}
				else
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("The user was already a member of the group", "Error")
				}
			}
		}
		
	}
	
	function Create-External-Contact
	{
		param (
			[string]$ExternalAddress,
			[string]$MemberOfGroup
		)
		
		$EmailAddress = $ExternalAddress
		$Alias = $EmailAddress.Replace("@", ".")
		$DisplayName = ($EmailAddress.Split("@"))[0]
		
		if ((Check-ContactAD -Email $EmailAddress) -eq $false)
		{
			#User does not exist
			New-MailContact -ExternalEmailAddress "SMTP:$EmailAddress" -Name $Alias -Alias $Alias -LastName $DisplayName -OrganizationalUnit $Contacts_defaultOu -DomainController $DomainController
			
			#Wait until the contact is found.
			do
			{
				$MailContactTest = Get-MailContact -Identity $Alias -DomainController $DomainController
				Start-Sleep 1
				$i++
				if ($i -gt 119)
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Creation failed. 2 minutes has passed since the object were created but it is still not found", "ERROR")
					return
				}
			}
			while ($MailContactTest -eq $null -and $i -lt 120)
			
			$ContactDn = Get-FullDNContacts -Email $EmailAddress
			
			Set-MailContact -HiddenFromAddressListsEnabled $true -EmailAddressPolicyEnabled $false -Identity $ContactDn -EmailAddresses "SMTP:$EmailAddress" -DomainController $DomainController
			Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Contact has been created and added to the group", "Success")
			Add-Log -body "External Contacts - Created contact $ContactDn"
		}
		
		else
		{
			#Contact already exists
			$ContactDn = Get-FullDNContacts -Email $EmailAddress
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			if ([System.Windows.Forms.MessageBox]::Show("The contact already exists! Do you want to try and add him to the group anyways?", "Error", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
			{
				if ((Get-DistributionGroupMember -Identity $MemberOfGroup | where { $_.Name -eq "$Alias" }) -eq $null)
				{
					Add-DistributionGroupMember -Identity $MemberOfGroup -Member $ContactDn -BypassSecurityGroupManagerCheck -DomainController $DomainController
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("User was added to the group", "Success")
					Add-Log -body "External Contacts - Contact added to group. $ContactDn"
				}
				else
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("The user was already a member of the group", "Error")
				}
			}
		}
		
	}
	
	$formCreateContacts_Load = {
		#TODO: Initialize Form Controls here
		$ContactTypeComboBox.SelectedIndex = 0
	}
	
	$ContactTypeComboBox_SelectedIndexChanged = {
		#TODO: Place custom script here
		if ($ContactTypeComboBox.Text -eq "SMS Contacts")
		{
			$ExternalAddressTextBox.Visible = $false
			$labelExternalAddress.Visible = $false
			$PhoneNrTextBox.Visible = $true
			$labelPhoneNr.Visible = $true
		}
		if ($ContactTypeComboBox.Text -eq "External Address")
		{
			$PhoneNrTextBox.Visible = $false
			$labelPhoneNr.Visible = $false
			$ExternalAddressTextBox.Visible = $true
			$labelExternalAddress.Visible = $true
		}
	}
	
	$buttonAdd_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which group do you want to add the user to?", "Group", "")
		$UserToAdd = Get-FullDNDistributionGroups -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			$MemberOfTextBox.Text = $UserToAdd
		}
	}
	
	$buttonCreateContact_Click = {
		#TODO: Place custom script here
		if ($ContactTypeComboBox.Text -eq "SMS Contacts")
		{
			$MemberOfGroup = $MemberOfTextBox.Text
			$PhoneNr = $PhoneNrTextBox.Text
			if ($MemberOfGroup -ne "" -and $PhoneNr -ne "")
			{
				if ($PhoneNr -notmatch "^[0-9+]*$")
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Please ensure the phone nr is entered correctly!", "Error")
				}
				else
				{
					Create-SMS-Contact -MemberOfGroup $MemberOfGroup -PhoneNr $PhoneNr
				}
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("One of the fields is empty! You must fill in both to create a contact", "Error")
			}
		}
		elseif ($ContactTypeComboBox.Text -eq "External Address")
		{
			$MemberOfGroup = $MemberOfTextBox.Text
			$ExternalAddress = $ExternalAddressTextBox.Text
			if ($MemberOfGroup -ne "" -and $ExternalAddress -ne "")
			{
				$EmailCheck = [bool]($ExternalAddress -as [Net.Mail.MailAddress])
				if ($ExternalAddress -notmatch "^[a-zA-Z0-9@._-]*$" -or $EmailCheck -eq $false)
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("Please ensure that the external address is correct!", "Error")
				}
				
				else
				{
					Create-External-Contact -ExternalAddress $ExternalAddress -MemberOfGroup $MemberOfGroup
				}
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("One of the fields is empty! You must fill in both to create a contact", "Error")
			}
		}
		else
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Chose a contact type!", "Error")
		}
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formCreateContacts.Close()
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCreateContacts.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:CreateContact_MemberOfTextBox = $MemberOfTextBox.Text
		$script:CreateContact_ExternalAddressTextBox = $ExternalAddressTextBox.Text
		$script:CreateContact_PhoneNrTextBox = $PhoneNrTextBox.Text
		$script:CreateContact_ContactTypeComboBox = $ContactTypeComboBox.Text
		$script:CreateContact_ContactTypeComboBox_SelectedItem = $ContactTypeComboBox.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonAdd.remove_Click($buttonAdd_Click)
			$buttonCreateContact.remove_Click($buttonCreateContact_Click)
			$ContactTypeComboBox.remove_SelectedIndexChanged($ContactTypeComboBox_SelectedIndexChanged)
			$formCreateContacts.remove_Load($formCreateContacts_Load)
			$formCreateContacts.remove_Load($Form_StateCorrection_Load)
			$formCreateContacts.remove_Closing($Form_StoreValues_Closing)
			$formCreateContacts.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCreateContacts.SuspendLayout()
	#
	# formCreateContacts
	#
	$formCreateContacts.Controls.Add($buttonExit)
	$formCreateContacts.Controls.Add($labelMemberOf)
	$formCreateContacts.Controls.Add($buttonAdd)
	$formCreateContacts.Controls.Add($MemberOfTextBox)
	$formCreateContacts.Controls.Add($buttonCreateContact)
	$formCreateContacts.Controls.Add($ExternalAddressTextBox)
	$formCreateContacts.Controls.Add($PhoneNrTextBox)
	$formCreateContacts.Controls.Add($labelExternalAddress)
	$formCreateContacts.Controls.Add($labelPhoneNr)
	$formCreateContacts.Controls.Add($ContactTypeComboBox)
	$formCreateContacts.Controls.Add($labelContactType)
	$formCreateContacts.AutoScaleDimensions = '6, 13'
	$formCreateContacts.AutoScaleMode = 'Font'
	$formCreateContacts.ClientSize = '296, 209'
	$formCreateContacts.FormBorderStyle = 'FixedDialog'
	$formCreateContacts.MaximizeBox = $False
	$formCreateContacts.Name = 'formCreateContacts'
	$formCreateContacts.StartPosition = 'CenterParent'
	$formCreateContacts.Text = 'Create Contacts'
	$formCreateContacts.add_Load($formCreateContacts_Load)
	#
	# buttonExit
	#
	$buttonExit.Location = '12, 173'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 6
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# labelMemberOf
	#
	$labelMemberOf.Location = '12, 76'
	$labelMemberOf.Name = 'labelMemberOf'
	$labelMemberOf.Size = '100, 23'
	$labelMemberOf.TabIndex = 9
	$labelMemberOf.Text = 'Member of:'
	$labelMemberOf.UseCompatibleTextRendering = $True
	#
	# buttonAdd
	#
	$buttonAdd.Location = '243, 102'
	$buttonAdd.Name = 'buttonAdd'
	$buttonAdd.Size = '41, 23'
	$buttonAdd.TabIndex = 4
	$buttonAdd.Text = 'Add'
	$buttonAdd.UseCompatibleTextRendering = $True
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# MemberOfTextBox
	#
	$MemberOfTextBox.Location = '118, 76'
	$MemberOfTextBox.Name = 'MemberOfTextBox'
	$MemberOfTextBox.ReadOnly = $True
	$MemberOfTextBox.Size = '166, 20'
	$MemberOfTextBox.TabIndex = 3
	#
	# buttonCreateContact
	#
	$buttonCreateContact.Location = '190, 173'
	$buttonCreateContact.Name = 'buttonCreateContact'
	$buttonCreateContact.Size = '94, 23'
	$buttonCreateContact.TabIndex = 5
	$buttonCreateContact.Text = 'Create Contact'
	$buttonCreateContact.UseCompatibleTextRendering = $True
	$buttonCreateContact.UseVisualStyleBackColor = $True
	$buttonCreateContact.add_Click($buttonCreateContact_Click)
	#
	# ExternalAddressTextBox
	#
	$ExternalAddressTextBox.Location = '118, 27'
	$ExternalAddressTextBox.Name = 'ExternalAddressTextBox'
	$ExternalAddressTextBox.Size = '166, 20'
	$ExternalAddressTextBox.TabIndex = 2
	#
	# PhoneNrTextBox
	#
	$PhoneNrTextBox.Location = '118, 27'
	$PhoneNrTextBox.Name = 'PhoneNrTextBox'
	$PhoneNrTextBox.Size = '166, 20'
	$PhoneNrTextBox.TabIndex = 2
	#
	# labelExternalAddress
	#
	$labelExternalAddress.Location = '12, 27'
	$labelExternalAddress.Name = 'labelExternalAddress'
	$labelExternalAddress.Size = '100, 23'
	$labelExternalAddress.TabIndex = 3
	$labelExternalAddress.Text = 'External Address:'
	$labelExternalAddress.UseCompatibleTextRendering = $True
	#
	# labelPhoneNr
	#
	$labelPhoneNr.Location = '12, 30'
	$labelPhoneNr.Name = 'labelPhoneNr'
	$labelPhoneNr.Size = '100, 23'
	$labelPhoneNr.TabIndex = 2
	$labelPhoneNr.Text = 'Phone nr:'
	$labelPhoneNr.UseCompatibleTextRendering = $True
	#
	# ContactTypeComboBox
	#
	$ContactTypeComboBox.DisplayMember = 'SMS Contacts'
	$ContactTypeComboBox.DropDownStyle = 'DropDownList'
	$ContactTypeComboBox.FormattingEnabled = $True
	[void]$ContactTypeComboBox.Items.Add('External Address')
	[void]$ContactTypeComboBox.Items.Add('SMS Contacts')
	$ContactTypeComboBox.Location = '118, 6'
	$ContactTypeComboBox.Name = 'ContactTypeComboBox'
	$ContactTypeComboBox.Size = '166, 21'
	$ContactTypeComboBox.TabIndex = 1
	$ContactTypeComboBox.add_SelectedIndexChanged($ContactTypeComboBox_SelectedIndexChanged)
	#
	# labelContactType
	#
	$labelContactType.Location = '12, 9'
	$labelContactType.Name = 'labelContactType'
	$labelContactType.Size = '80, 23'
	$labelContactType.TabIndex = 0
	$labelContactType.Text = 'Contact Type:'
	$labelContactType.UseCompatibleTextRendering = $True
	$formCreateContacts.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCreateContacts.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCreateContacts.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCreateContacts.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCreateContacts.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCreateContacts.ShowDialog()

}
#endregion Source: CreateContact.psf

#region Source: AddGroupAutoMapping.psf
function Show-AddGroupAutoMapping_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAddUserToGroupAutoma = New-Object 'System.Windows.Forms.Form'
	$labelAddAccessToMailboxWi = New-Object 'System.Windows.Forms.Label'
	$ButtonAdminGroupRemove = New-Object 'System.Windows.Forms.Button'
	$buttonAutomappingRemove = New-Object 'System.Windows.Forms.Button'
	$labelAdminGroups = New-Object 'System.Windows.Forms.Label'
	$labelAutomapping = New-Object 'System.Windows.Forms.Label'
	$MemberOfListBox = New-Object 'System.Windows.Forms.ListBox'
	$DelegateListLinkListBox = New-Object 'System.Windows.Forms.ListBox'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonAddToGroup = New-Object 'System.Windows.Forms.Button'
	$labelUser = New-Object 'System.Windows.Forms.Label'
	$AddUserButton = New-Object 'System.Windows.Forms.Button'
	$UserTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelTargetMailbox = New-Object 'System.Windows.Forms.Label'
	$AddMailboxButton = New-Object 'System.Windows.Forms.Button'
	$TargetMailboxTextBox = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function Clear-Values
	{
		$DelegateListLinkListBox.Items.Clear()
		$MemberOfListBox.Items.Clear()
		$TargetMailboxTextBox.Text = ""
		
	}
	function Add-Group-and-Automapping
	{
		param (
			[string]$TargetMailbox,
			[string]$User
		)
		
		$MailBoxLDAP = [ADSI]"LDAP://$($DomainController)/$TargetMailbox"
		$AdminGroupLDAP = [ADSI]"LDAP://$($DomainController)/$AdminGroup"
		$UserLDAP = [ADSI]"LDAP://$($DomainController)/$User"
		$MailboxPermissions = Get-MailboxPermission -Identity $TargetMailBox | where { $_.User -match "SM_ADM" }
		if ($MailboxPermissions -eq $null)
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("No admin group was found, please have one created and assigned to the mailbox", "Error")
			break
		}
		$AdminGroupName = $($($MailboxPermissions.User).ToString()).Split("\")
		$AdminGroupDn = Get-FullDNDistributionGroups -username $AdminGroupName[1]
		
		if ($userLDAP.memberOf -match $AdminGroupDn)
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			if ([System.Windows.Forms.MessageBox]::Show("User is already a member of the group, do you want to add the auto-mapping?", "Question", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
			{
				if ($MailBoxLDAP.msExchDelegateListLink -match $User)
				{
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("User was already added to the auto-mapping!", "Error")
					Add-Log "Auto-mapping - Failed to add Automapping for $User to $AdminGroupDn due to it already being set up"
				}
				else
				{
					$MailBoxLDAP.msExchDelegateListLink.Add($User)
					$MailBoxLDAP.SetInfo()
					#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
					[void][System.Windows.Forms.MessageBox]::Show("User has been added to the auto-mapping!", "Success")
					Add-Log "Auto-mapping - Successfully added Automapping for $User to $AdminGroupDn"
				}
			}
			else
			{
				return
			}
		}
		else
		{
			Add-DistributionGroupMember -Identity $AdminGroupDn -Member $User -BypassSecurityGroupManagerCheck -DomainController $DomainController
			if ($MailBoxLDAP.msExchDelegateListLink -match $User)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("User has been added to the group, but was already set up for auto-mapping", "Success")
				Add-Log "Add Group - Successfully added group $AdminGroupDn to $User"
			}
			else
			{
				$MailBoxLDAP.msExchDelegateListLink.Add($User)
				$MailBoxLDAP.SetInfo()
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("User has been added to the group and the auto-mapping!", "Success")
				Add-Log "Add Group and Auto-mapping - Successfully added group $AdminGroupDn to $User and set up Auto-mapping"
			}
		}
		
	}
	
	function Get-DelegateListLinkForUser
	{
		param (
			[string]$UserDn
		)
		$Groups = @()
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(msExchDelegateListLink=$UserDn)"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$results = $Searcher.FindAll()
		
		foreach ($result in $results)
		{
			$TargetGroup = $Result.Properties.Item("distinguishedName")
			if ($TargetGroup -match "Shared Mailbox")
			{
				$DisplayName = $result.Properties.Item("DisplayName")
				$Groups += $DisplayName
			}
			
		}
		return $Groups
	}
	
	function Get-SM_ADMGroupsForuser
	{
		param (
			[string]$UserDn
		)
		$Groups = @()
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(distinguishedName=$UserDn)"
		$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
		$result = $Searcher.FindOne()
		
		$TargetGroups = $Result.Properties.Item("memberOf")
		foreach ($TargetGroup in $TargetGroups)
		{
			if ($TargetGroup -match "SM_ADM")
			{
				$TargetGroup = Fix-InvalidCharsLDAP -InputString $TargetGroup
				$LDAPGroup = [ADSI]"LDAP://$TargetGroup"
				$GroupName = $LDAPGroup.Properties.Item("SAMAccountName")
				$Groups += $GroupName
			}
		}
		return $Groups
		
	}
	$formAddUserToGroupAutoma_Load = {
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonAddToGroup_Click = {
		#TODO: Place custom script here
		$TargetMailbox = $TargetMailboxTextBox.Text
		$UserDn = $UserTextBox.Text
		Add-Group-and-Automapping -TargetMailbox $TargetMailbox -User $UserDn
	}
	
	$AddMailboxButton_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which mailbox do you want to add the user to?", "Target mailbox", "")
		
		$Mailbox = Get-Mailbox -Identity $OwnerAdd -DomainController $DomainController
		if ($Mailbox.Count -gt '2')
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Multiple matches found, please write exact name", "Error")
			return
		}
		else
		{
			$MailboxAlias = $Mailbox.SamAccountName
		}
		
		$UserToAdd = Get-FullDN -username $MailboxAlias
		if ($UserToAdd -ne $null)
		{
			$TargetMailboxTextBox.Text = $UserToAdd
		}
	}
	
	
	$AddUserButton_Click = {
		#TODO: Place custom script here
		[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
		$OwnerAdd = [Microsoft.VisualBasic.Interaction]::InputBox("Which user do you want to add?", "User", "")
		$UserToAdd = Get-FullDN -username $OwnerAdd
		if ($UserToAdd -ne $null)
		{
			Clear-Values
			$UserTextBox.Text = $UserToAdd
			
			$DelegateListLinkGroupsToAdd = Get-DelegateListLinkForUser -UserDn $UserToAdd
			foreach ($Groups in $DelegateListLinkGroupsToAdd)
			{
				$DelegateListLinkListBox.Items.Add($Groups)
			}
			
			$MemberOfGroupsToAdd = Get-SM_ADMGroupsForuser -UserDn $UserToAdd
			foreach ($Group in $MemberOfGroupsToAdd)
			{
				$MemberOfListBox.Items.Add($Group)
			}
			
		}
		
		
	}
	
	$buttonExit_Click = {
		#TODO: Place custom script here
		$formAddUserToGroupAutoma.Close()
	}
	
	#region Control Helper Functions
	function Load-ListBox
	{
		<#
			.SYNOPSIS
				This functions helps you load items into a ListBox or CheckedListBox.
		
			.DESCRIPTION
				Use this function to dynamically load items into the ListBox control.
		
			.PARAMETER  ListBox
				The ListBox control you want to add items to.
		
			.PARAMETER  Items
				The object or objects you wish to load into the ListBox's Items collection.
		
			.PARAMETER  DisplayMember
				Indicates the property to display for the items in this control.
			
			.PARAMETER  Append
				Adds the item(s) to the ListBox without clearing the Items collection.
			
			.EXAMPLE
				Load-ListBox $ListBox1 "Red", "White", "Blue"
			
			.EXAMPLE
				Load-ListBox $listBox1 "Red" -Append
				Load-ListBox $listBox1 "White" -Append
				Load-ListBox $listBox1 "Blue" -Append
			
			.EXAMPLE
				Load-ListBox $listBox1 (Get-Process) "ProcessName"
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$buttonAutomappingRemove_Click = {
		#TODO: Place custom script here
		$RemoveItem = $DelegateListLinkListBox.SelectedItem
		$userDn = $UserTextBox.Text
		try
		{
			$Searcher = New-Object DirectoryServices.DirectorySearcher
			$Searcher.Filter = "(&(objectClass=user)(DisplayName=$RemoveItem))"
			$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
			$results = $Searcher.FindAll()
			
			if ($results.Count -lt 1 -or $results.Count -gt 1)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Unable to specify the groupname, duplicates exists!", "Error")
				return
			}
			foreach ($result in $results)
			{
				
				$userObject = $Result.Properties.Item("distinguishedName")
				Write-Host $userObject
				$LDAPGroup = [ADSI]"LDAP://$userObject"
				$LDAPGroup.PutEx($ADS_PROPERTY_DELETE, 'msExchDelegateListLink', @("$userDn"))
				$LDAPGroup.CommitChanges()
				
			}
			
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Removed automapping, please note that it may take up to a minute before it disappears from the user.", "Success")
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Something went wrong!", "Error")
		}
	}
	
	$ButtonAdminGroupRemove_Click = {
		#TODO: Place custom script here
		$RemoveItem = $MemberOfListBox.SelectedItem
		$userDn = $UserTextBox.Text
		try
		{
			$Searcher = New-Object DirectoryServices.DirectorySearcher
			$Searcher.Filter = "(&(objectClass=group)(SAMAccountName=$RemoveItem))"
			$Searcher.SearchRoot = "LDAP://$DomainController/dc=,dc=,dc="
			$results = $Searcher.FindAll()
			
			if ($results.Count -lt 1 -or $results.Count -gt 1)
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Unable to specify the groupname, duplicates exists!", "Error")
				return
			}
			foreach ($result in $results)
			{
				$userObject = $($Result.Properties.Item("distinguishedName")).ToString()
				
			}
			if ($userObject -ne $null)
			{
				Get-DistributionGroup $userObject | Remove-DistributionGroupMember -Member "$userDn" -BypassSecurityGroupManagerCheck -Confirm:$false
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Group has been removed from the user", "Success")
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Something went wrong..", "Error")
			}
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Something went wrong!", "Error")
		}
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAddUserToGroupAutoma.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AddGroupAutoMapping_MemberOfListBox = $MemberOfListBox.SelectedItems
		$script:AddGroupAutoMapping_DelegateListLinkListBox = $DelegateListLinkListBox.SelectedItems
		$script:AddGroupAutoMapping_UserTextBox = $UserTextBox.Text
		$script:AddGroupAutoMapping_TargetMailboxTextBox = $TargetMailboxTextBox.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$ButtonAdminGroupRemove.remove_Click($ButtonAdminGroupRemove_Click)
			$buttonAutomappingRemove.remove_Click($buttonAutomappingRemove_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonAddToGroup.remove_Click($buttonAddToGroup_Click)
			$AddUserButton.remove_Click($AddUserButton_Click)
			$AddMailboxButton.remove_Click($AddMailboxButton_Click)
			$formAddUserToGroupAutoma.remove_Load($formAddUserToGroupAutoma_Load)
			$formAddUserToGroupAutoma.remove_Load($Form_StateCorrection_Load)
			$formAddUserToGroupAutoma.remove_Closing($Form_StoreValues_Closing)
			$formAddUserToGroupAutoma.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAddUserToGroupAutoma.SuspendLayout()
	#
	# formAddUserToGroupAutoma
	#
	$formAddUserToGroupAutoma.Controls.Add($labelAddAccessToMailboxWi)
	$formAddUserToGroupAutoma.Controls.Add($ButtonAdminGroupRemove)
	$formAddUserToGroupAutoma.Controls.Add($buttonAutomappingRemove)
	$formAddUserToGroupAutoma.Controls.Add($labelAdminGroups)
	$formAddUserToGroupAutoma.Controls.Add($labelAutomapping)
	$formAddUserToGroupAutoma.Controls.Add($MemberOfListBox)
	$formAddUserToGroupAutoma.Controls.Add($DelegateListLinkListBox)
	$formAddUserToGroupAutoma.Controls.Add($buttonExit)
	$formAddUserToGroupAutoma.Controls.Add($buttonAddToGroup)
	$formAddUserToGroupAutoma.Controls.Add($labelUser)
	$formAddUserToGroupAutoma.Controls.Add($AddUserButton)
	$formAddUserToGroupAutoma.Controls.Add($UserTextBox)
	$formAddUserToGroupAutoma.Controls.Add($labelTargetMailbox)
	$formAddUserToGroupAutoma.Controls.Add($AddMailboxButton)
	$formAddUserToGroupAutoma.Controls.Add($TargetMailboxTextBox)
	$formAddUserToGroupAutoma.AutoScaleDimensions = '6, 13'
	$formAddUserToGroupAutoma.AutoScaleMode = 'Font'
	$formAddUserToGroupAutoma.ClientSize = '494, 403'
	$formAddUserToGroupAutoma.FormBorderStyle = 'FixedDialog'
	$formAddUserToGroupAutoma.MaximizeBox = $False
	$formAddUserToGroupAutoma.Name = 'formAddUserToGroupAutoma'
	$formAddUserToGroupAutoma.StartPosition = 'CenterParent'
	$formAddUserToGroupAutoma.Text = 'Add user to group & automapping'
	$formAddUserToGroupAutoma.add_Load($formAddUserToGroupAutoma_Load)
	#
	# labelAddAccessToMailboxWi
	#
	$labelAddAccessToMailboxWi.Font = 'Microsoft Sans Serif, 14pt'
	$labelAddAccessToMailboxWi.Location = '55, 199'
	$labelAddAccessToMailboxWi.Name = 'labelAddAccessToMailboxWi'
	$labelAddAccessToMailboxWi.Size = '380, 27'
	$labelAddAccessToMailboxWi.TabIndex = 30
	$labelAddAccessToMailboxWi.Text = 'Add access to mailbox with automapping'
	$labelAddAccessToMailboxWi.UseCompatibleTextRendering = $True
	#
	# ButtonAdminGroupRemove
	#
	$ButtonAdminGroupRemove.Location = '426, 165'
	$ButtonAdminGroupRemove.Name = 'ButtonAdminGroupRemove'
	$ButtonAdminGroupRemove.Size = '56, 21'
	$ButtonAdminGroupRemove.TabIndex = 29
	$ButtonAdminGroupRemove.Text = 'Remove'
	$ButtonAdminGroupRemove.UseCompatibleTextRendering = $True
	$ButtonAdminGroupRemove.UseVisualStyleBackColor = $True
	$ButtonAdminGroupRemove.add_Click($ButtonAdminGroupRemove_Click)
	#
	# buttonAutomappingRemove
	#
	$buttonAutomappingRemove.Location = '175, 165'
	$buttonAutomappingRemove.Name = 'buttonAutomappingRemove'
	$buttonAutomappingRemove.Size = '56, 21'
	$buttonAutomappingRemove.TabIndex = 28
	$buttonAutomappingRemove.Text = 'Remove'
	$buttonAutomappingRemove.UseCompatibleTextRendering = $True
	$buttonAutomappingRemove.UseVisualStyleBackColor = $True
	$buttonAutomappingRemove.add_Click($buttonAutomappingRemove_Click)
	#
	# labelAdminGroups
	#
	$labelAdminGroups.Location = '237, 46'
	$labelAdminGroups.Name = 'labelAdminGroups'
	$labelAdminGroups.Size = '75, 15'
	$labelAdminGroups.TabIndex = 27
	$labelAdminGroups.Text = 'Admin groups:'
	$labelAdminGroups.UseCompatibleTextRendering = $True
	#
	# labelAutomapping
	#
	$labelAutomapping.Location = '12, 43'
	$labelAutomapping.Name = 'labelAutomapping'
	$labelAutomapping.Size = '75, 15'
	$labelAutomapping.TabIndex = 26
	$labelAutomapping.Text = 'Automapping:'
	$labelAutomapping.UseCompatibleTextRendering = $True
	#
	# MemberOfListBox
	#
	$MemberOfListBox.FormattingEnabled = $True
	$MemberOfListBox.Location = '237, 64'
	$MemberOfListBox.Name = 'MemberOfListBox'
	$MemberOfListBox.Size = '245, 95'
	$MemberOfListBox.TabIndex = 25
	#
	# DelegateListLinkListBox
	#
	$DelegateListLinkListBox.FormattingEnabled = $True
	$DelegateListLinkListBox.Location = '12, 64'
	$DelegateListLinkListBox.Name = 'DelegateListLinkListBox'
	$DelegateListLinkListBox.Size = '219, 95'
	$DelegateListLinkListBox.TabIndex = 24
	#
	# buttonExit
	#
	$buttonExit.Location = '12, 355'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 23
	$buttonExit.Text = 'Exit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonAddToGroup
	#
	$buttonAddToGroup.Location = '249, 288'
	$buttonAddToGroup.Name = 'buttonAddToGroup'
	$buttonAddToGroup.Size = '82, 23'
	$buttonAddToGroup.TabIndex = 22
	$buttonAddToGroup.Text = 'Add to group'
	$buttonAddToGroup.UseCompatibleTextRendering = $True
	$buttonAddToGroup.UseVisualStyleBackColor = $True
	$buttonAddToGroup.add_Click($buttonAddToGroup_Click)
	#
	# labelUser
	#
	$labelUser.Location = '12, 9'
	$labelUser.Name = 'labelUser'
	$labelUser.Size = '100, 23'
	$labelUser.TabIndex = 21
	$labelUser.Text = 'User:'
	$labelUser.UseCompatibleTextRendering = $True
	#
	# AddUserButton
	#
	$AddUserButton.Location = '290, 7'
	$AddUserButton.Name = 'AddUserButton'
	$AddUserButton.Size = '41, 23'
	$AddUserButton.TabIndex = 20
	$AddUserButton.Text = 'Add'
	$AddUserButton.UseCompatibleTextRendering = $True
	$AddUserButton.UseVisualStyleBackColor = $True
	$AddUserButton.add_Click($AddUserButton_Click)
	#
	# UserTextBox
	#
	$UserTextBox.Location = '118, 9'
	$UserTextBox.Name = 'UserTextBox'
	$UserTextBox.ReadOnly = $True
	$UserTextBox.Size = '166, 20'
	$UserTextBox.TabIndex = 19
	#
	# labelTargetMailbox
	#
	$labelTargetMailbox.Location = '59, 233'
	$labelTargetMailbox.Name = 'labelTargetMailbox'
	$labelTargetMailbox.Size = '100, 23'
	$labelTargetMailbox.TabIndex = 18
	$labelTargetMailbox.Text = 'Target Mailbox:'
	$labelTargetMailbox.UseCompatibleTextRendering = $True
	#
	# AddMailboxButton
	#
	$AddMailboxButton.Location = '290, 259'
	$AddMailboxButton.Name = 'AddMailboxButton'
	$AddMailboxButton.Size = '41, 23'
	$AddMailboxButton.TabIndex = 17
	$AddMailboxButton.Text = 'Add'
	$AddMailboxButton.UseCompatibleTextRendering = $True
	$AddMailboxButton.UseVisualStyleBackColor = $True
	$AddMailboxButton.add_Click($AddMailboxButton_Click)
	#
	# TargetMailboxTextBox
	#
	$TargetMailboxTextBox.Location = '165, 233'
	$TargetMailboxTextBox.Name = 'TargetMailboxTextBox'
	$TargetMailboxTextBox.ReadOnly = $True
	$TargetMailboxTextBox.Size = '166, 20'
	$TargetMailboxTextBox.TabIndex = 16
	$formAddUserToGroupAutoma.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAddUserToGroupAutoma.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAddUserToGroupAutoma.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAddUserToGroupAutoma.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAddUserToGroupAutoma.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAddUserToGroupAutoma.ShowDialog()

}
#endregion Source: AddGroupAutoMapping.psf

#region Source: Create SMS Passcode.psf
function Show-Create_SMS_Passcode_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formVPNAndPhoneNumber = New-Object 'System.Windows.Forms.Form'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$labelWW_APP_SMSPasscode_U = New-Object 'System.Windows.Forms.Label'
	$labelPhoneNumber = New-Object 'System.Windows.Forms.Label'
	$checkboxSMSPasscode = New-Object 'System.Windows.Forms.CheckBox'
	$button2Execute = New-Object 'System.Windows.Forms.Button'
	$button1Check = New-Object 'System.Windows.Forms.Button'
	$textboxPhoneNumber = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Add-Type -AssemblyName PresentationFramework
	
	$formVPNAndPhoneNumber_Load = {
		$formVPNAndPhoneNumber.MaximizeBox = $false
	
		
	}
	
	function Check-User
	{
		param (
			[string]$Identity
		)
		
		$Searcher = New-Object DirectoryServices.DirectorySearcher
		$Searcher.Filter = "(sAMAccountName=$Identity)"
		$Searcher.SearchRoot = 'LDAP://dc=,dc=,dc='
		$item = $Searcher.FindOne()
		
		if ($item.Count -eq 0)
		{
			$statusbar1.Text = "Could not find user!"
			return $false
		}
		else
		{
			$userAD = [ADSI]([string]$item.Properties.adspath)
			$statusbar1.Text = "User found!"
			$textboxPhoneNumber.Enabled = $true
		}
	}
	
	function Update-ADObject
	{
		param (
			[string]$Identity,
			[string]$Phone
		)
		
		if ($checkboxSMSPasscode.Checked)
		{
			try
			{
				Add-ADGroupMember -Server "" -Identity WW_APP_SMSPasscode_Users -Members $Identity -Confirm:$false
				Set-ADUser -Server "" -Identity $Identity -Replace @{ otherMobile = $phone.Replace(' ', '') }
				[void][System.Windows.MessageBox]::Show("$($Identity.ToUpper()) was successfully created for VPN", "Success!", 'OK', "Information")
			}
			catch { [void][System.Windows.MessageBox]::Show("Could not create $($Identity.ToUpper()) for VPN!", "Error", "OK", 'Warning') }
		}
		
		else
		{
			try
			{
				Set-ADUser -Server "" -Identity $Identity -Replace @{ otherMobile = $Phone.Replace(' ', '') }
				Set-ADUser -Server "" -Identity $Identity -MobilePhone $null
				[void][System.Windows.MessageBox]::Show("The number was successfully replaced!", "Success!", 'OK', "Information")
			}
			catch { [void][System.Windows.MessageBox]::Show("Something went wrong!", "Error", "OK", 'Warning') }
		}
	}
	$labelWW_APP_SMSPasscode_U_Click={
		#TODO: Place custom script here
	}
	
	$textboxUsername_TextChanged = {
		$statusbar1.Text = ''
		$button1Check.Enabled = $false
		$button2Execute.Enabled = $false
		$textboxPhoneNumber.Enabled = $false
		$textboxPhoneNumber.Text = ''
		if ($textboxUsername.Text.Trim() -ne '')
		{
			$button1Check.Enabled = $true
		}
		
	}
	
	$button2Execute_Click={
		Update-ADObject -Identity $textboxUsername.Text -Phone $textboxPhoneNumber.Text
		$textboxUsername.Text = ''
	}
	
	$checkboxSMSPasscode_CheckedChanged = {
		
	}
	
	$button1Check_Click = {
		$textboxUsername.Text = $textboxUsername.Text.Trim()
		try   { Check-User -Identity $textboxUsername.Text }
		catch { [System.Windows.MessageBox]::Show('Unknown Error', 'Try again', 'OK', 'Error') }
	}
	
	
	$textboxPhoneNumber_TextChanged = {
		$checkboxSMSPasscode.Enabled = $false
		$button2Execute.Enabled= $false
		if (($textboxPhoneNumber.Text.Trim() -ne '') -and ($textboxPhoneNumber.Text.Trim()[0] -eq '+'))
		{
			$checkboxSMSPasscode.Enabled = $true
			$button2Execute.Enabled = $true
			
		}
		
	}
	
	$labelPhoneNumber_Click={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formVPNAndPhoneNumber.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Create_SMS_Passcode_textboxUsername = $textboxUsername.Text
		$script:Create_SMS_Passcode_checkboxSMSPasscode = $checkboxSMSPasscode.Checked
		$script:Create_SMS_Passcode_textboxPhoneNumber = $textboxPhoneNumber.Text
		$script:Create_SMS_Passcode_textbox2 = $textbox2.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxUsername.remove_TextChanged($textboxUsername_TextChanged)
			$labelWW_APP_SMSPasscode_U.remove_Click($labelWW_APP_SMSPasscode_U_Click)
			$labelPhoneNumber.remove_Click($labelPhoneNumber_Click)
			$checkboxSMSPasscode.remove_CheckedChanged($checkboxSMSPasscode_CheckedChanged)
			$button2Execute.remove_Click($button2Execute_Click)
			$button1Check.remove_Click($button1Check_Click)
			$textboxPhoneNumber.remove_TextChanged($textboxPhoneNumber_TextChanged)
			$formVPNAndPhoneNumber.remove_Load($formVPNAndPhoneNumber_Load)
			$formVPNAndPhoneNumber.remove_Load($Form_StateCorrection_Load)
			$formVPNAndPhoneNumber.remove_Closing($Form_StoreValues_Closing)
			$formVPNAndPhoneNumber.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formVPNAndPhoneNumber.SuspendLayout()
	#
	# formVPNAndPhoneNumber
	#
	$formVPNAndPhoneNumber.Controls.Add($statusbar1)
	$formVPNAndPhoneNumber.Controls.Add($textboxUsername)
	$formVPNAndPhoneNumber.Controls.Add($labelWW_APP_SMSPasscode_U)
	$formVPNAndPhoneNumber.Controls.Add($labelPhoneNumber)
	$formVPNAndPhoneNumber.Controls.Add($checkboxSMSPasscode)
	$formVPNAndPhoneNumber.Controls.Add($button2Execute)
	$formVPNAndPhoneNumber.Controls.Add($button1Check)
	$formVPNAndPhoneNumber.Controls.Add($textboxPhoneNumber)
	$formVPNAndPhoneNumber.Controls.Add($labelUsername)
	$formVPNAndPhoneNumber.AutoScaleDimensions = '6, 13'
	$formVPNAndPhoneNumber.AutoScaleMode = 'Font'
	$formVPNAndPhoneNumber.ClientSize = '278, 227'
	$formVPNAndPhoneNumber.FormBorderStyle = 'FixedToolWindow'
	$formVPNAndPhoneNumber.Name = 'formVPNAndPhoneNumber'
	$formVPNAndPhoneNumber.Text = 'VPN and Phone Number'
	$formVPNAndPhoneNumber.add_Load($formVPNAndPhoneNumber_Load)
	#
	# statusbar1
	#
	$statusbar1.Font = 'Microsoft Sans Serif, 9pt'
	$statusbar1.Location = '0, 205'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '278, 22'
	$statusbar1.TabIndex = 6
	#
	# textboxUsername
	#
	$textboxUsername.Location = '135, 31'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '119, 20'
	$textboxUsername.TabIndex = 5
	$textboxUsername.add_TextChanged($textboxUsername_TextChanged)
	#
	# labelWW_APP_SMSPasscode_U
	#
	$labelWW_APP_SMSPasscode_U.AutoSize = $True
	$labelWW_APP_SMSPasscode_U.Font = 'Microsoft Sans Serif, 8.25pt'
	$labelWW_APP_SMSPasscode_U.Location = '83, 125'
	$labelWW_APP_SMSPasscode_U.Name = 'labelWW_APP_SMSPasscode_U'
	$labelWW_APP_SMSPasscode_U.Size = '171, 17'
	$labelWW_APP_SMSPasscode_U.TabIndex = 4
	$labelWW_APP_SMSPasscode_U.Text = 'WW_APP_SMSPasscode_Users'
	$labelWW_APP_SMSPasscode_U.UseCompatibleTextRendering = $True
	$labelWW_APP_SMSPasscode_U.add_Click($labelWW_APP_SMSPasscode_U_Click)
	#
	# labelPhoneNumber
	#
	$labelPhoneNumber.AutoSize = $True
	$labelPhoneNumber.Font = 'Microsoft Sans Serif, 10pt'
	$labelPhoneNumber.Location = '12, 80'
	$labelPhoneNumber.Name = 'labelPhoneNumber'
	$labelPhoneNumber.Size = '101, 20'
	$labelPhoneNumber.TabIndex = 4
	$labelPhoneNumber.Text = 'Phone Number:'
	$labelPhoneNumber.UseCompatibleTextRendering = $True
	$labelPhoneNumber.add_Click($labelPhoneNumber_Click)
	#
	# checkboxSMSPasscode
	#
	$checkboxSMSPasscode.Enabled = $False
	$checkboxSMSPasscode.Location = '62, 120'
	$checkboxSMSPasscode.Name = 'checkboxSMSPasscode'
	$checkboxSMSPasscode.Size = '15, 24'
	$checkboxSMSPasscode.TabIndex = 3
	$checkboxSMSPasscode.UseCompatibleTextRendering = $True
	$checkboxSMSPasscode.UseVisualStyleBackColor = $True
	$checkboxSMSPasscode.add_CheckedChanged($checkboxSMSPasscode_CheckedChanged)
	#
	# button2Execute
	#
	$button2Execute.Enabled = $False
	$button2Execute.Location = '157, 156'
	$button2Execute.Name = 'button2Execute'
	$button2Execute.Size = '97, 43'
	$button2Execute.TabIndex = 2
	$button2Execute.Text = '2. Execute'
	$button2Execute.UseCompatibleTextRendering = $True
	$button2Execute.UseVisualStyleBackColor = $True
	$button2Execute.add_Click($button2Execute_Click)
	#
	# button1Check
	#
	$button1Check.Enabled = $False
	$button1Check.Location = '9, 156'
	$button1Check.Name = 'button1Check'
	$button1Check.Size = '104, 43'
	$button1Check.TabIndex = 2
	$button1Check.Text = '1. Check'
	$button1Check.UseCompatibleTextRendering = $True
	$button1Check.UseVisualStyleBackColor = $True
	$button1Check.add_Click($button1Check_Click)
	#
	# textboxPhoneNumber
	#
	$textboxPhoneNumber.Enabled = $False
	$textboxPhoneNumber.Location = '135, 80'
	$textboxPhoneNumber.Name = 'textboxPhoneNumber'
	$textboxPhoneNumber.Size = '119, 20'
	$textboxPhoneNumber.TabIndex = 1
	$textboxPhoneNumber.add_TextChanged($textboxPhoneNumber_TextChanged)
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Font = 'Microsoft Sans Serif, 10pt'
	$labelUsername.Location = '12, 31'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '72, 20'
	$labelUsername.TabIndex = 0
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# textbox2
	#
	$textbox2.Location = '119, 71'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '119, 20'
	$textbox2.TabIndex = 1
	$formVPNAndPhoneNumber.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formVPNAndPhoneNumber.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formVPNAndPhoneNumber.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formVPNAndPhoneNumber.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formVPNAndPhoneNumber.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formVPNAndPhoneNumber.ShowDialog()

}
#endregion Source: Create SMS Passcode.psf

#region Source: Groups ManagedBy user.psf
function Show-Groups_ManagedBy_user_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formFindGroupsManagedByU = New-Object 'System.Windows.Forms.Form'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonExportGroups = New-Object 'System.Windows.Forms.Button'
	$comboboxGroups = New-Object 'System.Windows.Forms.ComboBox'
	$textboxUsername = New-Object 'System.Windows.Forms.TextBox'
	$labelGroupsManagedByUser = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$buttonCheck = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formFindGroupsManagedByU_Load = {
		$formFindGroupsManagedByU.MaximizeBox = $false
		$buttonCheck.Enabled = $false
		$buttonExportGroups.Enabled = $false
		$comboboxGroups.DropDownStyle = 'DropDownList'
		$comboboxGroups.Enabled = $false
		
	}
	
	$buttonCheck_Click = {
		#TODO: Place custom script here
		$textboxUsername.Text = $textboxUsername.Text.Trim()
		$comboboxGroups.Items.Clear()
		try
		{
			$global:groups_managedBy_User = Get-ADGroup -Server "" -Filter "(managedBy -Eq '$($textboxUsername.Text)')" -ErrorAction Stop | Select-Object -ExpandProperty samaccountname | Sort-Object
			if ($groups_managedBy_User.count -gt 0)
			{
				ForEach ($group_managedBy_User in $groups_managedBy_User)
				{
					$comboboxGroups.Items.Add($group_managedBy_User)
				}
				$comboboxGroups.Enabled = $true
				$buttonExportGroups.Enabled = $true
			}
			else
			{
				$statusbar1.Text = "No groups found! Double-check username"
			}
		}
		catch
		{
			$statusbar1.Text = "User not found!"
		}
			
		$buttonCheck.Enabled = $false
	}
	
	
	$textboxUsername_TextChanged = {
		$buttonCheck.Enabled = $false
		$buttonExportGroups.Enabled = $false
		$comboboxGroups.Text = ''
		$comboboxGroups.Items.Clear()
		$comboboxGroups.Enabled = $false
		if ($textboxUsername.Text.Trim() -ne '')
		{
			$buttonCheck.Enabled = $true
		}
		
		
		
	}
	
	#region Control Helper Function
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	#endregion
	
	
	$comboboxGroups_SelectedIndexChanged = {
		$buttonExportGroups.Enabled = $false
		if ($comboboxGroups.Text.Trim() -ne '')
		{
			$buttonExportGroups.Enabled = $true
		}
	}
	
	#region Job Tracker
	
	
	$buttonExportGroups_Click = {
		$ExportConfirmation = $folderbrowserdialog1.ShowDialog()
		if ($ExportConfirmation -ne 'Cancel')
		{
			$textbox1.Text = $folderbrowserdialog1.SelectedPath + '\'
			$NameOfFile = [Microsoft.VisualBasic.Interaction]::InputBox("Please enter a filename", "Filename") + '.txt'
			if ($NameOfFile.Trim() -ne '.txt')
			{
				$FilePath = $textbox1.Text + $NameOfFile
				try
				{
					$groups_managedBy_User | Out-File -FilePath $FilePath
					[System.Windows.MessageBox]::Show("Groups was saved to:`n$Filepath", "Success!", "OK", "Information")
				}
				catch
				{
					[System.Windows.MessageBox]::Show('Could not export groups', 'Unknown Error', 'OK', 'Error')
				}
			}
		}
	}
	
	$textbox1_TextChanged = {
		#TODO: Place custom script here
		
	}
	
	$labelUsername_Click = {
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formFindGroupsManagedByU.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Groups_ManagedBy_user_textbox1 = $textbox1.Text
		$script:Groups_ManagedBy_user_comboboxGroups = $comboboxGroups.Text
		$script:Groups_ManagedBy_user_comboboxGroups_SelectedItem = $comboboxGroups.SelectedItem
		$script:Groups_ManagedBy_user_textboxUsername = $textboxUsername.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textbox1.remove_TextChanged($textbox1_TextChanged)
			$buttonExportGroups.remove_Click($buttonExportGroups_Click)
			$comboboxGroups.remove_SelectedIndexChanged($comboboxGroups_SelectedIndexChanged)
			$textboxUsername.remove_TextChanged($textboxUsername_TextChanged)
			$buttonCheck.remove_Click($buttonCheck_Click)
			$formFindGroupsManagedByU.remove_Load($formFindGroupsManagedByU_Load)
			$formFindGroupsManagedByU.remove_Load($Form_StateCorrection_Load)
			$formFindGroupsManagedByU.remove_Closing($Form_StoreValues_Closing)
			$formFindGroupsManagedByU.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formFindGroupsManagedByU.SuspendLayout()
	#
	# formFindGroupsManagedByU
	#
	$formFindGroupsManagedByU.Controls.Add($statusbar1)
	$formFindGroupsManagedByU.Controls.Add($textbox1)
	$formFindGroupsManagedByU.Controls.Add($buttonExportGroups)
	$formFindGroupsManagedByU.Controls.Add($comboboxGroups)
	$formFindGroupsManagedByU.Controls.Add($textboxUsername)
	$formFindGroupsManagedByU.Controls.Add($labelGroupsManagedByUser)
	$formFindGroupsManagedByU.Controls.Add($labelUsername)
	$formFindGroupsManagedByU.Controls.Add($buttonCheck)
	$formFindGroupsManagedByU.AutoScaleDimensions = '6, 13'
	$formFindGroupsManagedByU.AutoScaleMode = 'Font'
	$formFindGroupsManagedByU.ClientSize = '282, 278'
	$formFindGroupsManagedByU.FormBorderStyle = 'FixedDialog'
	$formFindGroupsManagedByU.MaximizeBox = $False
	$formFindGroupsManagedByU.MinimizeBox = $False
	$formFindGroupsManagedByU.Name = 'formFindGroupsManagedByU'
	$formFindGroupsManagedByU.StartPosition = 'CenterScreen'
	$formFindGroupsManagedByU.Text = 'Find groups managed by user'
	$formFindGroupsManagedByU.add_Load($formFindGroupsManagedByU_Load)
	#
	# statusbar1
	#
	$statusbar1.Font = 'Microsoft Sans Serif, 9.5pt'
	$statusbar1.Location = '0, 256'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '282, 22'
	$statusbar1.TabIndex = 18
	#
	# textbox1
	#
	$textbox1.Location = '160, 211'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '96, 20'
	$textbox1.TabIndex = 17
	$textbox1.Visible = $False
	$textbox1.add_TextChanged($textbox1_TextChanged)
	#
	# buttonExportGroups
	#
	$buttonExportGroups.Location = '160, 197'
	$buttonExportGroups.Name = 'buttonExportGroups'
	$buttonExportGroups.Size = '108, 47'
	$buttonExportGroups.TabIndex = 16
	$buttonExportGroups.Text = 'Export Groups'
	$buttonExportGroups.UseCompatibleTextRendering = $True
	$buttonExportGroups.UseVisualStyleBackColor = $True
	$buttonExportGroups.add_Click($buttonExportGroups_Click)
	#
	# comboboxGroups
	#
	$comboboxGroups.FormattingEnabled = $True
	$comboboxGroups.Location = '12, 140'
	$comboboxGroups.Name = 'comboboxGroups'
	$comboboxGroups.Size = '256, 21'
	$comboboxGroups.TabIndex = 15
	$comboboxGroups.add_SelectedIndexChanged($comboboxGroups_SelectedIndexChanged)
	#
	# textboxUsername
	#
	$textboxUsername.Location = '133, 26'
	$textboxUsername.Name = 'textboxUsername'
	$textboxUsername.Size = '135, 20'
	$textboxUsername.TabIndex = 13
	$textboxUsername.add_TextChanged($textboxUsername_TextChanged)
	#
	# labelGroupsManagedByUser
	#
	$labelGroupsManagedByUser.AutoSize = $True
	$labelGroupsManagedByUser.Font = 'Microsoft Sans Serif, 10pt'
	$labelGroupsManagedByUser.Location = '12, 104'
	$labelGroupsManagedByUser.Name = 'labelGroupsManagedByUser'
	$labelGroupsManagedByUser.Size = '163, 20'
	$labelGroupsManagedByUser.TabIndex = 12
	$labelGroupsManagedByUser.Text = 'Groups managed by user:'
	$labelGroupsManagedByUser.UseCompatibleTextRendering = $True
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Font = 'Microsoft Sans Serif, 12pt'
	$labelUsername.Location = '12, 26'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '86, 24'
	$labelUsername.TabIndex = 12
	$labelUsername.Text = 'Username:'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# buttonCheck
	#
	$buttonCheck.Location = '12, 197'
	$buttonCheck.Name = 'buttonCheck'
	$buttonCheck.Size = '100, 47'
	$buttonCheck.TabIndex = 11
	$buttonCheck.Text = 'Check'
	$buttonCheck.UseCompatibleTextRendering = $True
	$buttonCheck.UseVisualStyleBackColor = $True
	$buttonCheck.add_Click($buttonCheck_Click)
	#
	# folderbrowserdialog1
	#
	$formFindGroupsManagedByU.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formFindGroupsManagedByU.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formFindGroupsManagedByU.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formFindGroupsManagedByU.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formFindGroupsManagedByU.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formFindGroupsManagedByU.ShowDialog()

}
#endregion Source: Groups ManagedBy user.psf

#region Source: Compare Users' groups.psf
function Show-Compare_Users__groups_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCompareUsersGroups = New-Object 'System.Windows.Forms.Form'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonExportUsers = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$labelUserDifference = New-Object 'System.Windows.Forms.Label'
	$labelFilterOptional = New-Object 'System.Windows.Forms.Label'
	$labelUserReference = New-Object 'System.Windows.Forms.Label'
	$textboxFilter = New-Object 'System.Windows.Forms.TextBox'
	$textboxUserDifference = New-Object 'System.Windows.Forms.TextBox'
	$textboxUserReference = New-Object 'System.Windows.Forms.TextBox'
	$listboxGroupsDifference = New-Object 'System.Windows.Forms.ListBox'
	$listboxGroupsReference = New-Object 'System.Windows.Forms.ListBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$buttonCompare = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formCompareUsersGroups_Load={
	
	}
	
	function Compare-UserGroups
	{
		
		param (
			[Parameter(Mandatory = $true)]
			[string]$ReferenceObject,
			[Parameter(Mandatory = $true)]
			[string]$DifferenceObject,
			[Parameter(Mandatory = $false)]
			[string]$Filter
		)
		#Clear listboxes
		$listboxGroupsDifference.Items.Clear()
		$listboxGroupsReference.Items.Clear()
		
		#If filter is chosen
		if ($PSBoundParameters.ContainsKey('Filter'))
		{
			$ReferenceUser_groups = Get-ADPrincipalGroupMembership -Server $domain -Identity $ReferenceObject |
			where-object { $_.name -like $Filter } | Select-Object -Property samaccountname | Sort-Object samaccountname
			$DifferenceUser_groups = Get-ADPrincipalGroupMembership -Server $domain -Identity $DifferenceObject |
			where-object { $_.name -like $Filter } | Select-Object -Property samAccountName | Sort-Object samaccountname
		}
		else
		{
			$ReferenceUser_groups = Get-ADPrincipalGroupMembership -Server $domain -Identity $ReferenceObject |
			Select-Object -Property samaccountname | Sort-Object -Property samaccountname
			$DifferenceUser_groups = Get-ADPrincipalGroupMembership -Server $domain -Identity $DifferenceObject |
			Select-Object -Property samaccountname | Sort-Object -Property samaccountname
		}
		
		$global:CompareUsers = Compare-Object -ReferenceObject $ReferenceUser_groups -DifferenceObject $DifferenceUser_groups -Property samAccountName
		$array_difference_groups = @()
		$array_reference_groups = @()
		
		
		ForEach ($Compared_group in $CompareUsers)
		{
			if ($Compared_group.sideindicator -eq '<=')
			{
				$array_reference_groups += $Compared_group.samAccountName
				$listboxGroupsReference.Items.Add($Compared_group.samAccountname.Trim())
			}
			
			else
			{
				$array_difference_groups += $Compared_group.samAccountname
				$listboxGroupsDifference.Items.Add($Compared_group.samAccountname.Trim())
			}
			
			
		}
		If ($array_difference_groups.Count -gt $array_reference_groups.Count)
		{
			$limit = $array_difference_groups.Count
		}
		Else
		{
			$limit = $array_reference_groups.count
		}
		
		$global:csv = For ($i = 0; $i -lt $limit; $i++)
		{
			New-Object -TypeName psobject -Property @{
				$($ReferenceObject + " has which $DifferenceObject doesn't:") = $(If ($array_reference_groups[$i]) { $array_reference_groups[$i] })
				$($DifferenceObject + " has which $ReferenceObject doesn't:") = $(If ($array_difference_groups[$i]) { $array_difference_groups[$i] })
			}
		}
		
		
	}
	
	
	$labelUserDifference_Click={
		#TODO: Place custom script here
		
	}
	
	
	$buttonCompare_Click={
		#TODO: Place custom script here
		$textboxUserDifference.Text = $textboxUserDifference.Text.Trim()
		$textboxUserReference.Text = $textboxUserReference.Text.Trim()
		if ($textboxFilter.Text.Trim() -ne '')
		{
			Compare-UserGroups -ReferenceObject $textboxUserReference.Text -DifferenceObject $textboxUserDifference.Text -Filter $textboxFilter.Text
			
		}
		else
		{
			Compare-UserGroups -ReferenceObject $textboxUserReference.Text -DifferenceObject $textboxUserDifference.Text
		}
		
		if ($listboxGroupsDifference.Items.Count -gt 0 -or $listboxGroupsReference.Items.Count -gt 0)
		{
			$buttonExportUsers.Enabled = $true
		}
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	#endregion
	
	$labelUserReference_Click={
		#TODO: Place custom script here
		
	}
	
	$textboxUserReference_TextChanged={
		#TODO: Place custom script here
		$listboxGroupsDifference.Items.Clear()
		$listboxGroupsReference.Items.Clear()
		$buttonExportUsers.Enabled = $false
		$buttonCompare.Enabled = $false
		if (($textboxUserReference.Text.Trim() -ne '') -and ($textboxUserDifference.Text.Trim() -ne ''))
		{
			$buttonCompare.Enabled = $true
		}
		
	}
	
	$buttonExportUsers_Click={
		$ExportConfirmation = $folderbrowserdialog1.ShowDialog()
		if ($ExportConfirmation -ne 'Cancel')
		{
			$textbox1.Text = $folderbrowserdialog1.SelectedPath + '\'
			$NameOfFile = [Microsoft.VisualBasic.Interaction]::InputBox("Please enter a filename", "Filename") + '.csv'
			if ($NameOfFile.Trim() -ne '.csv')
			{
				$FilePath = $textbox1.Text + $NameOfFile
				try
				{
					$csv | Export-Csv -NoTypeInformation -Path $FilePath
					[System.Windows.MessageBox]::Show("Groups was saved to:`n$Filepath", "Success!", "OK", "Information")
				}
				catch
				{
					[System.Windows.MessageBox]::Show('Could not export groups', 'Unknown Error', 'OK', 'Error')
				}
			}
		}
		
	}
	
	$textboxUserDifference_TextChanged={
		#TODO: Place custom script here
		$listboxGroupsDifference.Items.Clear()
		$listboxGroupsReference.Items.Clear()
		$buttonExportUsers.Enabled = $false
		$buttonCompare.Enabled = $false
		if (($textboxUserDifference.Text.Trim() -ne '') -and ($textboxUserReference.Text.Trim() -ne ''))
		{
			$buttonCompare.Enabled = $true
		}
		
	}
	
	$textboxFilter_TextChanged={
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCompareUsersGroups.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Compare_Users__groups_textbox1 = $textbox1.Text
		$script:Compare_Users__groups_textboxFilter = $textboxFilter.Text
		$script:Compare_Users__groups_textboxUserDifference = $textboxUserDifference.Text
		$script:Compare_Users__groups_textboxUserReference = $textboxUserReference.Text
		$script:Compare_Users__groups_listboxGroupsDifference = $listboxGroupsDifference.SelectedItems
		$script:Compare_Users__groups_listboxGroupsReference = $listboxGroupsReference.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonExportUsers.remove_Click($buttonExportUsers_Click)
			$textboxFilter.remove_TextChanged($textboxFilter_TextChanged)
			$textboxUserDifference.remove_TextChanged($textboxUserDifference_TextChanged)
			$textboxUserReference.remove_TextChanged($textboxUserReference_TextChanged)
			$buttonCompare.remove_Click($buttonCompare_Click)
			$formCompareUsersGroups.remove_Load($formCompareUsersGroups_Load)
			$formCompareUsersGroups.remove_Load($Form_StateCorrection_Load)
			$formCompareUsersGroups.remove_Closing($Form_StoreValues_Closing)
			$formCompareUsersGroups.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCompareUsersGroups.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# formCompareUsersGroups
	#
	$formCompareUsersGroups.Controls.Add($textbox1)
	$formCompareUsersGroups.Controls.Add($buttonExportUsers)
	$formCompareUsersGroups.Controls.Add($groupbox1)
	$formCompareUsersGroups.Controls.Add($listboxGroupsDifference)
	$formCompareUsersGroups.Controls.Add($listboxGroupsReference)
	$formCompareUsersGroups.Controls.Add($label1)
	$formCompareUsersGroups.Controls.Add($label2)
	$formCompareUsersGroups.Controls.Add($buttonCompare)
	$formCompareUsersGroups.AutoScaleDimensions = '6, 13'
	$formCompareUsersGroups.AutoScaleMode = 'Font'
	$formCompareUsersGroups.ClientSize = '569, 512'
	$formCompareUsersGroups.FormBorderStyle = 'FixedDialog'
	$formCompareUsersGroups.MaximizeBox = $False
	$formCompareUsersGroups.MinimizeBox = $False
	$formCompareUsersGroups.Name = 'formCompareUsersGroups'
	$formCompareUsersGroups.StartPosition = 'CenterScreen'
	$formCompareUsersGroups.Text = 'Compare Users'' groups'
	$formCompareUsersGroups.add_Load($formCompareUsersGroups_Load)
	#
	# textbox1
	#
	$textbox1.Location = '437, 49'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '100, 20'
	$textbox1.TabIndex = 12
	$textbox1.Visible = $False
	#
	# buttonExportUsers
	#
	$buttonExportUsers.Enabled = $False
	$buttonExportUsers.Location = '437, 34'
	$buttonExportUsers.Name = 'buttonExportUsers'
	$buttonExportUsers.Size = '107, 50'
	$buttonExportUsers.TabIndex = 11
	$buttonExportUsers.Text = 'Export Groups'
	$buttonExportUsers.UseCompatibleTextRendering = $True
	$buttonExportUsers.UseVisualStyleBackColor = $True
	$buttonExportUsers.add_Click($buttonExportUsers_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($labelUserDifference)
	$groupbox1.Controls.Add($labelFilterOptional)
	$groupbox1.Controls.Add($labelUserReference)
	$groupbox1.Controls.Add($textboxFilter)
	$groupbox1.Controls.Add($textboxUserDifference)
	$groupbox1.Controls.Add($textboxUserReference)
	$groupbox1.Location = '22, 12'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '243, 136'
	$groupbox1.TabIndex = 8
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Fill in the fields'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# labelUserDifference
	#
	$labelUserDifference.AutoSize = $True
	$labelUserDifference.Location = '6, 58'
	$labelUserDifference.Name = 'labelUserDifference'
	$labelUserDifference.Size = '93, 17'
	$labelUserDifference.TabIndex = 11
	$labelUserDifference.Text = 'User (Difference):'
	$labelUserDifference.UseCompatibleTextRendering = $True
	#
	# labelFilterOptional
	#
	$labelFilterOptional.AutoSize = $True
	$labelFilterOptional.Location = '7, 97'
	$labelFilterOptional.Name = 'labelFilterOptional'
	$labelFilterOptional.Size = '86, 17'
	$labelFilterOptional.TabIndex = 12
	$labelFilterOptional.Text = 'Filter (Optional):'
	$labelFilterOptional.UseCompatibleTextRendering = $True
	#
	# labelUserReference
	#
	$labelUserReference.AutoSize = $True
	$labelUserReference.Location = '7, 25'
	$labelUserReference.Name = 'labelUserReference'
	$labelUserReference.Size = '94, 17'
	$labelUserReference.TabIndex = 13
	$labelUserReference.Text = 'User (Reference):'
	$labelUserReference.UseCompatibleTextRendering = $True
	#
	# textboxFilter
	#
	$textboxFilter.Location = '107, 97'
	$textboxFilter.Name = 'textboxFilter'
	$textboxFilter.Size = '128, 20'
	$textboxFilter.TabIndex = 8
	$textboxFilter.add_TextChanged($textboxFilter_TextChanged)
	#
	# textboxUserDifference
	#
	$textboxUserDifference.Location = '107, 55'
	$textboxUserDifference.Name = 'textboxUserDifference'
	$textboxUserDifference.Size = '128, 20'
	$textboxUserDifference.TabIndex = 9
	$textboxUserDifference.add_TextChanged($textboxUserDifference_TextChanged)
	#
	# textboxUserReference
	#
	$textboxUserReference.Location = '107, 22'
	$textboxUserReference.Name = 'textboxUserReference'
	$textboxUserReference.Size = '128, 20'
	$textboxUserReference.TabIndex = 10
	$textboxUserReference.add_TextChanged($textboxUserReference_TextChanged)
	#
	# listboxGroupsDifference
	#
	$listboxGroupsDifference.FormattingEnabled = $True
	$listboxGroupsDifference.Location = '308, 184'
	$listboxGroupsDifference.Name = 'listboxGroupsDifference'
	$listboxGroupsDifference.Size = '236, 316'
	$listboxGroupsDifference.TabIndex = 5
	#
	# listboxGroupsReference
	#
	$listboxGroupsReference.FormattingEnabled = $True
	$listboxGroupsReference.Location = '22, 184'
	$listboxGroupsReference.Name = 'listboxGroupsReference'
	$listboxGroupsReference.Size = '256, 316'
	$listboxGroupsReference.TabIndex = 5
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Font = 'Microsoft Sans Serif, 9pt'
	$label1.Location = '22, 162'
	$label1.Name = 'label1'
	$label1.Size = '130, 19'
	$label1.TabIndex = 4
	$label1.Text = 'Reference user groups'
	$label1.UseCompatibleTextRendering = $True
	#
	# label2
	#
	$label2.AutoSize = $True
	$label2.Font = 'Microsoft Sans Serif, 9pt'
	$label2.Location = '308, 162'
	$label2.Name = 'label2'
	$label2.Size = '133, 19'
	$label2.TabIndex = 4
	$label2.Text = 'Difference user groups:'
	$label2.UseCompatibleTextRendering = $True
	#
	# buttonCompare
	#
	$buttonCompare.Enabled = $False
	$buttonCompare.Location = '308, 34'
	$buttonCompare.Name = 'buttonCompare'
	$buttonCompare.Size = '110, 47'
	$buttonCompare.TabIndex = 1
	$buttonCompare.Text = 'Compare'
	$buttonCompare.UseCompatibleTextRendering = $True
	$buttonCompare.UseVisualStyleBackColor = $True
	$buttonCompare.add_Click($buttonCompare_Click)
	#
	# folderbrowserdialog1
	#
	$groupbox1.ResumeLayout()
	$formCompareUsersGroups.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCompareUsersGroups.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCompareUsersGroups.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCompareUsersGroups.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCompareUsersGroups.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCompareUsersGroups.ShowDialog()

}
#endregion Source: Compare Users' groups.psf

#region Source: AD Search Engine.psf
function Show-AD_Search_Engine_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSearchEngineForActiv = New-Object 'System.Windows.Forms.Form'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonResetAll = New-Object 'System.Windows.Forms.Button'
	$label4SelectOperator = New-Object 'System.Windows.Forms.Label'
	$comboboxOperator = New-Object 'System.Windows.Forms.ComboBox'
	$buttonRemoveCondition = New-Object 'System.Windows.Forms.Button'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$buttonAddCondition = New-Object 'System.Windows.Forms.Button'
	$buttonExportObjects = New-Object 'System.Windows.Forms.Button'
	$buttonGetAttributes = New-Object 'System.Windows.Forms.Button'
	$listboxFilterList = New-Object 'System.Windows.Forms.ListBox'
	$listboxResults = New-Object 'System.Windows.Forms.ListBox'
	$label5ConstructFilter = New-Object 'System.Windows.Forms.Label'
	$label2ClickTheButton = New-Object 'System.Windows.Forms.Label'
	$label3ChooseAttribute = New-Object 'System.Windows.Forms.Label'
	$label1ChooseObjectType = New-Object 'System.Windows.Forms.Label'
	$textboxFilter = New-Object 'System.Windows.Forms.TextBox'
	$comboboxObjectType = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxAttribute = New-Object 'System.Windows.Forms.ComboBox'
	$folderbrowserdialog1 = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSearchEngineForActiv_Load = {
		$formSearchEngineForActiv.MaximizeBox = $false
		$comboboxObjectType.Items.Add('User')
		$comboboxObjectType.Items.Add('Group')
		$comboboxObjectType.DropDownStyle = 'DropDownList'
		$comboboxOperator.Items.Add('like')
		$comboboxOperator.Items.Add('notlike')
		$comboboxOperator.Items.Add('eq')
		$comboboxOperator.Items.Add('ne')
		$comboboxOperator.DropDownStyle = 'DropDownList'
		$comboboxAttribute.DropDownStyle = 'DropDownList'
		$buttonAddCondition.Enabled = $false
		$buttonExportObjects.Enabled = $false
		$buttonSearch.Enabled = $false
		$buttonGetAttributes.Enabled = $false
		$buttonRemoveCondition.Enabled = $false
		$textboxFilter.Enabled = $false
		$comboboxAttribute.Enabled = $false
		$comboboxOperator.Enabled = $false
	}
	
	function Get-ObjectAttributes
	{
		param (
			[string]$ObjectType
		)
		
		try
		{
			if ($ObjectType -eq 'User')
			{
				$global:objProperties = Get-ADUser -Server "" -Filter * -Properties * | Select-Object -First 1
				foreach ($global:objProperty in $objProperties.PsObject.Properties.name)
				{
					$comboboxAttribute.Items.Add($objProperty)
				}
			}
			elseif ($ObjectType -eq 'Group')
			{
				$global:objProperties = Get-ADGroup -Server "" -Filter * -Properties * | Select-Object -First 1
				foreach ($global:objProperty in $objProperties.PsObject.Properties.name)
				{
					$comboboxAttribute.Items.Add($objProperty)
				}
			}
		}
		catch
		{
			[System.Windows.MessageBox]::Show("Could not obtain the attributes. Please try again", "Unknown Error", 'OK', "Warning")
		}
	}
	
	function Get-Objects
	{
		param (
			[string[]]$Properties,
			[string]$ObjectType,
			[string]$Filter
		)
		$all_users = ''
		$Generate_filter = ''
		
		try
		{
			# Section to setup -Filter correctly.
			if ($ObjectType -eq 'User')
			{
				ForEach ($Property in $Properties)
				{
					# Make sure filter doesn't end with "-and"
					if ($property -eq $properties[-1])
					{
						$Generate_filter += $Property
					}
					else
					{
						$Generate_filter += "$Property -and "
					}
				}
				$all_users = Get-ADUser -Server "" -Filter "$Generate_filter" | Select-Object -ExpandProperty samAccountName
				ForEach ($user in $all_users)
				{
					$listboxResults.Items.Add($user)
				}
			}
			
			elseif ($ObjectType -eq 'Group')
			{
				ForEach ($Property in $Properties)
				{
					if ($property -eq $properties[-1])
					{
						$Generate_filter += $Property
					}
					else
					{
						$Generate_filter += "$Property -and "
					}
				}
				
				$all_groups = Get-ADGroup -Server "" -Filter "$Generate_filter" | Select-Object -ExpandProperty samAccountName
				ForEach ($group in $all_groups)
				{
					$listboxResults.Items.Add($group)
				}
			}
		}
		catch { }
	}
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
		$ComboBox.ValueMember = $ValueMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		$ListBox.DisplayMember = $DisplayMember
		$ListBox.ValueMember = $ValueMember
	}
	#endregion
	
	$listboxUserOrGroup_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	$comboboxAttribute_SelectedIndexChanged = {
		$comboboxOperator.Enabled = $true
	}
	
	$buttonAddCondition_Click = {
		$comboboxOperator.SelectedItem = ''
		$generatedFilter = ''
		[string]$generatedFilter = "($($comboboxAttribute.SelectedItem) -$($comboboxOperator.Text) '$($textboxFilter.Text)')"
		$listboxFilterList.Items.Add($generatedFilter)
		$textboxFilter.Clear()
		if ($listboxFilterList.Items.Count -gt 0)
		{
			$buttonSearch.Enabled = $true
		}
	}
	
	$buttonRemoveCondition_Click = {
		$listboxFilterList.Items.Remove($listboxFilterList.SelectedItem)
		$buttonAddCondition.Enabled = $false
		if ($listboxFilterList.Items.Count -eq 0)
		{
			$buttonSearch.Enabled = $false
		}
	}
	
	$comboboxObjectType_SelectedIndexChanged = {
		$buttonGetAttributes.Enabled = $false
		if (($comboboxObjectType.SelectedItem -ne '') -and ($objectType -ne $comboboxObjectType.SelectedIndex))
		{
			$buttonGetAttributes.Enabled = $true
		}
	}
	
	$buttonGetAttributes_Click = {
		$global:objectType = $comboboxObjectType.SelectedIndex
		$comboboxAttribute.Items.Clear()
		$listboxFilterList.Items.Clear()
		$listboxResults.Items.Clear()
		#TODO: Place custom script here
		Get-ObjectAttributes -ObjectType $comboboxObjectType.SelectedItem
		$comboboxAttribute.Enabled = $true
		$comboboxAttribute.SelectedItem = "SamAccountName"
		$buttonGetAttributes.Enabled = $false
		$buttonGetAttributes.Text = 'Refresh Attribute'
	}
	
	$buttonSearch_Click = {
		$listboxResults.Items.Clear()
		$buttonExportObjects.Enabled = $false
		Get-Objects -ObjectType $comboboxObjectType.SelectedItem -Properties $listboxFilterList.Items
		if ($buttonGetAttributes.Enabled -eq $true)
		{
			[System.Windows.MessageBox]::Show("You did not Refresh the attributes after changing Object Type!`nResults might be incorrect", 'Be aware!', 'OK', 'Warning')
		}
		if ($listboxResults.Items.Count -gt 0)
		{
			$buttonExportObjects.Enabled = $true
		}
	}
	
	
	$textboxFilter_TextChanged={
		#TODO: Place custom script here
		$buttonAddCondition.Enabled = $false
		if ($textboxFilter.Text.Trim() -ne '')
		{
			$buttonAddCondition.Enabled = $true
		}
	}
	
	$listboxFilterList_SelectedIndexChanged={
		#TODO: Place custom script here
		$buttonRemoveCondition.Enabled = $false
		if ($listboxFilterList.SelectedItem)
		{
			$buttonRemoveCondition.Enabled = $true
		}
		
	}
	
	$listboxResults_SelectedIndexChanged={
		#TODO: Place custom script here
	}
	
	$comboboxOperator_SelectedIndexChanged={
		$textboxFilter.Enabled = $true
		
	}
	
	$buttonResetAll_Click = {
		$listboxFilterList.Items.Clear()
		$listboxResults.Items.Clear()
		$textboxFilter.Clear()
		$comboboxAttribute.SelectedText = $null
		$comboboxOperator.SelectedText = $null
		
		<#$buttonAddCondition.Enabled = $false
		$buttonExportObjects.Enabled = $false
		$buttonSearch.Enabled = $false
		$buttonGetAttributes.Enabled = $false
		$buttonRemoveCondition.Enabled = $false
		$textboxFilter.Enabled = $false
		$comboboxAttribute.Enabled = $false
		$comboboxOperator.Enabled = $false
		$comboboxOperator.SelectedItem = ''
		$comboboxAttribute.SelectedItem = ''
		#>
	}
	
	$buttonExportObjects_Click={
		$ExportConfirmation = $folderbrowserdialog1.ShowDialog()
		if ($ExportConfirmation -ne 'Cancel')
		{
			$textbox1.Text = $folderbrowserdialog1.SelectedPath + '\'
			$NameOfFile = [Microsoft.VisualBasic.Interaction]::InputBox("Please enter a filename", "Filename") + '.txt'
			if ($NameOfFile.Trim() -ne '.txt')
			{
				$FilePath = $textbox1.Text + $NameOfFile
				try
				{
					$listboxResults.Items | Out-File -FilePath $FilePath
					[System.Windows.MessageBox]::Show("Groups was saved to:`n$Filepath", "Success!", "OK", "Information")
				}
				catch
				{
					[System.Windows.MessageBox]::Show('Could not export groups', 'Unknown Error', 'OK', 'Error')
				}
			}
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSearchEngineForActiv.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:AD_Search_Engine_textbox1 = $textbox1.Text
		$script:AD_Search_Engine_comboboxOperator = $comboboxOperator.Text
		$script:AD_Search_Engine_comboboxOperator_SelectedItem = $comboboxOperator.SelectedItem
		$script:AD_Search_Engine_listboxFilterList = $listboxFilterList.SelectedItems
		$script:AD_Search_Engine_listboxResults = $listboxResults.SelectedItems
		$script:AD_Search_Engine_textboxFilter = $textboxFilter.Text
		$script:AD_Search_Engine_comboboxObjectType = $comboboxObjectType.Text
		$script:AD_Search_Engine_comboboxObjectType_SelectedItem = $comboboxObjectType.SelectedItem
		$script:AD_Search_Engine_comboboxAttribute = $comboboxAttribute.Text
		$script:AD_Search_Engine_comboboxAttribute_SelectedItem = $comboboxAttribute.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonResetAll.remove_Click($buttonResetAll_Click)
			$comboboxOperator.remove_SelectedIndexChanged($comboboxOperator_SelectedIndexChanged)
			$buttonRemoveCondition.remove_Click($buttonRemoveCondition_Click)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$buttonAddCondition.remove_Click($buttonAddCondition_Click)
			$buttonExportObjects.remove_Click($buttonExportObjects_Click)
			$buttonGetAttributes.remove_Click($buttonGetAttributes_Click)
			$listboxFilterList.remove_SelectedIndexChanged($listboxFilterList_SelectedIndexChanged)
			$listboxResults.remove_SelectedIndexChanged($listboxResults_SelectedIndexChanged)
			$textboxFilter.remove_TextChanged($textboxFilter_TextChanged)
			$comboboxObjectType.remove_SelectedIndexChanged($comboboxObjectType_SelectedIndexChanged)
			$comboboxAttribute.remove_SelectedIndexChanged($comboboxAttribute_SelectedIndexChanged)
			$formSearchEngineForActiv.remove_Load($formSearchEngineForActiv_Load)
			$formSearchEngineForActiv.remove_Load($Form_StateCorrection_Load)
			$formSearchEngineForActiv.remove_Closing($Form_StoreValues_Closing)
			$formSearchEngineForActiv.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSearchEngineForActiv.SuspendLayout()
	#
	# formSearchEngineForActiv
	#
	$formSearchEngineForActiv.Controls.Add($textbox1)
	$formSearchEngineForActiv.Controls.Add($buttonResetAll)
	$formSearchEngineForActiv.Controls.Add($label4SelectOperator)
	$formSearchEngineForActiv.Controls.Add($comboboxOperator)
	$formSearchEngineForActiv.Controls.Add($buttonRemoveCondition)
	$formSearchEngineForActiv.Controls.Add($buttonSearch)
	$formSearchEngineForActiv.Controls.Add($buttonAddCondition)
	$formSearchEngineForActiv.Controls.Add($buttonExportObjects)
	$formSearchEngineForActiv.Controls.Add($buttonGetAttributes)
	$formSearchEngineForActiv.Controls.Add($listboxFilterList)
	$formSearchEngineForActiv.Controls.Add($listboxResults)
	$formSearchEngineForActiv.Controls.Add($label5ConstructFilter)
	$formSearchEngineForActiv.Controls.Add($label2ClickTheButton)
	$formSearchEngineForActiv.Controls.Add($label3ChooseAttribute)
	$formSearchEngineForActiv.Controls.Add($label1ChooseObjectType)
	$formSearchEngineForActiv.Controls.Add($textboxFilter)
	$formSearchEngineForActiv.Controls.Add($comboboxObjectType)
	$formSearchEngineForActiv.Controls.Add($comboboxAttribute)
	$formSearchEngineForActiv.AutoScaleDimensions = '6, 13'
	$formSearchEngineForActiv.AutoScaleMode = 'Font'
	$formSearchEngineForActiv.ClientSize = '809, 387'
	$formSearchEngineForActiv.FormBorderStyle = 'FixedToolWindow'
	$formSearchEngineForActiv.Name = 'formSearchEngineForActiv'
	$formSearchEngineForActiv.Text = 'Search Engine for Active Directory'
	$formSearchEngineForActiv.add_Load($formSearchEngineForActiv_Load)
	#
	# textbox1
	#
	$textbox1.Location = '29, 334'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '100, 20'
	$textbox1.TabIndex = 13
	$textbox1.Visible = $False
	#
	# buttonResetAll
	#
	$buttonResetAll.Location = '441, 287'
	$buttonResetAll.Name = 'buttonResetAll'
	$buttonResetAll.Size = '111, 34'
	$buttonResetAll.TabIndex = 12
	$buttonResetAll.Text = 'Reset All'
	$buttonResetAll.UseCompatibleTextRendering = $True
	$buttonResetAll.UseVisualStyleBackColor = $True
	$buttonResetAll.add_Click($buttonResetAll_Click)
	#
	# label4SelectOperator
	#
	$label4SelectOperator.AutoSize = $True
	$label4SelectOperator.Font = 'Microsoft Sans Serif, 10pt'
	$label4SelectOperator.Location = '12, 164'
	$label4SelectOperator.Name = 'label4SelectOperator'
	$label4SelectOperator.Size = '116, 20'
	$label4SelectOperator.TabIndex = 11
	$label4SelectOperator.Text = '4. Select Operator'
	$label4SelectOperator.UseCompatibleTextRendering = $True
	#
	# comboboxOperator
	#
	$comboboxOperator.FormattingEnabled = $True
	$comboboxOperator.Location = '175, 164'
	$comboboxOperator.Name = 'comboboxOperator'
	$comboboxOperator.Size = '141, 21'
	$comboboxOperator.TabIndex = 10
	$comboboxOperator.add_SelectedIndexChanged($comboboxOperator_SelectedIndexChanged)
	#
	# buttonRemoveCondition
	#
	$buttonRemoveCondition.Location = '441, 235'
	$buttonRemoveCondition.Name = 'buttonRemoveCondition'
	$buttonRemoveCondition.Size = '111, 34'
	$buttonRemoveCondition.TabIndex = 9
	$buttonRemoveCondition.Text = 'Remove condition'
	$buttonRemoveCondition.UseCompatibleTextRendering = $True
	$buttonRemoveCondition.UseVisualStyleBackColor = $True
	$buttonRemoveCondition.add_Click($buttonRemoveCondition_Click)
	#
	# buttonSearch
	#
	$buttonSearch.Location = '163, 287'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '153, 79'
	$buttonSearch.TabIndex = 8
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# buttonAddCondition
	#
	$buttonAddCondition.Location = '322, 235'
	$buttonAddCondition.Name = 'buttonAddCondition'
	$buttonAddCondition.Size = '113, 34'
	$buttonAddCondition.TabIndex = 7
	$buttonAddCondition.Text = 'Add condition'
	$buttonAddCondition.UseCompatibleTextRendering = $True
	$buttonAddCondition.UseVisualStyleBackColor = $True
	$buttonAddCondition.add_Click($buttonAddCondition_Click)
	#
	# buttonExportObjects
	#
	$buttonExportObjects.Location = '12, 287'
	$buttonExportObjects.Name = 'buttonExportObjects'
	$buttonExportObjects.Size = '134, 79'
	$buttonExportObjects.TabIndex = 6
	$buttonExportObjects.Text = 'Export Objects'
	$buttonExportObjects.UseCompatibleTextRendering = $True
	$buttonExportObjects.UseVisualStyleBackColor = $True
	$buttonExportObjects.add_Click($buttonExportObjects_Click)
	#
	# buttonGetAttributes
	#
	$buttonGetAttributes.Location = '175, 72'
	$buttonGetAttributes.Name = 'buttonGetAttributes'
	$buttonGetAttributes.Size = '141, 25'
	$buttonGetAttributes.TabIndex = 5
	$buttonGetAttributes.Text = 'Get Attributes'
	$buttonGetAttributes.UseCompatibleTextRendering = $True
	$buttonGetAttributes.UseVisualStyleBackColor = $True
	$buttonGetAttributes.add_Click($buttonGetAttributes_Click)
	#
	# listboxFilterList
	#
	$listboxFilterList.FormattingEnabled = $True
	$listboxFilterList.Location = '322, 17'
	$listboxFilterList.Name = 'listboxFilterList'
	$listboxFilterList.Size = '230, 212'
	$listboxFilterList.TabIndex = 4
	$listboxFilterList.add_SelectedIndexChanged($listboxFilterList_SelectedIndexChanged)
	#
	# listboxResults
	#
	$listboxResults.FormattingEnabled = $True
	$listboxResults.Location = '568, 17'
	$listboxResults.Name = 'listboxResults'
	$listboxResults.Size = '229, 355'
	$listboxResults.Sorted = $True
	$listboxResults.TabIndex = 4
	$listboxResults.add_SelectedIndexChanged($listboxResults_SelectedIndexChanged)
	#
	# label5ConstructFilter
	#
	$label5ConstructFilter.AutoSize = $True
	$label5ConstructFilter.Font = 'Microsoft Sans Serif, 10pt'
	$label5ConstructFilter.Location = '12, 209'
	$label5ConstructFilter.Name = 'label5ConstructFilter'
	$label5ConstructFilter.Size = '117, 20'
	$label5ConstructFilter.TabIndex = 3
	$label5ConstructFilter.Text = '5. Construct Filter:'
	$label5ConstructFilter.UseCompatibleTextRendering = $True
	#
	# label2ClickTheButton
	#
	$label2ClickTheButton.AutoSize = $True
	$label2ClickTheButton.Font = 'Microsoft Sans Serif, 10pt'
	$label2ClickTheButton.Location = '12, 74'
	$label2ClickTheButton.Name = 'label2ClickTheButton'
	$label2ClickTheButton.Size = '134, 20'
	$label2ClickTheButton.TabIndex = 3
	$label2ClickTheButton.Text = '2. Click the button =>'
	$label2ClickTheButton.UseCompatibleTextRendering = $True
	#
	# label3ChooseAttribute
	#
	$label3ChooseAttribute.AutoSize = $True
	$label3ChooseAttribute.Font = 'Microsoft Sans Serif, 10pt'
	$label3ChooseAttribute.Location = '12, 119'
	$label3ChooseAttribute.Name = 'label3ChooseAttribute'
	$label3ChooseAttribute.Size = '126, 20'
	$label3ChooseAttribute.TabIndex = 3
	$label3ChooseAttribute.Text = '3. Choose Attribute:'
	$label3ChooseAttribute.UseCompatibleTextRendering = $True
	#
	# label1ChooseObjectType
	#
	$label1ChooseObjectType.AutoSize = $True
	$label1ChooseObjectType.Font = 'Microsoft Sans Serif, 10pt'
	$label1ChooseObjectType.Location = '12, 29'
	$label1ChooseObjectType.Name = 'label1ChooseObjectType'
	$label1ChooseObjectType.Size = '149, 20'
	$label1ChooseObjectType.TabIndex = 3
	$label1ChooseObjectType.Text = '1. Choose Object Type:'
	$label1ChooseObjectType.UseCompatibleTextRendering = $True
	#
	# textboxFilter
	#
	$textboxFilter.Location = '175, 209'
	$textboxFilter.Name = 'textboxFilter'
	$textboxFilter.Size = '141, 20'
	$textboxFilter.TabIndex = 2
	$textboxFilter.add_TextChanged($textboxFilter_TextChanged)
	#
	# comboboxObjectType
	#
	$comboboxObjectType.FormattingEnabled = $True
	$comboboxObjectType.Location = '175, 29'
	$comboboxObjectType.Name = 'comboboxObjectType'
	$comboboxObjectType.Size = '141, 21'
	$comboboxObjectType.TabIndex = 1
	$comboboxObjectType.add_SelectedIndexChanged($comboboxObjectType_SelectedIndexChanged)
	#
	# comboboxAttribute
	#
	$comboboxAttribute.FormattingEnabled = $True
	$comboboxAttribute.Location = '175, 119'
	$comboboxAttribute.Name = 'comboboxAttribute'
	$comboboxAttribute.Size = '141, 21'
	$comboboxAttribute.TabIndex = 1
	$comboboxAttribute.add_SelectedIndexChanged($comboboxAttribute_SelectedIndexChanged)
	#
	# folderbrowserdialog1
	#
	$formSearchEngineForActiv.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSearchEngineForActiv.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSearchEngineForActiv.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSearchEngineForActiv.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSearchEngineForActiv.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSearchEngineForActiv.ShowDialog()

}
#endregion Source: AD Search Engine.psf

#Start the application
Main ($CommandLine)
